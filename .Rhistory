proph.5 + proph.6 + proph.7 + proph.8 + proph.9 +
proph.10 + proph.11 + proph.12 + year1.1 + year1.2 +
year1.3 + year1.4 + year1.5 + year1.6 + year1.7 +
year1.8 + year1.9 + year1.10 + year1.11 + year1.12 +
year2.1 + year2.2 + year2.3 + year2.4 + year2.5 +
year2.6 + year2.7 + year2.8 + year2.9 + year2.10 +
year2.11 + year2.12 + agecl1.1 + agecl1.2 + agecl1.3 +
agecl1.4 + agecl1.5 + agecl1.6 + agecl1.7 + agecl1.8 +
agecl1.9 + agecl1.10 + agecl1.11 + agecl1.12 + agecl2.1 +
agecl2.2 + agecl2.3 + agecl2.4 + agecl2.5 + agecl2.6 +
agecl2.7 + agecl2.8 + agecl2.9 + agecl2.10 + agecl2.11 +
agecl2.12 + strata(trans), data = msebmt.new, method = "breslow")
coefficients(cfull.1)
coefficients(cfull.2)
View(msebmt)
### Start by setting the working directory
getwd()
### List files (raw data)
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
### Look at each file
read.table(list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")[1])
### Look at each file
read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"))
### Look at each file
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM")))
### Look at each file
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), header = FALSE))
### Look at each file
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), col.names = FALSE))
### Look at each file
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), header = TRUE))
### Look at each file
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE))
system.file("aurum_data", package = "rAURUM")
### Create cohort
pat <- rAURUM::extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"), patids = as.character(c(1,3,4,6)))
str(pat)
pat
### Look at each file type
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE))
### We can then query this database, by selecting all rows from the *observation* table, and only printing the first 3. More details on how to query an SQLite database from within R is available in the documentation for R package RSQLite [@Muller2024].
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Define codelist
codelist <- "187341000000114"
### Add an index date and censoring date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
ho <- extract_ho(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation")
### Extract a history of type variable using extract_ho
ho <- rAURUM::extract_ho(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation")
### Create a connection
aurum_extract <- rAURUM::connect_database(tempfile("temp.sqlite"))
### Add data from observation files
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add data from drugissue files
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue",
subset.patids = c(1,3,4,6))
### List tables
RSQLite::dbListTables(aurum_extract)
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
codelist <- "187341000000114"
### Add an index date and censoring date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
ho <- rAURUM::extract_ho(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation")
str(ho)
ho
test_data <- extract_test_recent(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.post = 0,
time.prev = Inf)
### Extract most recent test results using `extract_test_recent`
test_data <- rAURUM::extract_test_recent(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.post = 0,
time.prev = Inf)
test_data
### Extract a time-to-event/survival variable using `extract_time_until`
time_until <- rAURUM::extract_time_until(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract,
tab = "observation")
time_until
pat
ho
### Extract most recent test results using `extract_test_recent`
test_data <- rAURUM::extract_test_recent(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.post = 0,
time.prev = Inf,
return.output = TRUE)
test_data
### Extract most recent test results using `extract_test_recent`
test_data <- rAURUM::extract_test_recent(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.post = 0,
time.prev = Inf,
return.output = TRUE)
test_data
time_until
### Extract a time-to-event/survival variable using `extract_time_until`
time_until <- rAURUM::extract_time_until(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
time_until
### Recursive merge
analysis.ready.pat <- Reduce(function(df1, df2) merge(df1, df2, by = "patid", all.x = TRUE), list(pat[,c("patid", "gender", "yob")], ho, time_until, test_data))
analysis.ready.pat
db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
rAURUM::db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
pat
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Combine query with cohort creating a boolean variable denoting 'history of'
combine_query_boolean(cohort = pat,
db.query = db.query,
query.type = "observation")
combine_query(cohort = pat,
db.query = db.query,
query.type = "med",
numobs = 3)
### Combine query with cohort retaining most recent three records, query.type = "med"
rAURUM::combine_query(cohort = pat,
db.query = db.query,
query.type = "med",
numobs = 3)
### Combine query with cohort retaining most recent three records, query.type = "med"
rAURUM::combine_query(cohort = pat,
db.query = db.query,
query.type = "med",
numobs = 3)
### Combine query with cohort creating a boolean variable denoting 'history of'
rAURUM::combine_query_boolean(cohort = pat,
db.query = db.query,
query.type = "observation")
### The `db_query` function will query the SQLite database for observations where the *medcodeid* or *prodcodeid* is in a specified codelist.
db.query <- rAURUM::db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
db.query
### The `combine_query_boolean` function will assess whether each individual in a specified cohort (`pat`)
### has an observation in the queried data (obtained using `db_query`) within a specified time frame from the index date, returning a 0/1 vector.
### The `cohort` must contain a variable called `indexdt` containing the index date.
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Combine query with cohort creating a boolean variable denoting 'history of'
rAURUM::combine_query_boolean(cohort = pat,
db.query = db.query,
query.type = "observation")
### Combine query with cohort retaining most recent three records, query.type = "med"
combine_query(cohort = pat,
db.query = db.query,
query.type = "med",
numobs = 3)
### Combine query with cohort retaining most recent three records, query.type = "med"
rAURUM::combine_query(cohort = pat,
db.query = db.query,
query.type = "med",
numobs = 3)
### Extract a history of type variable using extract_ho, query.type = "test"
rAURUM::combine_query(cohort = pat,
db.query = db.query,
query.type = "test",
numobs = 3)
### This example does not contain any real patient data.
### All patient data has been simulated but formatted to match the structure of CPRD Aurum data.*
### Start by setting the working directory
getwd()
### File location
system.file("aurum_data", package = "rAURUM")
### List files
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
### Create cohort
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
### Create cohort
pat <- rAURUM::extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
str(pat)
tempfile("temp.sqlite")
getwd()
pat
pat
### This example does not contain any real patient data.
### All patient data has been simulated but formatted to match the structure of CPRD Aurum data.*
### Start by clearing workspace and setting the working directory
rm(list=ls())
getwd()
### Install package
devtools::install_github("alexpate30/rAURUM")
### Start by clearing workspace and setting the working directory
rm(list=ls())
getwd()
### Install package
# devtools::install_github("alexpate30/rAURUM")
# install.packages("rAURUM") NOT YET ON CRAN
library(rAURUM)
### File location
system.file("aurum_data", package = "rAURUM")
### List files
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
### Look at each file type
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE))
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), header = TRUE))
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"), header = TRUE))
### List files
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"), header = TRUE))
head(read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), header = TRUE))
### Look at each file type
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"), header = TRUE))
### Look at each file type
data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE)
data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"), header = TRUE)
### This example does not contain any real patient data.
### All patient data has been simulated but formatted to match the structure of CPRD Aurum data.*
### Start by clearing workspace and setting the working directory
rm(list=ls())
getwd()
### Install package
# devtools::install_github("alexpate30/rAURUM")
# install.packages("rAURUM") NOT YET ON CRAN
library(rAURUM)
### File location
system.file("aurum_data", package = "rAURUM")
### List files
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
### Look at each file type
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"), header = TRUE))
##################################
### Step 1: Creation of cohort ###
##################################
### Create cohort
pat <- rAURUM::extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
pat
### Apply inclusion/exclusion criteria that can be applied only through the patient file
pat <- subset(pat, patid %in% c(1,3,4,6))
pat
### First create a connection to an SQLite database
aurum_extract <- rAURUM::connect_database("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/data/mydb.sqlite")
tempfile("temp.sqlite")
### Create a connection
aurum_extract <- rAURUM::connect_database("C:\Users\mbrxsap3\OneDrive - The University of Manchester\CHARIOT\data\mydb.sqlite")
### Create a connection
aurum_extract <- rAURUM::connect_database("C:\\Users\\mbrxsap3\\OneDrive - The University of Manchester\\CHARIOT\\data\\mydb.sqlite")
aurum_extract <- rAURUM::connect_database(tempfile("temp.sqlite"))
RSQLite::dbDisconnect(aurum_extract)
test <- RSQLite::dbConnect(RSQLite::SQLite(), "C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/data/mydb.sqlite")
### This example does not contain any real patient data.
### All patient data has been simulated but formatted to match the structure of CPRD Aurum data.*
### Start by clearing workspace and setting the working directory
rm(list=ls())
getwd()
### Install package
# devtools::install_github("alexpate30/rAURUM")
# install.packages("rAURUM") NOT YET ON CRAN
library(rAURUM)
### File location
system.file("aurum_data", package = "rAURUM")
### List files
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
### Look at each file type
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"), header = TRUE))
##################################
### Step 1: Creation of cohort ###
##################################
### Create cohort
pat <- rAURUM::extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
pat
### Apply inclusion/exclusion criteria that can be applied only through the patient file
pat <- subset(pat, patid %in% c(1,3,4,6))
pat
### First create a connection to an SQLite database
aurum_extract <- rAURUM::connect_database("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/data/mydb.sqlite")
### First create a connection to an SQLite database
aurum_extract <- rAURUM::connect_database("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rAURUM_worked_example/data/mydb.sqlite")
### Add individual observation files to SQLite database using `add_to_database`
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add individual drugissue files to SQLite database using `add_to_database`, these are added to a different table
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List the table
RSQLite::dbListTables(aurum_extract)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Create a connection
aurum_extract <- rAURUM::connect_database("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rAURUM_worked_example/data/mydb.sqlite")
system.file("aurum_data", package = "rAURUM")
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add data from drugissue files
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List tables
RSQLite::dbListTables(aurum_extract)
### Add an index date and censoring date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a history of type variable using `extract_ho`
ho <- rAURUM::extract_ho(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
### Define codelist
codelist <- "187341000000114"
ho
### Extract a history of type variable using `extract_ho`
ho <- rAURUM::extract_ho(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
ho
### Extract a time-to-event/survival variable using `extract_time_until`
time_until <- rAURUM::extract_time_until(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
time_until
### Extract most recent test results using `extract_test_recent`
test_data <- rAURUM::extract_test_recent(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.post = 0,
time.prev = Inf,
return.output = TRUE)
test_data
###################################
### Step 4: Merge into a cohort ###
###################################
### Recursive merge
analysis.ready.pat <- Reduce(function(df1, df2) merge(df1, df2, by = "patid", all.x = TRUE), list(pat[,c("patid", "gender", "yob")], ho, time_until, test_data))
analysis.ready.pat
### The `db_query` function will query the SQLite database for observations where the *medcodeid* or *prodcodeid* is in a specified codelist.
db.query <- rAURUM::db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
db.query
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Combine query with cohort creating a boolean variable denoting 'history of'
rAURUM::combine_query_boolean(cohort = pat,
db.query = db.query,
query.type = "observation")
### Combine query with cohort retaining most recent three records, query.type = "med"
rAURUM::combine_query(cohort = pat,
db.query = db.query,
query.type = "med",
numobs = 3)
### Extract a history of type variable using extract_ho, query.type = "test"
rAURUM::combine_query(cohort = pat,
db.query = db.query,
query.type = "test",
numobs = 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check(vignettes = FALSE, args = "--no-tests")
### Document
devtools::document()
### Check
devtools::check()
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Define codelist
codelist <- "187341000000114"
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
return.output = TRUE)
extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
numobs = Inf,
time.prev = Inf,
return.output = TRUE)
extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
numobs = Inf,
keep.numunit = TRUE,
time.prev = Inf,
return.output = TRUE)
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
### Document
devtools::document()
### Check
devtools::check()
### Check
devtools::check()
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check(vignettes = FALSE, args = "--no-tests")
###
### Install
###
devtools::install()
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
