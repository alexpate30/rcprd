}
}
### Stop if calib.type = "AJ" and assess.moderate = TRUE, or parametric confidence interval requested
if (calib.type == "AJ" & assess.moderate == TRUE){
stop("Cannot assess moderate calibration for calib.type = 'AJ'")
} else if (calib.type == "AJ" & CI != FALSE & CI.type == "parametric"){
stop("Cannot produce parametric confidence intervals for mean calibration assessd using calib.type = 'AJ'")
}
##########################################################
### Data preparation and further warnings/error checks ###
##########################################################
## If a vector of weights has been provided, add it to the dataset
if (!is.null(weights)){
### First check whether it is the correct length (NA's should be present)
if (length(weights) != nrow(data.raw)){
stop("Weights vector not same length as data.raw")
} else {
data.raw$ipcw <- weights
weights.provided <- TRUE
}
} else if (is.null(weights)){
weights.provided <- FALSE
}
### If custom function for estimating weights has been inputted ("w.function"),
### stop if it does not contain all the arguments from calc_weights
if (!is.null(w.function)){
### stop if w.function doesn't have correct arguments
if(!all(names(formals(calc_weights)) %in% names(formals(w.function)))){
stop("Arguments for w.function does not contain those from calibmsm::calc_weights")
}
# calc_weights <- w.function
# print(calc_weights)
}
### If tp.pred.plot is user specified, ensure it has correct number of columns
if (!is.null(tp.pred.plot)){
if (ncol(tp.pred.plot) != ncol(tp.pred)){
stop("Data pred plot must have same number of columns as tp.pred")
}
}
### Identify valid transitions
valid.transitions <- identify_valid_transitions(data.raw = data.raw, data.ms = data.ms, j = j, s = s, t = t)
?calibmsm
help(package = "calibmsm")
install.packages("changer")
available::available("rcprd")
getwd()
changer("../rAURUM", "rcprd")
changer::changer("../rAURUM", "rcprd")
devtools::install()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
## Create connection to a temporary database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
## Add observation data
add_to_database(filepath = system.file("aurum_data",
"aurum_allpatid_set1_extract_observation_001.txt", package = "rcprd"),
filetype = "observation", db = aurum_extract, overwrite = TRUE)
## Query database
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
devtools::document()
devtools::install()
R.Version()
### Document
devtools::document()
devtools::check_win_devel()
###
### Prior to release
###
usethis::use_release_issue()
gh_token_help()
devtools::gh_token_help()
usethis::gh_token_help()
gitcreds::gitcreds_set()
###
### Prior to release
###
usethis::use_release_issue()
### Follow checklist
usethis::use_cran_comments()
### Document
devtools::document()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check()
### Document
devtools::document()
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check()
test_check("rcprd")
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check()
R CMD CHECK
checkCRAN()
devtools::check_win_devel()
install.packages("devtools")
devtools::check()
install.packages("dplyr")
install.packages("fastmatch")
install.packages("RSQLite")
install.packages("data.table")
devtools::check()
devtools::check_win_devel()
devtools::check(remote = TRUE, manual = TRUE)
devtools::document()
devtools::check(remote = TRUE, manual = TRUE)
###
### Prior to release
###
# usethis::gh_token_help()
# gitcreds::gitcreds_set()
usethis::use_release_issue()
urlchecker::url_check()
###
### Install
###
devtools::install()
urlchecker::url_check()
usethis::use_github_links()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
### Submit to CRAN!
usethis::use_version('patch')
devtools::submit_cran()
install.packages("httr")
devtools::submit_cran()
### Document
devtools::document()
devtools::check(remote = TRUE, manual = TRUE)
devtools::submit_cran()
tempdir()
tempdir()
tempdir()
tempdir()
tempfile()
### Document
devtools::document()
###
### Install
###
devtools::install()
TMPDIR()
TMPDIR
devtools::load_all()
create_directory_system(tempdir())
file.exists(filepath(tempdir(),"data"))
file.exists(file.path(tempdir(),"data"))
file.exists(file.path(tempdir(),"code"))
file.exists(file.path(tempdir(),"codelists"))
delete_directory_system(tempdir())
file.exists(file.path(tempdir(),"data"))
file.exists(file.path(tempdir(),"code"))
file.exists(file.path(tempdir(),"codelists"))
devtools::load_all()
delete_directory_system(tempdir())
file.exists(file.path(tempdir(),"data"))
file.exists(file.path(tempdir(),"code"))
file.exists(file.path(tempdir(),"codelists"))
### Document
devtools::document()
###
### Install
###
devtools::install()
tempfile("temp.R")
test <- RSQLite::dbConnect(RSQLite::SQLite(), tempfile("temp.sqlite"))
tempfile("temp.sqlite")
tempfile("temp.sqlite")
inherits(test, "DBIConnection")
test
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
devtools::load_all()
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue")
RSQLite::dbDisConnect(test)
RSQLite::dbDisconnect(test)
test <- RSQLite::dbConnect(RSQLite::SQLite(), tempfile("temp.sqlite"))
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue")
RSQLite::dbDisconnect(test)
test <- RSQLite::dbConnect(RSQLite::SQLite(), tempfile("temp"))
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue")
RSQLite::dbDisconnect(test)
test <- RSQLite::dbConnect(RSQLite::SQLite(), tempfile("temp"))
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue")
pat<-extract_cohort(system.file("aurum_data", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
## Extract a history of type variable prior to index date
extract_ho(pat,
codelist_vector = "187341000000114",
indexdt = "fup_start",
db_open = test,
tab = "observation",
return_output = TRUE)
tempfile("temp")
tempfile("temp")
tempfile("temp")
tempdir()
tempdir()
tempdir()
tempdir()
file.path(tempdir(), "eggs.R")
file.path(tempdir(), "eggs.R")
file.path(tempdir(), "eggs.R")
file.path(tempdir(), "eggs.R")
file.path(tempdir(), "eggs.R")
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check()
### Document
devtools::document()
### Document
devtools::document()
###
### Install
###
devtools::install()
### Document
devtools::document()
### Document
devtools::document()
### Check
devtools::check()
devtools::check_win_devel()
devtools::check(remote = TRUE, manual = TRUE)
###
### Install
###
devtools::install()
?rcprd::combine_query_boolean
?rcprd::combine_query_boolean()
devtools::document()
###
### Install
###
devtools::install()
devtools::check_mac_release()
devtools::check_win_devel()
devtools::check_win_devel()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::submit_cran()
shiny::runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
rsconnect::deployApp("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
rsconnect::deployApp("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
rsconnect::deployApp("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
rsconnect::deployApp("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
### Setwd and load package
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd_TEST")
library(rcprd)
### Connect to db
mydb <- connect_database("data/mydb.sqlite")
### Run cprd extract
cprd_extract(db = mydb,
filepath = "aurum_data_raw",
filetype = "observation",
str_match = "MYTEST")
### List tables
RSQLite::dbListTables(mydb)
### Query
RSQLite::dbGetQuery(mydb, 'SELECT * FROM MYTEST', n = 3)
### Do a query to show it has worked
### Create codelist
codelist <- "187341000000114"
### Query for observations with this code
db_query(db_open = mydb,
tab ="MYTEST",
codelist_vector = codelist)
### I actually run into issue here - thanks for highlighting!
dbDisconnect(mydb)
### Connect to db
mydb <- connect_database("data/mydb.sqlite")
### Run cprd extract
cprd_extract(db = mydb,
filepath = "aurum_data_raw",
filetype = "observation")
### Run cprd extract
cprd_extract(db = mydb,
filepath = "aurum_data_raw",
filetype = "observation")
### List tables
RSQLite::dbListTables(mydb)
### Query
RSQLite::dbGetQuery(mydb, 'SELECT * FROM MYTEST', n = 3)
### Query
RSQLite::dbGetQuery(mydb, 'SELECT * FROM observation', n = 3)
### Create codelist
codelist <- "187341000000114"
### Query for observations with this code
db_query(db_open = mydb,
tab ="MYTEST",
codelist_vector = codelist)
?db_query
### Setwd and load package
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd")
library(rcprd)
### Connect to db
mydb <- connect_database("data/mydb.sqlite")
### I actually run into issue here - thanks for highlighting!
RSQLite::dbDisconnect(mydb)
### Setwd and load package
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd_TEST")
### Connect to db
mydb <- connect_database("data/mydb2.sqlite")
### Run cprd extract
cprd_extract(db = mydb,
filepath = "aurum_data_raw",
filetype = "observation")
### List tables
RSQLite::dbListTables(mydb)
### Query
RSQLite::dbGetQuery(mydb, 'SELECT * FROM observation', n = 3)
### Create codelist
codelist <- "187341000000114"
### Query for observations with this code
db_query(db_open = mydb,
tab ="MYTEST",
codelist_vector = codelist)
### Query for observations with this code
db_query(db_open = mydb,
tab ="observation",
codelist_vector = codelist)
### Setwd and load package
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd")
devtools::load_all()
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd")
devtools::load_all()
### Connect to db
mydb <- connect_database("data/mydb.sqlite")
### Setwd and load package
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd_TEST")
### Connect to db
mydb <- connect_database("data/mydb_new.sqlite")
### Run cprd extract
cprd_extract(db = mydb,
filepath = "aurum_data_raw",
filetype = "observation",
str_match = "MYTEST")
### List tables
RSQLite::dbListTables(mydb)
### Query
RSQLite::dbGetQuery(mydb, 'SELECT * FROM MYTEST', n = 3)
### Create codelist
codelist <- "187341000000114"
### Query for observations with this code
db_query(db_open = mydb,
tab ="observation",
table_name = "MYTEST"
codelist_vector = codelist)
### Query for observations with this code
db_query(db_open = mydb,
tab ="observation",
table_name = "MYTEST",
codelist_vector = codelist)
pat <- extract_cohort(filepath = "aurum_data_raw", patids = as.character(c(1,3,4,6)), set = TRUE)
### List tables
RSQLite::dbListTables(mydb)
### Extract a history of type variable using extract_ho
extract_ho(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = mydb,
tab = "observation",
return_output = TRUE)
devtools::load_all()
### Setwd and load package
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd")
devtools::load_all()
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd_TEST")
### Connect to db
### Extract a history of type variable using extract_ho
extract_ho(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = mydb,
tab = "observation",
return_output = TRUE)
str(pat)
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
extract_ho(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = mydb,
tab = "observation",
return_output = TRUE)
### Extract a history of type variable using extract_ho
extract_ho(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = mydb,
tab = "observation",
table_name = "MYTEST",
return_output = TRUE)
### I actually run into issue here - thanks for highlighting!
RSQLite::dbDisconnect(mydb)
### Connect to db
mydb <- connect_database("data/mydb_new2.sqlite")
### Run cprd extract
cprd_extract(db = mydb,
filepath = "aurum_data_raw",
filetype = "observation")
### List tables
RSQLite::dbListTables(mydb)
### Query
RSQLite::dbGetQuery(mydb, 'SELECT * FROM observation', n = 3)
### Create codelist
codelist <- "187341000000114"
### Query for observations with this code
db_query(db_open = mydb,
tab ="observation",
codelist_vector = codelist)
pat <- extract_cohort(filepath = "aurum_data_raw", patids = as.character(c(1,3,4,6)), set = TRUE)
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
extract_ho(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = mydb,
tab = "observation",
return_output = TRUE)
### I actually run into issue here - thanks for highlighting!
RSQLite::dbDisconnect(mydb)
### Setwd and load package
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd")
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
### Document
devtools::document()
