indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_df = my_codelist_df,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
test_data <- extract_test_data(cohort = pat,
codelist_vector = "51268016",
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
str(test_data)
### Extract test data using extract_test_data
test_data <- extract_test_data(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
str(test_data)
time_until <- extract_time_until(cohort = pat,
codelist_vector = "51268016",
indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
str(time_until)
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("187341000000114", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
my_codelist_df
extract_ho(cohort = pat,
codelist_df = my_codelist_df,
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_df = my_codelist_df,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
extract_test_data(cohort = pat,
codelist = "187341000000114",
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_vector = "187341000000114",
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("1899531000006117", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
extract_test_data(cohort = pat,
codelist_vector = "187341000000114",
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_df = my_codelist_df,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
extract_ho(cohort = pat,
codelist_vector = "1899531000006117",
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
View(pat)
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("221511000000115", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
extract_ho(cohort = pat,
codelist_vector = "1899531000006117",
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
extract_ho(cohort = pat,
codelist_vector = "221511000000115",
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_df = my_codelist_df,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
test <- db_query(db_open = aurum_extract, tab = "observation")
table(test$medcodeid)
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("114311000006111", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
extract_test_data(cohort = pat,
codelist_df = my_codelist_df,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_df = my_codelist_df,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE,
numobs = Inf)
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("221511000000115", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
extract_test_data(cohort = pat,
codelist_df = my_codelist_df,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE, numobs = 4)
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("221511000000115", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
extract_test_data(cohort = pat,
codelist_df = my_codelist_df,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE, numobs = 4)
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
db_query(db_open = aurum_extract,
tab ="observation",
codelist_df = my_codelist_df)
db_query(db_open = aurum_extract,
tab ="observation",
codelist_df = my_codelist_df)
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_vector = "187341000000114")
db_query
### Document
devtools::document()
### Check
devtools::check()
###
### Install
###
devtools::install()
### Install package
# devtools::install()
# #devtools::install_github("alexpate30/rcprd")
# #install.packages("rcprd") NOT YET ON CRAN
# library(rcprd)
devtools::load_all()
### Defining a cohort
list.files(system.file("aurum_data", package = "rcprd"), pattern = ".txt")
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rcprd"), patids = as.character(c(1,3,4,6)))
str(pat)
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rcprd"))
str(pat)
prac <- extract_practices(filepath = system.file("aurum_data", package = "rcprd"))
pat <- merge(pat, prac, by.x = "pracid", by.y = "pracid")
pat <- subset(pat, patid %in% c(1,3,4,6))
## Step 2: Reading in data and creating an SQLite database
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_002.txt", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_003.txt", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_002.txt", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_003.txt", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
RSQLite::dbListTables(aurum_extract)
RSQLite::dbDisconnect(aurum_extract)
### Extract data
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), use_set = FALSE)
### Query first three rows
db_query(db_open = aurum_extract, tab = "observation", n = 3)
### Extract data
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), use_set = FALSE)
### List tables
RSQLite::dbListTables(aurum_extract)
### Query first three rows
db_query(db_open = aurum_extract, tab = "drugissue", n = 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rcprd"), patids = as.character(c(1,3,4,6)), set = TRUE)
### Create connection to SQLite database
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Add observation files
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation",
subset_patids = pat,
use_set = TRUE)
### Add drugissue files
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue",
subset_patids = pat,
use_set = TRUE)
### Query first three rows of each table
db_query(db_open = aurum_extract, tab = "observation", n = 3)
db_query(db_open = aurum_extract, tab = "drugissue", n = 3)
### Define codelist
codelist <- "187341000000114"
### Add an index date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
ho <- extract_ho(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
str(ho)
### Add an censoring date to cohort
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
str(time_until)
### Extract test data using extract_test_data
test_data <- extract_test_data(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
str(test_data)
### Recursive merge
analysis.ready.pat <- Reduce(function(df1, df2) merge(df1, df2, by = "patid", all.x = TRUE), list(pat[,c("patid", "gender", "yob")], ho, time_until, test_data))
analysis.ready.pat
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("221511000000115", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
extract_test_data(cohort = pat,
codelist_df = subset(my_codelist_df, subgroup == "subgroup1"),
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_df = subset(my_codelist_df, subgroup == "subgroup2"),
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_vector = "187341000000114")
db_query
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_df = my_codelist_df)
db_query
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Combine query with cohort creating a boolean variable denoting 'history of'
combine.query.boolean <- combine_query_boolean(cohort = pat,
db_query = db_query,
query_type = "med")
combine.query.boolean
### Combine query with cohort retaining most recent three records
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "med",
numobs = 3,
reduce_output = TRUE)
combine.query
### Extract a history of type variable using extract_ho
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "test",
numobs = 3,
reduce_output = TRUE)
combine.query
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Hide clean up of filespaces prior to moving onto next session (clean up required by CRAN)
unlink(file.path(tempdir(), "temp.sqlite"))
## Save working directory location, so can revert at end of vignette (required by CRAN)
oldwd <- getwd()
## Set working directory
knitr::opts_knit$set(root.dir = tempdir())
suppressMessages(
create_directory_system()
)
file.exists(file.path(tempdir(), "data"))
file.exists(file.path(tempdir(), "codelists"))
## Open connection
aurum_extract <- connect_database("data/sql/mydb.sqlite")
## Add data to SQLite database using cprd_extract
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
## Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Define codelist
codelist <- data.frame(medcodeid = "187341000000114")
### Save codelist
write.csv(codelist, "codelists/analysis/mylist.csv")
extract_ho(cohort = pat,
codelist = "mylist",
indexdt = "fup_start",
db = "mydb",
tab = "observation",
return_output = FALSE,
out_save_disk = TRUE)
readRDS("data/extraction/var_ho.rds")
## Return root directory to how it was prior to example
knitr::opts_knit$set(root.dir = oldwd)
### Install package
# devtools::install()
# #devtools::install_github("alexpate30/rcprd")
# #install.packages("rcprd") NOT YET ON CRAN
# library(rcprd)
devtools::load_all()
### Defining a cohort
list.files(system.file("aurum_data", package = "rcprd"), pattern = ".txt")
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rcprd"), patids = as.character(c(1,3,4,6)))
str(pat)
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rcprd"))
str(pat)
prac <- extract_practices(filepath = system.file("aurum_data", package = "rcprd"))
pat <- merge(pat, prac, by.x = "pracid", by.y = "pracid")
pat <- subset(pat, patid %in% c(1,3,4,6))
## Step 2: Reading in data and creating an SQLite database
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_002.txt", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_003.txt", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_002.txt", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_003.txt", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
RSQLite::dbListTables(aurum_extract)
RSQLite::dbDisconnect(aurum_extract)
### Extract data
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), use_set = FALSE)
### Query first three rows
db_query(db_open = aurum_extract, tab = "observation", n = 3)
### Extract data
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), use_set = FALSE)
### List tables
RSQLite::dbListTables(aurum_extract)
### Query first three rows
db_query(db_open = aurum_extract, tab = "drugissue", n = 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rcprd"), patids = as.character(c(1,3,4,6)), set = TRUE)
### Create connection to SQLite database
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Add observation files
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation",
subset_patids = pat,
use_set = TRUE)
### Add drugissue files
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue",
subset_patids = pat,
use_set = TRUE)
### Query first three rows of each table
db_query(db_open = aurum_extract, tab = "observation", n = 3)
db_query(db_open = aurum_extract, tab = "drugissue", n = 3)
### Define codelist
codelist <- "187341000000114"
### Add an index date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
ho <- extract_ho(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
str(ho)
### Add an censoring date to cohort
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
str(time_until)
### Extract test data using extract_test_data
test_data <- extract_test_data(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
str(test_data)
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("221511000000115", "187341000000114"), "subgroup" = c("subgroup1", "subgroup2"))
extract_test_data(cohort = pat,
codelist_df = subset(my_codelist_df, subgroup == "subgroup1"),
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_df = subset(my_codelist_df, subgroup == "subgroup2"),
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_vector = "187341000000114")
db_query
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_df = my_codelist_df)
db_query
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Combine query with cohort creating a boolean variable denoting 'history of'
combine.query.boolean <- combine_query_boolean(cohort = pat,
db_query = db_query,
query_type = "med")
combine.query.boolean
### Combine query with cohort retaining most recent three records
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "med",
numobs = 3,
reduce_output = TRUE)
combine.query
### Extract a history of type variable using extract_ho
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "test",
numobs = 3,
reduce_output = TRUE)
combine.query
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("221511000000115", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_df = my_codelist_df)
db_query
### Extract a history of type variable using extract_ho
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "test",
numobs = 3,
reduce_output = TRUE)
combine.query
