testthat::expect_equal(ho.drug$ho, c(0, 0, 0, 0, 1, 0))
###
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist_vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
testthat::expect_equal(nrow(time_until), 6)
testthat::expect_equal(colnames(time_until), c("patid", "var_time", "var_indicator"))
testthat::expect_equal(time_until$var_time, c(106, 16436,  16436,  16436,  16436,  16436))
allmed <- db_query(db_open = aurum_extract, tab = "observation")
subset(allmed, medcodeid == 187341000000114)
extract_time_until(pat,
codelist_vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
cohort <- pat
varname_time = NULL
varname_indicator = NULL
codelist_vector = "187341000000114"
indexdt = "fup_start"
censdt = "fup_end"
db_open = aurum_extract
tab = "drugissue"
return_output = TRUE
db_filepath = NULL
out_save_disk = FALSE
out_filepath = NULL
out_subdir = NULL
t<- NULL
table_name = NULL
censdt_lag = 0
### Preparation
## Add index date variable to cohort and change indexdt based on t
cohort <- prep_cohort(cohort, indexdt, t, reduce = FALSE)
### Change name of censoring date variable to "censdt" so we can easily refer to it
colnames(cohort)[colnames(cohort) == censdt] <- "censdt"
## Reduce cohort to variables of interest
cohort <- cohort[,c("patid", "indexdt", "censdt")]
## Assign variable name if unspecified
if (is.null(varname_time)){
varname_time <- "var_time"
}
if (is.null(varname_indicator)){
varname_indicator <- "var_indicator"
}
## Change variable name based off time point specified for extraction
varname_time <- prep_varname(varname_time, t, t_varname)
varname_indicator <- prep_varname(varname_indicator, t, t_varname)
## Create named subdirectory if it doesn't exist
prep_subdir(out_subdir)
### Run a database query
db.qry <- db_query(codelist,
db_open = db_open,
db = db,
db_filepath = db_filepath,
tab = tab,
table_name = table_name,
codelist_vector = codelist_vector)
db.qry
codelist <- NULL
### Shall we create the practice file?
cohort <- pat
varname_time = NULL
varname_indicator = NULL
codelist_vector = "187341000000114"
indexdt = "fup_start"
censdt = "fup_end"
db_open = aurum_extract
tab = "drugissue"
return_output = TRUE
db_filepath = NULL
out_save_disk = FALSE
out_filepath = NULL
out_subdir = NULL
t<- NULL
table_name = NULL
censdt_lag = 0
codelist <- NULL
### Preparation
## Add index date variable to cohort and change indexdt based on t
cohort <- prep_cohort(cohort, indexdt, t, reduce = FALSE)
### Change name of censoring date variable to "censdt" so we can easily refer to it
colnames(cohort)[colnames(cohort) == censdt] <- "censdt"
## Reduce cohort to variables of interest
cohort <- cohort[,c("patid", "indexdt", "censdt")]
## Assign variable name if unspecified
if (is.null(varname_time)){
varname_time <- "var_time"
}
if (is.null(varname_indicator)){
varname_indicator <- "var_indicator"
}
## Change variable name based off time point specified for extraction
varname_time <- prep_varname(varname_time, t, t_varname)
varname_indicator <- prep_varname(varname_indicator, t, t_varname)
## Create named subdirectory if it doesn't exist
prep_subdir(out_subdir)
### Run a database query
db.qry <- db_query(codelist,
db_open = db_open,
db = db,
db_filepath = db_filepath,
tab = tab,
table_name = table_name,
codelist_vector = codelist_vector)
db.qry
aurum_extract
### Shall we create the practice file?
cohort <- pat
varname_time = NULL
varname_indicator = NULL
codelist_vector = "187341000000114"
indexdt = "fup_start"
censdt = "fup_end"
db_open = aurum_extract
tab = "drugissue"
return_output = TRUE
db_filepath = NULL
out_save_disk = FALSE
out_filepath = NULL
out_subdir = NULL
t<- NULL
table_name = NULL
censdt_lag = 0
codelist <- NULL
### Preparation
## Add index date variable to cohort and change indexdt based on t
cohort <- prep_cohort(cohort, indexdt, t, reduce = FALSE)
### Change name of censoring date variable to "censdt" so we can easily refer to it
colnames(cohort)[colnames(cohort) == censdt] <- "censdt"
## Reduce cohort to variables of interest
cohort <- cohort[,c("patid", "indexdt", "censdt")]
## Assign variable name if unspecified
if (is.null(varname_time)){
varname_time <- "var_time"
}
if (is.null(varname_indicator)){
varname_indicator <- "var_indicator"
}
## Change variable name based off time point specified for extraction
varname_time <- prep_varname(varname_time, t, t_varname)
varname_indicator <- prep_varname(varname_indicator, t, t_varname)
## Create named subdirectory if it doesn't exist
prep_subdir(out_subdir)
codelist
db_open
db
db_filepath
tab
tab = "observation"
### Run a database query
db.qry <- db_query(codelist,
db_open = db_open,
db = db,
db_filepath = db_filepath,
tab = tab,
table_name = table_name,
codelist_vector = codelist_vector)
db.qry
if (tab == "observation"){
query_type <- "med"
} else if (tab == "drugissue"){
query_type <- "drug"
}
## Combine query
## reduce_output = FALSE because we want access to censdt and
variable_dat <- combine_query(db_query = db.qry,
cohort = cohort,
query_type = query_type,
time_prev = 0,
time_post = Inf,
numobs = 1,
value_na_rm = FALSE,
earliest_values = TRUE,
reduce_output = FALSE)
variable_dat
### Calculate the time until event of interest, set to NA and remove if beyond censdt
test <-
dplyr::mutate(variable_dat,
var_time = dplyr::case_when(obsdate <= censdt + censdt_lag ~ as.numeric(pmin(obsdate, censdt) - indexdt),
obsdate > censdt + censdt_lag ~ NA),
var_indicator = dplyr::case_when(!is.na(var_time) ~ 1,
TRUE ~ NA)) |>
dplyr::filter(!is.na(var_time))
test
### Reduce to variables of interst
variable_dat <- variable_dat[,c("patid", "var_time", "var_indicator")]
### Merge back with cohort
variable_dat <- merge(dplyr::select(cohort, patid, indexdt, censdt), variable_dat, by.x = "patid", by.y = "patid", all.x = TRUE)
## Combine query
## reduce_output = FALSE because we want access to censdt and
variable_dat <- combine_query(db_query = db.qry,
cohort = cohort,
query_type = query_type,
time_prev = 0,
time_post = Inf,
numobs = 1,
value_na_rm = FALSE,
earliest_values = TRUE,
reduce_output = FALSE)
### Calculate the time until event of interest, set to NA and remove if beyond censdt
variable_dat <-
dplyr::mutate(variable_dat,
var_time = dplyr::case_when(obsdate <= censdt + censdt_lag ~ as.numeric(pmin(obsdate, censdt) - indexdt),
obsdate > censdt + censdt_lag ~ NA),
var_indicator = dplyr::case_when(!is.na(var_time) ~ 1,
TRUE ~ NA)) |>
dplyr::filter(!is.na(var_time))
variable_dat
### Reduce to variables of interst
variable_dat <- variable_dat[,c("patid", "var_time", "var_indicator")]
### Merge back with cohort
variable_dat <- merge(dplyr::select(cohort, patid, indexdt, censdt), variable_dat, by.x = "patid", by.y = "patid", all.x = TRUE)
variable_dat
### If the event has NA, set the time to censdt, and indicator to 0
variable_dat <- dplyr::mutate(variable_dat,
var_indicator = dplyr::case_when(!is.na(var_time) ~ var_indicator,
is.na(var_time) ~ 0),
var_time = dplyr::case_when(!is.na(var_time) ~ var_time,
is.na(var_time) ~ as.numeric(censdt - indexdt))
)
variable_dat
rm(list=ls())
devtools::load_all()
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Define codelist
codelist <- "187341000000114"
###
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
testthat::expect_equal(nrow(ho), 6)
testthat::expect_equal(colnames(ho), c("patid", "ho"))
testthat::expect_equal(ho$ho, c(0, 1, 0, 0, 0, 1))
###
### Extract a medication history of type variable using extract_ho
ho.drug <- extract_ho(pat,
codelist_vector = "1026541000033111",
indexdt = "fup_start",
db_open = aurum_extract,
tab = "drugissue",
return_output = TRUE)
testthat::expect_equal(nrow(ho.drug), 6)
testthat::expect_equal(colnames(ho.drug), c("patid", "ho"))
testthat::expect_equal(ho.drug$ho, c(0, 0, 0, 0, 1, 0))
###
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist_vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
time_until
testthat::expect_equal(nrow(time_until), 6)
testthat::expect_equal(colnames(time_until), c("patid", "var_time", "var_indicator"))
testthat::expect_equal(time_until$var_time, c(106, 16436,  16436,  16436,  16436,  16436))
testthat::expect_equal(time_until$var_indicator, c(1, 0,  0,  0,  0,  0))
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
###
### Extract most recent test result using extract_test_data
test_data <- extract_test_data(pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_prev = Inf,
return_output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value"))
testthat::expect_equal(test_data$value, c(48, NA,  NA,  NA,  18,  NA))
###
### Extract all test results using extract_test_data
test_data <- extract_test_data(pat,
codelist_vector = codelist,
indexdt = "fup_start",
time_post = Inf,
numobs = Inf,
keep_numunit = TRUE,
db_open = aurum_extract,
return_output = TRUE)
testthat::expect_equal(nrow(test_data), 10)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid", "medcodeid", "obsdate"))
testthat::expect_equal(test_data$value, c(48, 43, 36, 75, 41, NA, NA, 32, 18, NA))
###
### Extract standard deviation of all test results using extract_test_var
test_data <- extract_test_data_var(pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_prev = Inf,
time_post = Inf,
return_output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value_var"))
testthat::expect_equal(sum(is.na(test_data$value_var)), 3)
## clean up
RSQLite::dbDisconnect(aurum_extract)
unlink(file.path(tempdir(), "temp.sqlite"))
### Sset on.exit to restore working directory after tests are run
oldwd <- getwd()
on.exit(setwd(oldwd))
### set working directory to tempdir
tempdir <- tempdir()
setwd(tempdir)
### Create directory system
create_directory_system()
### Connect
aurum_extract <- connect_database("data/sql/temp.sqlite")
### Extract data using cprd_extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define codelist
codelist <- data.frame(medcodeid = "187341000000114")
write.csv(codelist, "codelists/analysis/mylist.med.csv")
codelist <- data.frame(prodcodeid = "3092241000033113")
write.csv(codelist, "codelists/analysis/mylist.drug.csv")
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/var_ho.rds")
testthat::expect_equal(ho, ho.disk)
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.drug",
indexdt = "fup_start",
db = "temp",
tab = "drugissue",
out_save_disk = TRUE)
### Read from disk
ho.disk.drug <- readRDS("data/extraction/var_ho.rds")
testthat::expect_equal(ho.drug, ho.disk.drug)
codelist <- data.frame(prodcodeid = "1026541000033111")
write.csv(codelist, "codelists/analysis/mylist.drug.csv")
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/var_ho.rds")
testthat::expect_equal(ho, ho.disk)
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.drug",
indexdt = "fup_start",
db = "temp",
tab = "drugissue",
out_save_disk = TRUE)
### Read from disk
ho.disk.drug <- readRDS("data/extraction/var_ho.rds")
testthat::expect_equal(ho.drug, ho.disk.drug)
### Extract a history of type variable and save to disk using out_subdir
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out_subdir = "cohort",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/cohort/var_ho.rds")
testthat::expect_equal(ho, ho.disk)
### Extract a history of type variable and save to disk manually specifying filepath for output and db
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db_filepath = "data/sql/temp.sqlite",
tab = "observation",
out_filepath = "data/extraction/eggs.rds",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/eggs.rds")
testthat::expect_equal(ho, ho.disk)
## clean up
RSQLite::dbDisconnect(aurum_extract)
delete_directory_system()
testthat::expect_false(file.exists("data/sql/temp.sqlite"))
testthat::expect_false(file.exists("data/extraction/eggs.rds"))
testthat::expect_false(file.exists("codelists/analysis/mylist.med.csv"))
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Extract diabetes
var <- extract_diabetes(cohort = pat,
codelist_type1_vector = 498521000006119,
codelist_type2_vector = 401539014,
indexdt = "indexdt",
db_open = aurum_extract)
var
allmed <- db_query(db_open = aurum_extract, tab = "observation")
subset(allmed, medcodeid == 498521000006119)
pat
View(allmed)
### Extract diabetes
var <- extract_diabetes(cohort = pat,
codelist_type1_vector = 498521000006119,
codelist_type2_vector = 1784724014,
indexdt = "indexdt",
db_open = aurum_extract)
var
var <- extract_diabetes(cohort = pat,
codelist_type1_vector = 498521000006119,
codelist_type2_vector = 1784724014,
indexdt = "indexdt",
db_open = aurum_extract)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "diabetes"))
testthat::expect_equal(as.character(var$diabetes), c("Absent", "Absent", "Absent", "Absent", "Type1", "Type2"))
## clean up
RSQLite::dbDisconnect(aurum_extract)
unlink(file.path(tempdir(), "temp.sqlite"))
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Extract smoking
var <- extract_smoking(cohort = pat,
codelist_non_vector = 498521000006119,
codelist_ex_vector = 401539014,
codelist_light_vector = 128011000000115,
codelist_mod_vector = 380389013,
codelist_heavy_vector = 13483031000006114,
indexdt = "indexdt",
db_open = aurum_extract)
var
## clean up
RSQLite::dbDisconnect(aurum_extract)
unlink(file.path(tempdir(), "temp.sqlite"))
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Extract impotence
var <- extract_impotence(cohort = pat,
codelist_med_vector = 498521000006119,
codelist_drug_vector = 3092241000033113,
indexdt = "indexdt",
db_open = aurum_extract)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "impotence"))
testthat::expect_equal(var$impotence, c(1, 0, 0, 0, 1, 0))
var
testthat::expect_equal(var$impotence, c(0, 0, 0, 0, 1, 0))
## clean up
RSQLite::dbDisconnect(aurum_extract)
unlink(file.path(tempdir(), "temp.sqlite"))
devtools::load_all()
getwd()
