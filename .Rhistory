pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Define codelist
codelist <- "187341000000114"
###
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
#       codelist = "edh_ra_medcodeid"
#       cohort = cohortA
#       indexdt = "fup_start"
#       t = NULL
#       db = "aurum_nosubset_randset"
#       db.filepath = NULL
#       out.save.disk = TRUE
#       out.filepath = NULL
#       out.subdir = NULL
#       return.output = TRUE
cohort <- pat
codelist
#       codelist = "edh_ra_medcodeid"
#       cohort = cohortA
#       indexdt = "fup_start"
#       t = NULL
#       db = "aurum_nosubset_randset"
#       db.filepath = NULL
#       out.save.disk = TRUE
#       out.filepath = NULL
#       out.subdir = NULL
#       return.output = TRUE
cohort <- pat
codelist.vector = codelist
indexdt = "fup_start"
db.open = aurum_extract
tab = "observation"
### Preparation
## Add index date variable to cohort and change indexdt based on t
cohort <- prep_cohort(cohort, indexdt, t)
t <- NULL
### Preparation
## Add index date variable to cohort and change indexdt based on t
cohort <- prep_cohort(cohort, indexdt, t)
db.qry <- db_query(codelist,
db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = tab,
codelist.vector)
c("test1", "test2")
match.arg(db.cprd)
db.cprd <- c("test1", "test2")
match.arg(db.cprd)
db_query
match.arg(db.cprd, several.ok = TRUE)
ff <- function(x = c("a", "b")) {
x <- match.arg(x)
}
ff <- function(x = c("a", "b")) {
x <- match.arg(x)
return(x)
}
ff()
ff <- function(db.cprd = c("test1", "test2")) {
db.cprd <- match.arg(db.cprd)
return(db.cprd)
}
ff()
## Create connection to a temporary database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
## Add observation data from all observation files in specified directory
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation")
## Query database for a specific medcode
db.query <- db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
db.query
class(db.query)
db.filepath
db = NULL
db.filepath = NULL
db.open
codelist
codelist.vector
#       codelist = "edh_ra_medcodeid"
#       cohort = cohortA
#       indexdt = "fup_start"
#       t = NULL
#       db = "aurum_nosubset_randset"
#       db.filepath = NULL
#       out.save.disk = TRUE
#       out.filepath = NULL
#       out.subdir = NULL
#       return.output = TRUE
cohort <- pat
codelist = NULL
codelist.vector = "187341000000114"
indexdt = "fup_start"
db.open = aurum_extract
db = NULL
db.filepath = NULL
tab = "observation"
t <- NULL
db_query(codelist,
db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = tab,
codelist.vector)
devtools::document()
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Define codelist
codelist <- "187341000000114"
###
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
#       codelist = "edh_ra_medcodeid"
#       cohort = cohortA
#       indexdt = "fup_start"
#       t = NULL
#       db = "aurum_nosubset_randset"
#       db.filepath = NULL
#       out.save.disk = TRUE
#       out.filepath = NULL
#       out.subdir = NULL
#       return.output = TRUE
cohort <- pat
codelist = NULL
codelist.vector = "187341000000114"
indexdt = "fup_start"
db.open = aurum_extract
db = NULL
db.filepath = NULL
tab = "observation"
t <- NULL
codelist
db.open
db
db.filepath
tab
codelist.vector
db_query(codelist,
db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = tab,
codelist.vector)
db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
tab
db_query(db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = tab,
codelist.vector)
db_query
db_query(db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = tab,
codelist.vector = "187341000000114")
devtools::document()
devtools::document()
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check(vignettes = FALSE)
devtools::document()
devtools::load_all()
## Create connection to a temporary database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
## Add observation data from all observation files in specified directory
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation")
## Query database for a specific medcode
db.query <- db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
db.query
pat<-extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat<-extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
combine_query_boolean(db.query,
pat,
query.type = "observation")
devtools::document()
devtools::load_all()
combine_query_boolean(db.query,
pat,
query.type = "observation")
devtools::document()
devtools::document()
devtools::load_all()
## Create connection to a temporary database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
## Add observation data from all observation files in specified directory
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation")
## Query database for a specific medcode
db.query <- db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
class(db.query)
## Define cohort
pat<-extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
class(db.query)
## Combine query with cohort creating a 'history of' boolean variable
combine_query_boolean(db.query,
pat,
query.type = "observation")
combine_query(db.query,
pat,
query.type = "observation")
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check(vignettes = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Extract BMI
var <- extract_bmi(cohort = pat,
codelist.bmi.vector = 498521000006119,
codelist.weight.vector = 401539014,
codelist.height.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
extract_bmi(cohort = pat,
codelist.bmi.vector = "498521000006119",
codelist.weight.vector = "401539014",
codelist.height.vector = "13483031000006114",
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
extract_smoking(cohort = pat,
codelist.non.vector = 498521000006119,
codelist.ex.vector = 401539014,
codelist.light.vector = 128011000000115,
codelist.mod.vector = 380389013,
codelist.heavy.vector = 13483031000006114,
indexdt = "indexdt",
db.open = aurum_extract)
varname = NULL
cohort
codelist.ratio.vector = 498521000006119
codelist.chol.vector = 401539014
codelist.hdl.vector = 13483031000006114
indexdt = "indexdt"
time.prev = Inf
time.post = Inf
db.open = aurum_extract
return.output = TRUE
t = 0
### Preparation
## Add index date variable to cohort and change indexdt based on t
cohort <- prep_cohort(cohort, indexdt, t)
cohort
db.qry.bmi <- db_query(codelist.bmi,
db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = "observation",
codelist.vector = codelist.bmi.vector)
devtools::document()
devtools::load_all()
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check(vignettes = FALSE)
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
cohort
t = 0
codelist.bmi.vector = 498521000006119
codelist.chol.vector = 401539014
codelist.hdl.vector = 13483031000006114
indexdt = "indexdt"
time.prev = Inf
time.post = Inf
db.open = aurum_extract
return.output = TRUE
### Preparation
## Add index date variable to cohort and change indexdt based on t
cohort <- prep_cohort(cohort, indexdt, t)
cohort
codelist.bmi.vector
codelist.bmi
db.qry.bmi <- db_query(codelist.bmi,
db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = "observation",
codelist.vector = codelist.bmi.vector)
db.qry.bmi
variable.dat.bmi <- combine_query(db.query = db.qry.bmi,
cohort = cohort,
query.type = "test",
time.prev = time.prev,
time.post = time.post,
lower.bound = lower.bound,
upper.bound = upper.bound)
lower.bound = 18
upper.bound = 47
time.prev = round(365.25*5)
time.post = 0
variable.dat.bmi <- combine_query(db.query = db.qry.bmi,
cohort = cohort,
query.type = "test",
time.prev = time.prev,
time.post = time.post,
lower.bound = lower.bound,
upper.bound = upper.bound)
variable.dat.bmi
db.qry.bmi
time.prev = Inf
time.post = Inf
variable.dat.bmi <- combine_query(db.query = db.qry.bmi,
cohort = cohort,
query.type = "test",
time.prev = time.prev,
time.post = time.post,
lower.bound = lower.bound,
upper.bound = upper.bound)
variable.dat.bmi
db.qry.height <- db_query(codelist.height,
db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = "observation",
codelist.vector = codelist.height.vector)
codelist.bmi.vector = 498521000006119
codelist.weight.vector = 401539014
codelist.height.vector = 13483031000006114
db.qry.height <- db_query(codelist.height,
db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = "observation",
codelist.vector = codelist.height.vector)
variable.dat.height <- combine_query(db.query = db.qry.height,
cohort = cohort,
query.type = "test",
time.prev = time.prev,
time.post = time.post)
variable.dat.height
db.qry.weight <- db_query(codelist.weight,
db.open = db.open,
db = db,
db.filepath = db.filepath,
tab = "observation",
codelist.vector = codelist.weight.vector)
variable.dat.weight <- combine_query(db.query = db.qry.weight,
cohort = cohort,
query.type = "test",
time.prev = time.prev,
time.post = time.post)
variable.dat.weight
db.qry.height <- dplyr::mutate(db.qry.height, value = dplyr::case_when(numunitid %in% c(173, 432, 3202) ~ value,
!(numunitid %in% c(173, 432, 3202)) ~ value/100))
db.qry.height
class(db.qry.height)
db.qry.height
str(db.qry.height)
class(db.qry.height)
class(db.qry.height) <- c( "data.table", "data.frame")
dplyr::mutate(db.qry.height, value = dplyr::case_when(numunitid %in% c(173, 432, 3202) ~ value,
!(numunitid %in% c(173, 432, 3202)) ~ value/100))
class(db.qry.height) <- c( "data.table", "data.frame", "aurum")
dplyr::mutate(db.qry.height, value = dplyr::case_when(numunitid %in% c(173, 432, 3202) ~ value,
!(numunitid %in% c(173, 432, 3202)) ~ value/100))
class(db.qry.height) <- c( "data.table", "data.frame")
dplyr::mutate(db.qry.height, value = dplyr::case_when(numunitid %in% c(173, 432, 3202) ~ value,
!(numunitid %in% c(173, 432, 3202)) ~ value/100))
dplyr::mutate(db.qry.height, value = dplyr::case_when(numunitid %in% c(173, 432, 3202) ~ value,
!(numunitid %in% c(173, 432, 3202)) ~ value/100))
class(db.qry.height) <- c( "data.table", "data.frame")
db.qry.height2 <- db.qry.height
class(db.qry.height2) <- c( "data.table", "data.frame", "aurum")
db.qry.height
db.qry.height2
str(db.qry.height)
str(db.qry.height2)
## Create df
df <- data.frame("value" = 1:10)
class(df)
## Add a class
class(df) <- append(class(df), "myclass")
## Apply mutate
dplyr::mutate(df, value_new = x^2)
## Create df
df <- data.frame("value" = 1:10)
class(df)
## Apply mutate
dplyr::mutate(df, value_new = x^2)
## Create df
df <- data.frame("value" = 1:10)
class(df)
## Apply mutate
dplyr::mutate(df, value_new = value^2)
## Create df
df <- data.frame("value" = 1:3)
class(df)
## Apply mutate
dplyr::mutate(df, value_new = value^2)
## Add a class
## Add a class
class(df) <- append(class(df), "myclass")
## Apply mutate
dplyr::mutate(df, value_new = value^2)
dplyr::filter(df, value < 2)
## Create df
df <- data.frame("value" = 1:3)
class(df)
## Apply mutate or filter
dplyr::mutate(df, value_new = value^2)
dplyr::filter(df, value < 2)
## Create df
df <- data.frame("value" = 1:3)
class(df)
## Apply mutate or filter
dplyr::mutate(df, value_new = value^2)
dplyr::filter(df, value < 3)
## Add a class
class(df) <- append(class(df), "myclass")
## Apply mutate or filter
dplyr::mutate(df, value_new = value^2)
dplyr::filter(df, value < 2)
class(df)
## Create df
df <- data.frame("value" = 1:3)
class(df)
## Add a class
class(df) <- append(class(df), "myclass")
class(df)
summary(df)
## Create df
df <- data.frame("value" = 1:3)
class(df)
## Apply mutate or filter
dplyr::mutate(df, value_new = value^2)
dplyr::filter(df, value < 3)
## Add a class
class(df) <- append("myclass", class(df))
class(df)
## Apply mutate or filter
dplyr::mutate(df, value_new = value^2)
dplyr::filter(df, value < 2)
devtools::document()
devtools::load_all()
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check(vignettes = FALSE)
devtools::document()
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check(vignettes = FALSE)
devtools::document()
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check(vignettes = FALSE)
devtools::document()
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check()
devtools::document()
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check()
devtools::document()
devtools::load_all()
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check()
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check()
devtools::document()
devtools::load_all()
