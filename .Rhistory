indexdt = "fup_start",
db_open = mydb,
tab = "observation",
table_name = "MYTEST",
return_output = TRUE)
### I actually run into issue here - thanks for highlighting!
RSQLite::dbDisconnect(mydb)
### Connect to db
mydb <- connect_database("data/mydb_new2.sqlite")
### Run cprd extract
cprd_extract(db = mydb,
filepath = "aurum_data_raw",
filetype = "observation")
### List tables
RSQLite::dbListTables(mydb)
### Query
RSQLite::dbGetQuery(mydb, 'SELECT * FROM observation', n = 3)
### Create codelist
codelist <- "187341000000114"
### Query for observations with this code
db_query(db_open = mydb,
tab ="observation",
codelist_vector = codelist)
pat <- extract_cohort(filepath = "aurum_data_raw", patids = as.character(c(1,3,4,6)), set = TRUE)
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
extract_ho(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = mydb,
tab = "observation",
return_output = TRUE)
### I actually run into issue here - thanks for highlighting!
RSQLite::dbDisconnect(mydb)
### Setwd and load package
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd")
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
### Document
devtools::document()
system.file("aurum_data", package = "rcprd")
test <- utils::read.table("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_patient_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character", "integer", "character", "integer", "integer", "integer",
"character", "character", "integer", "character", "integer", "character"))
test2 <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_patient_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character", "integer", "character", "integer", "integer", "integer",
"character", "character", "integer", "character", "integer", "character"))
str(test)
str(test2)
test2 <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_patient_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character", "integer", "character", "integer", "integer", "integer",
"character", "character", "integer", "character", "integer", "character")) |>
as.data.frame()
testthat::expect_equal(test, test2)
test <- utils::read.table("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_obsevation_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character","character","integer","character","character","character","character","character","character",
"numeric","integer","integer","numeric","numeric","character"))
test2 <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character","character","integer","character","character","character","character","character","character",
"numeric","integer","integer","numeric","numeric","character")) |>
as.data.frame()
test <- utils::read.table("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character","character","integer","character","character","character","character","character","character",
"numeric","integer","integer","numeric","numeric","character"))
test2 <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character","character","integer","character","character","character","character","character","character",
"numeric","integer","integer","numeric","numeric","character")) |>
as.data.frame()
testthat::expect_equal(test, test2)
###
### Tests for variable extraction programs
###
testthat::test_that("Test extract_ho, extract_time_until and extract_test_data, and specification of underlying directory systems", {
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Define codelist
codelist <- "187341000000114"
###
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
testthat::expect_equal(nrow(ho), 6)
testthat::expect_equal(colnames(ho), c("patid", "ho"))
testthat::expect_equal(ho$ho, c(0, 1, 0, 0, 0, 1))
###
### Extract a medication history of type variable using extract_ho
ho.drug <- extract_ho(pat,
codelist_vector = "3092241000033113",
indexdt = "fup_start",
db_open = aurum_extract,
tab = "drugissue",
return_output = TRUE)
testthat::expect_equal(nrow(ho.drug), 6)
testthat::expect_equal(colnames(ho.drug), c("patid", "ho"))
testthat::expect_equal(ho.drug$ho, c(1, 0, 0, 0, 0, 0))
###
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist_vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
testthat::expect_equal(nrow(time_until), 6)
testthat::expect_equal(colnames(time_until), c("patid", "var_time", "var_indicator"))
testthat::expect_equal(time_until$var_time, c(106, 16436,  16436,  16436,  16436,  16436))
testthat::expect_equal(time_until$var_indicator, c(1, 0,  0,  0,  0,  0))
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
###
### Extract most recent test result using extract_test_data
test_data <- extract_test_data(pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_prev = Inf,
return_output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value"))
testthat::expect_equal(test_data$value, c(48, NA,  NA,  NA,  18,  NA))
###
### Extract all test results using extract_test_data
test_data <- extract_test_data(pat,
codelist_vector = codelist,
indexdt = "fup_start",
time_post = Inf,
numobs = Inf,
keep_numunit = TRUE,
db_open = aurum_extract,
return_output = TRUE)
testthat::expect_equal(nrow(test_data), 10)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid", "medcodeid", "obsdate"))
testthat::expect_equal(test_data$value, c(48, 43, 36, 75, 41, NA, NA, 32, 18, NA))
###
### Extract standard deviation of all test results using extract_test_var
test_data <- extract_test_data_var(pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_prev = Inf,
time_post = Inf,
return_output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value_var"))
testthat::expect_equal(sum(is.na(test_data$value_var)), 3)
## clean up
RSQLite::dbDisconnect(aurum_extract)
unlink(file.path(tempdir(), "temp.sqlite"))
###
### Create a temporary directory to re-run these functions and save to disk automatically, and automatically look for SQLite database in data/sql
### Will recreate variables for ho and compare with ho created for previous test
###
### Sset on.exit to restore working directory after tests are run
oldwd <- getwd()
on.exit(setwd(oldwd))
### set working directory to tempdir
tempdir <- tempdir()
setwd(tempdir)
### Create directory system
create_directory_system()
### Create Aurum database in data/sql
### Connect
aurum_extract <- connect_database("data/sql/temp.sqlite")
### Extract data using cprd_extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define codelist
codelist <- data.frame(medcodeid = "187341000000114")
write.csv(codelist, "codelists/analysis/mylist.med.csv")
codelist <- data.frame(prodcodeid = "3092241000033113")
write.csv(codelist, "codelists/analysis/mylist.drug.csv")
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/var_ho.rds")
testthat::expect_equal(ho, ho.disk)
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.drug",
indexdt = "fup_start",
db = "temp",
tab = "drugissue",
out_save_disk = TRUE)
### Read from disk
ho.disk.drug <- readRDS("data/extraction/var_ho.rds")
testthat::expect_equal(ho.drug, ho.disk.drug)
### Extract a history of type variable and save to disk using out_subdir
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out_subdir = "cohort",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/cohort/var_ho.rds")
testthat::expect_equal(ho, ho.disk)
### Extract a history of type variable and save to disk manually specifying filepath for output and db
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db_filepath = "data/sql/temp.sqlite",
tab = "observation",
out_filepath = "data/extraction/eggs.rds",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/eggs.rds")
testthat::expect_equal(ho, ho.disk)
## clean up
RSQLite::dbDisconnect(aurum_extract)
delete_directory_system()
testthat::expect_false(file.exists("data/sql/temp.sqlite"))
testthat::expect_false(file.exists("data/extraction/eggs.rds"))
testthat::expect_false(file.exists("codelists/analysis/mylist.med.csv"))
})
devtools::load_all()
###
### Tests for variable extraction programs
###
testthat::test_that("Test extract_ho, extract_time_until and extract_test_data, and specification of underlying directory systems", {
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Define codelist
codelist <- "187341000000114"
###
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
testthat::expect_equal(nrow(ho), 6)
testthat::expect_equal(colnames(ho), c("patid", "ho"))
testthat::expect_equal(ho$ho, c(0, 1, 0, 0, 0, 1))
###
### Extract a medication history of type variable using extract_ho
ho.drug <- extract_ho(pat,
codelist_vector = "3092241000033113",
indexdt = "fup_start",
db_open = aurum_extract,
tab = "drugissue",
return_output = TRUE)
testthat::expect_equal(nrow(ho.drug), 6)
testthat::expect_equal(colnames(ho.drug), c("patid", "ho"))
testthat::expect_equal(ho.drug$ho, c(1, 0, 0, 0, 0, 0))
###
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist_vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
testthat::expect_equal(nrow(time_until), 6)
testthat::expect_equal(colnames(time_until), c("patid", "var_time", "var_indicator"))
testthat::expect_equal(time_until$var_time, c(106, 16436,  16436,  16436,  16436,  16436))
testthat::expect_equal(time_until$var_indicator, c(1, 0,  0,  0,  0,  0))
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
###
### Extract most recent test result using extract_test_data
test_data <- extract_test_data(pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_prev = Inf,
return_output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value"))
testthat::expect_equal(test_data$value, c(48, NA,  NA,  NA,  18,  NA))
###
### Extract all test results using extract_test_data
test_data <- extract_test_data(pat,
codelist_vector = codelist,
indexdt = "fup_start",
time_post = Inf,
numobs = Inf,
keep_numunit = TRUE,
db_open = aurum_extract,
return_output = TRUE)
testthat::expect_equal(nrow(test_data), 10)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid", "medcodeid", "obsdate"))
testthat::expect_equal(test_data$value, c(48, 43, 36, 75, 41, NA, NA, 32, 18, NA))
###
### Extract standard deviation of all test results using extract_test_var
test_data <- extract_test_data_var(pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_prev = Inf,
time_post = Inf,
return_output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value_var"))
testthat::expect_equal(sum(is.na(test_data$value_var)), 3)
## clean up
RSQLite::dbDisconnect(aurum_extract)
unlink(file.path(tempdir(), "temp.sqlite"))
###
### Create a temporary directory to re-run these functions and save to disk automatically, and automatically look for SQLite database in data/sql
### Will recreate variables for ho and compare with ho created for previous test
###
### Sset on.exit to restore working directory after tests are run
oldwd <- getwd()
on.exit(setwd(oldwd))
### set working directory to tempdir
tempdir <- tempdir()
setwd(tempdir)
### Create directory system
create_directory_system()
### Create Aurum database in data/sql
### Connect
aurum_extract <- connect_database("data/sql/temp.sqlite")
### Extract data using cprd_extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define codelist
codelist <- data.frame(medcodeid = "187341000000114")
write.csv(codelist, "codelists/analysis/mylist.med.csv")
codelist <- data.frame(prodcodeid = "3092241000033113")
write.csv(codelist, "codelists/analysis/mylist.drug.csv")
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/var_ho.rds")
testthat::expect_equal(ho, ho.disk)
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.drug",
indexdt = "fup_start",
db = "temp",
tab = "drugissue",
out_save_disk = TRUE)
### Read from disk
ho.disk.drug <- readRDS("data/extraction/var_ho.rds")
testthat::expect_equal(ho.drug, ho.disk.drug)
### Extract a history of type variable and save to disk using out_subdir
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out_subdir = "cohort",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/cohort/var_ho.rds")
testthat::expect_equal(ho, ho.disk)
### Extract a history of type variable and save to disk manually specifying filepath for output and db
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db_filepath = "data/sql/temp.sqlite",
tab = "observation",
out_filepath = "data/extraction/eggs.rds",
out_save_disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/eggs.rds")
testthat::expect_equal(ho, ho.disk)
## clean up
RSQLite::dbDisconnect(aurum_extract)
delete_directory_system()
testthat::expect_false(file.exists("data/sql/temp.sqlite"))
testthat::expect_false(file.exists("data/extraction/eggs.rds"))
testthat::expect_false(file.exists("codelists/analysis/mylist.med.csv"))
})
test <- extract_txt_drug("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt")
test <- extract_txt("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt")
View(test)
View(test)
rcprd:::extract_txt_drug
library(rcprd)
rcprd:::extract_txt_drug
test <- utils::read.table("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character","character","integer","character","character","character","character","character","character",
"character","numeric","integer","integer","numeric"))
test2 <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character","character","integer","character","character","character","character","character","character",
"character","numeric","integer","integer","numeric")) |>
as.data.frame()
str(test)
temp <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character""))
temp <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character"))
write.table(temp,
"C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/TEST.txt",
row.names = FALSE,
quote = FALSE,
sep = "\t")
write.table(temp,
"C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd/inst/aurum_data/TEST.txt",
row.names = FALSE,
quote = FALSE,
sep = "\t")
temp2 <- data.table::fread("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd/inst/aurum_data/TEST.txt",
sep = "\t",
header = TRUE,
colClasses = c("character"))
testthat::expect_equal(temp, temp2)
temp <- temp[1:14, ]
View(temp)
temp <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt",
sep = "\t",
header = TRUE,
colClasses = c("character"))
temp <- temp[, 1:14]
View(temp)
View(temp)
write.table(temp,
"C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd/inst/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt",
row.names = FALSE,
quote = FALSE,
sep = "\t")
temp <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_002.txt",
sep = "\t",
header = TRUE,
colClasses = c("character"))
temp <- temp[, 1:14]
write.table(temp,
"C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd/inst/aurum_data/aurum_allpatid_set1_extract_drugissue_002.txt",
row.names = FALSE,
quote = FALSE,
sep = "\t")
temp <- data.table::fread("C:/Program Files/R/R-4.4.1/library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_003.txt",
sep = "\t",
header = TRUE,
colClasses = c("character"))
temp <- temp[, 1:14]
write.table(temp,
"C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rcprd/inst/aurum_data/aurum_allpatid_set1_extract_drugissue_003.txt",
row.names = FALSE,
quote = FALSE,
sep = "\t")
