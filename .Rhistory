str(test_data)
### Recursive merge
analysis.ready.pat <- Reduce(function(df1, df2) merge(df1, df2, by = "patid", all.x = TRUE), list(pat[,c("patid", "gender", "yob")], ho, time_until, test_data))
analysis.ready.pat
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("221511000000115", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
extract_test_data(cohort = pat,
codelist_df = subset(my_codelist_df, subgroup == "subgroup1"),
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_df = subset(my_codelist_df, subgroup == "subgroup2"),
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_vector = "187341000000114")
db_query
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_df = my_codelist_df)
db_query
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Combine query with cohort creating a boolean variable denoting 'history of'
combine.query.boolean <- combine_query_boolean(cohort = pat,
db_query = db_query,
query_type = "med")
combine.query.boolean
### Combine query with cohort retaining most recent three records
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "med",
numobs = 3,
reduce_output = TRUE)
combine.query
### Extract a history of type variable using extract_ho
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "test",
numobs = 3,
reduce_output = TRUE)
combine.query
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Hide clean up of filespaces prior to moving onto next session (clean up required by CRAN)
unlink(file.path(tempdir(), "temp.sqlite"))
## Save working directory location, so can revert at end of vignette (required by CRAN)
oldwd <- getwd()
## Set working directory
knitr::opts_knit$set(root.dir = tempdir())
suppressMessages(
create_directory_system()
)
file.exists(file.path(tempdir(), "data"))
file.exists(file.path(tempdir(), "codelists"))
## Open connection
aurum_extract <- connect_database("data/sql/mydb.sqlite")
## Add data to SQLite database using cprd_extract
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
## Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Define codelist
codelist <- data.frame(medcodeid = "187341000000114")
### Save codelist
write.csv(codelist, "codelists/analysis/mylist.csv")
extract_ho(cohort = pat,
codelist = "mylist",
indexdt = "fup_start",
db = "mydb",
tab = "observation",
return_output = FALSE,
out_save_disk = TRUE)
readRDS("data/extraction/var_ho.rds")
## Return root directory to how it was prior to example
knitr::opts_knit$set(root.dir = oldwd)
### Install package
# devtools::install()
# #devtools::install_github("alexpate30/rcprd")
# #install.packages("rcprd") NOT YET ON CRAN
# library(rcprd)
devtools::load_all()
### Defining a cohort
list.files(system.file("aurum_data", package = "rcprd"), pattern = ".txt")
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rcprd"), patids = as.character(c(1,3,4,6)))
str(pat)
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rcprd"))
str(pat)
prac <- extract_practices(filepath = system.file("aurum_data", package = "rcprd"))
pat <- merge(pat, prac, by.x = "pracid", by.y = "pracid")
pat <- subset(pat, patid %in% c(1,3,4,6))
## Step 2: Reading in data and creating an SQLite database
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_002.txt", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_003.txt", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_002.txt", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_003.txt", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
RSQLite::dbListTables(aurum_extract)
RSQLite::dbDisconnect(aurum_extract)
### Extract data
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", subset_patids = c(1,3,4,6), use_set = FALSE)
### Query first three rows
db_query(db_open = aurum_extract, tab = "observation", n = 3)
### Extract data
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", subset_patids = c(1,3,4,6), use_set = FALSE)
### List tables
RSQLite::dbListTables(aurum_extract)
### Query first three rows
db_query(db_open = aurum_extract, tab = "drugissue", n = 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
pat <- extract_cohort(filepath = system.file("aurum_data", package = "rcprd"), patids = as.character(c(1,3,4,6)), set = TRUE)
### Create connection to SQLite database
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Add observation files
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation",
subset_patids = pat,
use_set = TRUE)
### Add drugissue files
cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue",
subset_patids = pat,
use_set = TRUE)
### Query first three rows of each table
db_query(db_open = aurum_extract, tab = "observation", n = 3)
db_query(db_open = aurum_extract, tab = "drugissue", n = 3)
### Define codelist
codelist <- "187341000000114"
### Add an index date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
ho <- extract_ho(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
str(ho)
### Add an censoring date to cohort
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db_open = aurum_extract,
tab = "observation",
return_output = TRUE)
str(time_until)
### Extract test data using extract_test_data
test_data <- extract_test_data(cohort = pat,
codelist_vector = codelist,
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
str(test_data)
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("221511000000115", "187341000000114"), "subgroup" = c("subgroup1", "subgroup2"))
extract_test_data(cohort = pat,
codelist_df = subset(my_codelist_df, subgroup == "subgroup1"),
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
extract_test_data(cohort = pat,
codelist_df = subset(my_codelist_df, subgroup == "subgroup2"),
indexdt = "fup_start",
db_open = aurum_extract,
time_post = 0,
time_prev = Inf,
return_output = TRUE)
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_vector = "187341000000114")
db_query
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_df = my_codelist_df)
db_query
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Combine query with cohort creating a boolean variable denoting 'history of'
combine.query.boolean <- combine_query_boolean(cohort = pat,
db_query = db_query,
query_type = "med")
combine.query.boolean
### Combine query with cohort retaining most recent three records
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "med",
numobs = 3,
reduce_output = TRUE)
combine.query
### Extract a history of type variable using extract_ho
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "test",
numobs = 3,
reduce_output = TRUE)
combine.query
### Define codelist using codelist_df
my_codelist_df <- data.frame("condition" = "mycondition", medcodeid = c("221511000000115", "51268016"), "subgroup" = c("subgroup1", "subgroup2"))
### Functions for custom variable extraction
db_query <- db_query(db_open = aurum_extract,
tab ="observation",
codelist_df = my_codelist_df)
db_query
### Extract a history of type variable using extract_ho
combine.query <- combine_query(cohort = pat,
db_query = db_query,
query_type = "test",
numobs = 3,
reduce_output = TRUE)
combine.query
a <- 1
###
### Smoking
testthat::test_that("Smoking", {
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Extract smoking
var <- extract_smoking(cohort = pat,
codelist_non_vector = 498521000006119,
codelist_ex_vector = 401539014,
codelist_light_vector = 128011000000115,
codelist_mod_vector = 380389013,
codelist_heavy_vector = 13483031000006114,
indexdt = "indexdt",
db_open = aurum_extract)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "smoking"))
testthat::expect_equal(as.character(var$smoking), c(NA, "Non-smoker", NA, "Moderate", "Ex-smoker", "Moderate"))
## clean up
RSQLite::dbDisconnect(aurum_extract)
unlink(file.path(tempdir(), "temp.sqlite"))
})
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
devtools::load_all()
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
devtools::load_all()
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Extract smoking
var <- extract_smoking(cohort = pat,
codelist_non_vector = 498521000006119,
codelist_ex_vector = 401539014,
codelist_light_vector = 128011000000115,
codelist_mod_vector = 380389013,
codelist_heavy_vector = 13483031000006114,
indexdt = "indexdt",
db_open = aurum_extract)
devtools::load_all()
### Extract smoking
var <- extract_smoking(cohort = pat,
codelist_non_vector = 498521000006119,
codelist_ex_vector = 401539014,
codelist_light_vector = 128011000000115,
codelist_mod_vector = 380389013,
codelist_heavy_vector = 13483031000006114,
indexdt = "indexdt",
db_open = aurum_extract)
var
pat
varname = NULL
codelist_non = NULL
codelist_ex = NULL
codelist_light = NULL
codelist_mod = NULL
codelist_heavy = NULL
codelist_non_df = NULL
codelist_ex_df = NULL
codelist_light_df = NULL
codelist_mod_df = NULL
codelist_heavy_df = NULL
codelist_non_vector = 498521000006119
codelist_ex_vector = 401539014
codelist_light_vector = 128011000000115
codelist_mod_vector = 380389013
codelist_heavy_vector = 13483031000006114
cohort = pat
indexdt = "fup_start"
t = NULL
db_open = aurum_extract
db = NULL
db_filepath = NULL
out_save_disk = FALSE
out_filepath = NULL
out_subdir = NULL
return_output = TRUE
### Preparation
## Add index date variable to cohort and change indexdt based on t
cohort <- prep_cohort(cohort, indexdt, t)
## Assign variable name if unspecified
if (is.null(varname)){
varname <- "smoking"
}
## Change variable name based off time point specified for extraction
varname <- prep_varname(varname, t, t_varname)
## Create named subdirectory if it doesn't exist
prep_subdir(out_subdir)
### Run a database query for type 1 and type 2
db.qry.non <- db_query(codelist_non,
db_open = db_open,
db = db,
db_filepath = db_filepath,
tab = "observation",
table_name = table_name,
codelist_vector = codelist_non_vector,
codelist_df = codelist_non_df)
table_name = NULL
### Run a database query for type 1 and type 2
db.qry.non <- db_query(codelist_non,
db_open = db_open,
db = db,
db_filepath = db_filepath,
tab = "observation",
table_name = table_name,
codelist_vector = codelist_non_vector,
codelist_df = codelist_non_df)
db.qry.non
### Combine queries with cohort, retaining all smoking records prior to the index date
### We treat this as test data, because smoking status may be identified through number of cigarettes smoked per day
### We specify value_na_rm = FALSE, as we want to keep the NA values, because smoking status can also be identified through
### the medcodeid itself.
smoking.non <- combine_query(db_query = db.qry.non,
cohort= cohort,
query_type = "test",
time_post = 0,
numobs = Inf,
value_na_rm = FALSE)
smoking.non
db.qry.non
pat
var
### Lets just try and create a SQLite database and extract some data using the functions
rm(list=ls())
###
### Smoking
testthat::test_that("Smoking", {
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Extract smoking
var <- extract_smoking(cohort = pat,
codelist_non_vector = 498521000006119,
codelist_ex_vector = 401539014,
codelist_light_vector = 128011000000115,
codelist_mod_vector = 380389013,
codelist_heavy_vector = 13483031000006114,
indexdt = "indexdt",
db_open = aurum_extract)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "smoking"))
testthat::expect_equal(as.character(var$smoking), c(NA, NA, NA, "Moderate", "Ex-smoker", "Moderate"))
## clean up
RSQLite::dbDisconnect(aurum_extract)
unlink(file.path(tempdir(), "temp.sqlite"))
})
###
### Smoking
testthat::test_that("Smoking", {
### Connect
aurum_extract <- connect_database(file.path(tempdir(), "temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation", use_set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue", use_set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Extract smoking
var <- extract_smoking(cohort = pat,
codelist_non_vector = 498521000006119,
codelist_ex_vector = 401539014,
codelist_light_vector = 128011000000115,
codelist_mod_vector = 380389013,
codelist_heavy_vector = 13483031000006114,
indexdt = "indexdt",
db_open = aurum_extract)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "smoking"))
testthat::expect_equal(as.character(var$smoking), c(NA, NA, NA, "Heavy", "Ex-smoker", "Moderate"))
## clean up
RSQLite::dbDisconnect(aurum_extract)
unlink(file.path(tempdir(), "temp.sqlite"))
})
0.8^(1/10)
rr.sbp <- 0.8^(1/10)
log(0.74)/log(rr.sbp)
log(0.74)/log(0.974)
rr.sbp^5.1
exp(0.1*5.1*log(0.83))
0.8^(1/10)
rr.sbp <- 0.83^(1/10)
rr.sbp^5.1
rr.sbp <- 0.73^(1/10)
rr.sbp^5.1
shiny::runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT - UOM-FBMH-SHS-Predictive-Healthcare-Analytics-Group - CHARIOT/Project 2 - cf model/prototype 3/rshiny_CHARIOT_prototype3')
shiny::runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT - UOM-FBMH-SHS-Predictive-Healthcare-Analytics-Group - CHARIOT/Project 2 - cf model/prototype 3/rshiny_CHARIOT_prototype3')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT - UOM-FBMH-SHS-Predictive-Healthcare-Analytics-Group - CHARIOT/Project 2 - cf model/prototype 3/rshiny_CHARIOT_prototype3')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT - UOM-FBMH-SHS-Predictive-Healthcare-Analytics-Group - CHARIOT/Project 2 - cf model/prototype 3/rshiny_CHARIOT_prototype3')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT - UOM-FBMH-SHS-Predictive-Healthcare-Analytics-Group - CHARIOT/Project 2 - cf model/prototype 3/rshiny_CHARIOT_prototype3')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT - UOM-FBMH-SHS-Predictive-Healthcare-Analytics-Group - CHARIOT/Project 2 - cf model/prototype 3/rshiny_CHARIOT_prototype3')
rsconnect::deployApp("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT - UOM-FBMH-SHS-Predictive-Healthcare-Analytics-Group - CHARIOT/Project 2 - cf model/prototype 3/rshiny_CHARIOT_prototype3")
df <- data.table::as.data.table(survival::lung)
colnames(lung)
colnames(df)
str(lung)
str(df)
df_sub <- df[sex == 1]
usethis::use_package("data.table")
### Document
devtools::document()
### Misc paper says we expect a reduction of 5.1 (placebo vs control), or 11.1 (intense vs less intense)
rr.cvd.10sbp^(5.1/10)
### Risk reduction for reduction of SBP (from Ettehad study)
rr.cvd.10sbp <- 0.8
rr.chd.10sbp <- 0.83
rr.stroke.10sbp <- 0.73
### Risk reduction for reduction of SBP (from Ettehad study)
rr.cvd.10sbp <- 0.8
rr.chd.10sbp <- 0.83
rr.stroke.10sbp <- 0.73
### Karmali/Law paper states expected reduction when taking antihypertensives is 0.84 (CHD) and 0.64 (stroke)
### Misc paper says we expect a reduction of 5.1 (placebo vs control), or 11.1 (intense vs less intense). So we calculate according to our DAG
rr.chd.10sbp^(5.1/10)
rr.stroke.10sbp^(5.1/10)
rr.chd.10sbp^(11.1/10)
rr.stroke.10sbp^(11.1/10)
### Check
devtools::check()
1/1.230889
1/1.026557
1/1.023689
### Submit to CRAN!
usethis::use_version('patch')
### Submit to CRAN!
usethis::use_version('patch')
devtools::submit_cran()
devtools::submit_cran()
devtools::document()
