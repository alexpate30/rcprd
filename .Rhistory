### Add individual observation files to SQLite database using `add_to_database`
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add individual drugissue files to SQLite database using `add_to_database`, these are added to a different table
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List the table
RSQLite::dbListTables(aurum_extract)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Create a connection
aurum_extract <- rAURUM::connect_database("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rAURUM_worked_example/data/mydb.sqlite")
system.file("aurum_data", package = "rAURUM")
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add data from drugissue files
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List tables
RSQLite::dbListTables(aurum_extract)
### Add an index date and censoring date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a history of type variable using `extract_ho`
ho <- rAURUM::extract_ho(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
### Define codelist
codelist <- "187341000000114"
ho
### Extract a history of type variable using `extract_ho`
ho <- rAURUM::extract_ho(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
ho
### Extract a time-to-event/survival variable using `extract_time_until`
time_until <- rAURUM::extract_time_until(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
time_until
### Extract most recent test results using `extract_test_recent`
test_data <- rAURUM::extract_test_recent(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.post = 0,
time.prev = Inf,
return.output = TRUE)
test_data
###################################
### Step 4: Merge into a cohort ###
###################################
### Recursive merge
analysis.ready.pat <- Reduce(function(df1, df2) merge(df1, df2, by = "patid", all.x = TRUE), list(pat[,c("patid", "gender", "yob")], ho, time_until, test_data))
analysis.ready.pat
### The `db_query` function will query the SQLite database for observations where the *medcodeid* or *prodcodeid* is in a specified codelist.
db.query <- rAURUM::db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
db.query
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Combine query with cohort creating a boolean variable denoting 'history of'
rAURUM::combine_query_boolean(cohort = pat,
db.query = db.query,
query.type = "observation")
### Combine query with cohort retaining most recent three records, query.type = "med"
rAURUM::combine_query(cohort = pat,
db.query = db.query,
query.type = "med",
numobs = 3)
### Extract a history of type variable using extract_ho, query.type = "test"
rAURUM::combine_query(cohort = pat,
db.query = db.query,
query.type = "test",
numobs = 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check(vignettes = FALSE, args = "--no-tests")
### Document
devtools::document()
### Check
devtools::check()
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Define codelist
codelist <- "187341000000114"
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
return.output = TRUE)
extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
numobs = Inf,
time.prev = Inf,
return.output = TRUE)
extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
numobs = Inf,
keep.numunit = TRUE,
time.prev = Inf,
return.output = TRUE)
###
### Run tests
###
devtools::test()
###
### Run tests
###
devtools::test()
### Document
devtools::document()
### Check
devtools::check()
### Check
devtools::check()
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check(vignettes = FALSE, args = "--no-tests")
###
### Install
###
devtools::install()
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Start by clearing workspace and setting the working directory
rm(list=ls())
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/Presentations/CPRD user group/rAURUM_worked_example/")
###
### Install
###
devtools::install()
devtools::install()
### Start by clearing workspace and setting the working directory
rm(list=ls())
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/Presentations/CPRD user group/rAURUM_worked_example/")
### Install package
# devtools::install_github("alexpate30/rAURUM")
# install.packages("rAURUM") NOT YET ON CRAN
library(rAURUM)
### File location
system.file("aurum_data", package = "rAURUM")
### List files
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
### Look at each file type
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"), header = TRUE))
### Create cohort
pat <- rAURUM::extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
pat
### Apply inclusion/exclusion criteria that can be applied only through the patient file
pat <- subset(pat, patid %in% c(1,3,4,6))
pat
### First create a connection to an SQLite database
getwd()
aurum_extract <- rAURUM::connect_database("data/mydb.sqlite")
### Add individual observation files to SQLite database using `add_to_database`
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_002.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_003.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add individual drugissue files to SQLite database using `add_to_database`, these are added to a different table
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_002.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_003.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List the tables
RSQLite::dbListTables(aurum_extract)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Create a connection
aurum_extract <- rAURUM::connect_database("data/mydb.sqlite")
### Add data from observation files
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add data from drugissue files
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List tables
RSQLite::dbListTables(aurum_extract)
### Define codelist
codelist <- "187341000000114"
### Add an index date and censoring date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a history of type variable using `extract_ho`
ho <- rAURUM::extract_ho(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
ho
### Extract a time-to-event/survival variable using `extract_time_until`
time_until <- rAURUM::extract_time_until(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
time_until
### Extract most recent test results using `extract_test_data`
test_data <- rAURUM::extract_test_data(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.post = 0,
time.prev = Inf,
return.output = TRUE)
test_data
### Extract most recent test results using `extract_test_data`
rAURUM::extract_test_data(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
numobs = Inf,
keep.numunit = TRUE,
db.open = aurum_extract,
time.post = 0,
time.prev = Inf,
return.output = TRUE)
### Recursive merge
analysis.ready.pat <- Reduce(function(df1, df2) merge(df1, df2, by = "patid", all.x = TRUE), list(pat[,c("patid", "gender", "yob")], ho, time_until, test_data))
analysis.ready.pat
### The `db_query` function will query the SQLite database for observations where the *medcodeid* or *prodcodeid* is in a specified codelist.
db.query <- rAURUM::db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Start by clearing workspace and setting the working directory
rm(list=ls())
### Start by clearing workspace and setting the working directory
rm(list=ls())
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/Presentations/CPRD user group/rAURUM_worked_example/")
system.file("aurum_data", package = "rAURUM")
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
### Look at each file type
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"), header = TRUE))
### Create cohort
pat <- rAURUM::extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
pat
### Apply inclusion/exclusion criteria that can be applied only through the patient file
pat <- subset(pat, patid %in% c(1,3,4,6))
pat
### First create a connection to an SQLite database
getwd()
aurum_extract <- rAURUM::connect_database("data/mydb.sqlite")
system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM")
### Add individual observation files to SQLite database using `add_to_database`
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_002.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_003.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add individual drugissue files to SQLite database using `add_to_database`, these are added to a different table
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_002.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_003.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List the tables
RSQLite::dbListTables(aurum_extract)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Create a connection
aurum_extract <- rAURUM::connect_database("data/mydb.sqlite")
### Add data from observation files
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List tables
RSQLite::dbListTables(aurum_extract)
### Define codelist
codelist <- "187341000000114"
### Add an index date and censoring date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
pat
codelist
ho <- rAURUM::extract_ho(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
ho
time_until <- rAURUM::extract_time_until(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
time_until
test_data <- rAURUM::extract_test_data(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.post = 0,
time.prev = Inf,
return.output = TRUE)
test_data
rAURUM::extract_test_data(cohort = pat,
codelist.vector = codelist,
indexdt = "fup_start",
numobs = Inf,
keep.numunit = TRUE,
db.open = aurum_extract,
time.post = 0,
time.prev = Inf,
return.output = TRUE)
### Recursive merge
analysis.ready.pat <- Reduce(function(df1, df2) merge(df1, df2, by = "patid", all.x = TRUE), list(pat[,c("patid", "gender", "yob")], ho, time_until, test_data))
analysis.ready.pat
### Start by clearing workspace and setting the working directory
rm(list=ls())
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/Presentations/CPRD user group/rAURUM_worked_example/")
### Install package
# devtools::install_github("alexpate30/rAURUM")
# install.packages("rAURUM") NOT YET ON CRAN
library(rAURUM)
### File location
system.file("aurum_data", package = "rAURUM")
### List files
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
### THESE FILES ARE SIMULATED FAKE DATA
### Look at each file type
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"), header = TRUE))
head(data.table::fread(system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"), header = TRUE))
##################################
### Step 1: Creation of cohort ###
##################################
### Create cohort
pat <- rAURUM::extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
pat
### Apply inclusion/exclusion criteria that can be applied only through the patient file
pat <- subset(pat, patid %in% c(1,3,4,6))
pat
###############################################################
### Step 2: Reading in data and creating an SQLite database ###
###############################################################
### First create a connection to an SQLite database
getwd()
aurum_extract <- rAURUM::connect_database("data/mydb.sqlite")
### Add individual observation files to SQLite database using `add_to_database`
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_002.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_003.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add individual drugissue files to SQLite database using `add_to_database`, these are added to a different table
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_002.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
rAURUM::add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_003.txt", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
### We can view this database by using functions from the RSQLite package
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List the tables
RSQLite::dbListTables(aurum_extract)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Add all relevant files to SQLite database using `cprd_extract`
### In practice, there will be a high number of files to add to the SQLite database and adding each one using `add_to_database` would be cumbersome.
### We now repeat the extraction but using the `cprd_extract` function, which is a wrapper for `add_to_database`, and will add all the files in a
### specified directory that contain a string matching the specified file type.
### Create a connection
aurum_extract <- rAURUM::connect_database("data/mydb.sqlite")
### Add data from observation files
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
### Add data from drugissue files
rAURUM::cprd_extract(db = aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue",
subset.patids = c(1,3,4,6))
### Query first three rows
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### List tables
RSQLite::dbListTables(aurum_extract)
### Other notes
### - Using appropriate file directory system, don't need to manually open and close connections to the database
#######################################
### Step 3: Extraction of variables ###
#######################################
### Note so far we have been using RSQLite:: functions to view the data, this was simply to showcase how the data is stored.
### The idea is that rAURUM can be used end to end in order to query the SQLite database and create variables.
### - Functions for extracting common variable types.
### Define codelist
codelist <- "187341000000114"
### Add an index date and censoring date to cohort
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
cholhdl_test <- rAURUM::extract_cholhdl_ratio(cohort = pat,
codelist.ratio = "uom_cholhdl_ratio_medcodeid",
codelist.hdl = "uom_hdl_medcodeid",
codelist.chol = "uom_chol_medcodeid",
indexdt = "fup_start",
db.open = aurum_extract,
return.output = TRUE)
