} else if (!(sum(is.na(data.raw$dtcens)) == 0)){
stop("NA values found in dtcens. Censoring time must be known for all individuals.")
}
### Stop if weights inputted manually, and confidence interval requested internally
if ((CI != FALSE) & !is.null(weights)){
stop("Estimation of confidence interval using internal bootstrapping procedure was requested.
This is not possible with fixed user-inputted weights as the calibration curves will be incorrect.
Weights must be calculated seperately within each bootstrapped dataset, this can be done using the internal procedure,
or with a user-specified function (w.function)")
}
### Ensure appropriate confidence type has been specified
if (!isFALSE(CI)){
if (CI >= 100 | CI <= 0){
stop("CI should be a number taking values in (0,100)")
} else if (!(CI.type %in% c("parametric", "bootstrap"))){
stop("CI.type must takes values in 'parametric' or 'bootstrap'")
} else if (CI.type == "bootstrap" & is.null(CI.R.boot)){
stop("Must specify number of bootstrap replicates for confidence interval using CI.R.boot.")
} else if (calib.type %in% c("blr", "mlr") & CI.type == "parametric"){
stop("Cannot produce a parametric confidence interva for calib.type = 'blr' or 'mlr'")
} else if (calib.type == "mlr" & assess.moderate == TRUE){
stop("Cannot produce a confidence interval for moderate calibration plots using method calib.type = 'mlr'")
}
}
### Check if transitions.out is only specified for non-zero columns
if (!is.null(transitions.out)){
if (sum(c(colSums(tp.pred) == 0)[transitions.out] == TRUE) > 0){
stop("Calibraiton curves have been requested for transitions into states which have zero probability of occuring.")
}
}
### If vector of weights and custom function for specifying weights both inputted, give error
if (!is.null(weights) & !is.null(w.function)){
stop("Cannot specify weights manually and specify a custom function for estimating the weights. Choose one or the other.")
}
### If pseudo-values does not have same number of columns as tp.pred give error
### If pseudo-values does not have same number of rows as data.raw give error
### If pseudo-values pre-calculated and bootstrapping requested give error
if (!is.null(pv.precalc)){
if (nrow(pv.precalc) != nrow(data.raw)){
stop("pv.precalc must have same number of rows as data.raw. calib_msm assumes landmarking has already been applied to data.raw as part of estimating the pseudo-values")
} else if (ncol(pv.precalc) != ncol(tp.pred)){
stop("pv.precalc must have same number of columns as tp.pred")
} else if (!isFALSE(CI) & CI.type == "bootstrap"){
stop("Cannot estimate a bootstrapped confidence interval if inputting pre-calculating pseudo-values.")
}
}
### Stop if calib.type = "AJ" and assess.moderate = TRUE, or parametric confidence interval requested
if (calib.type == "AJ" & assess.moderate == TRUE){
stop("Cannot assess moderate calibration for calib.type = 'AJ'")
} else if (calib.type == "AJ" & CI != FALSE & CI.type == "parametric"){
stop("Cannot produce parametric confidence intervals for mean calibration assessd using calib.type = 'AJ'")
}
## If a vector of weights has been provided, add it to the dataset
if (!is.null(weights)){
### First check whether it is the correct length (NA's should be present)
if (length(weights) != nrow(data.raw)){
stop("Weights vector not same length as data.raw")
} else {
data.raw$ipcw <- weights
weights.provided <- TRUE
}
} else if (is.null(weights)){
weights.provided <- FALSE
}
### If custom function for estimating weights has been inputted ("w.function"),
### stop if it does not contain all the arguments from calc_weights
if (!is.null(w.function)){
### stop if w.function doesn't have correct arguments
if(!all(names(formals(calc_weights)) %in% names(formals(w.function)))){
stop("Arguments for w.function does not contain those from calibmsm::calc_weights")
}
# calc_weights <- w.function
# print(calc_weights)
}
### If tp.pred.plot is user specified, ensure it has correct number of columns
if (!is.null(tp.pred.plot)){
if (ncol(tp.pred.plot) != ncol(tp.pred)){
stop("Data pred plot must have same number of columns as tp.pred")
}
}
### Load and view data
rm(list=ls())
data("ebmtcal")
head(ebmtcal)
data("msebmtcal")
subset(msebmtcal, id %in% c(1,2,3))
data("tps0")
head(tps0)
data("tps100")
head(tps100)
########################################################################################################
### Section 3.2: Calibration plots for the transition probabilities out of state j = 1 at time s = 0 ###
########################################################################################################
### Extract predicted transition probabilities out of state j = 1 at time s = 0
tp.pred.s0 <- tps0 |>
dplyr::filter(j == 1) |>
dplyr::select(any_of(paste("pstate", 1:6, sep = "")))
### Assign follow up time of t = 5 years
t.eval <- 1826
### Estimate calibration curve using BLR-IPCW
data.ms = msebmtcal
data.raw = ebmtcal
j=1
s=0
t = t.eval
tp.pred = tp.pred.s0
calib.type = "blr"
curve.type = "rcs"
rcs.nk = 3
w.covs = c("year", "agecl", "proph", "match")
CI = FALSE
CI.type <- "bootstrap"
transitions.out <- NULL
weights <- NULL
w.function = NULL
w.covs = c("year", "agecl", "proph", "match")
w.landmark.type = "state"
w.max = 10
w.stabilised = FALSE
w.max.follow = NULL
pv.group.vars = NULL
pv.n.pctls = NULL
pv.precalc = NULL
pv.ids = NULL
assess.moderate = TRUE
tp.pred.plot = NULL
### Stop if data.ms is missing the transition matrix, this can happen when using the subset function on data.ms
if (!("trans" %in% names(attributes(data.ms)))){
stop("The is no transition matrix (trans) attribute in data.ms, this may have happened when using the subset function to subset an 'msdata' data frame,
which should have this attribute")
}
### Stop if patients in data.raw are not in data.ms
if (!("id" %in% colnames(data.raw) & "id" %in% colnames(data.ms))){
stop("Variable 'id' must be in both data.raw and data.ms. Individuals are identified across the two datasets using this variable.")
} else if (!base::all(unique(data.raw$id) %in% unique(data.ms$id))){
stop("All patients in data.raw are not contained in data.ms. Landmarking cannot be applied.")
}
### Stop if not same number of rows in data.raw and tp.pred
if (nrow(tp.pred) != nrow(data.raw)){
stop("Number of rows in tp.pred does not match number of rows in data.raw")
}
### Warning if patients in data.ms are not in data.raw
if (!base::all(unique(data.ms$id) %in% unique(data.raw$id))){
warning("All patients in data.ms are not contained in data.raw. Landmarking can still be applied, but potential mismatch in these two datasets?")
}
### Stop if variables dtcens and dtcens.s do not exist, and if any NA values for dtcens
if (!("dtcens" %in% colnames(data.raw)) | !("dtcens.s" %in% colnames(data.raw))){
stop("data.raw should contains variables dtcens and dtcens.s")
} else if (!(sum(is.na(data.raw$dtcens)) == 0)){
stop("NA values found in dtcens. Censoring time must be known for all individuals.")
}
### Stop if weights inputted manually, and confidence interval requested internally
if ((CI != FALSE) & !is.null(weights)){
stop("Estimation of confidence interval using internal bootstrapping procedure was requested.
This is not possible with fixed user-inputted weights as the calibration curves will be incorrect.
Weights must be calculated seperately within each bootstrapped dataset, this can be done using the internal procedure,
or with a user-specified function (w.function)")
}
### Ensure appropriate confidence type has been specified
if (!isFALSE(CI)){
if (CI >= 100 | CI <= 0){
stop("CI should be a number taking values in (0,100)")
} else if (!(CI.type %in% c("parametric", "bootstrap"))){
stop("CI.type must takes values in 'parametric' or 'bootstrap'")
} else if (CI.type == "bootstrap" & is.null(CI.R.boot)){
stop("Must specify number of bootstrap replicates for confidence interval using CI.R.boot.")
} else if (calib.type %in% c("blr", "mlr") & CI.type == "parametric"){
stop("Cannot produce a parametric confidence interva for calib.type = 'blr' or 'mlr'")
} else if (calib.type == "mlr" & assess.moderate == TRUE){
stop("Cannot produce a confidence interval for moderate calibration plots using method calib.type = 'mlr'")
}
}
### Check if transitions.out is only specified for non-zero columns
if (!is.null(transitions.out)){
if (sum(c(colSums(tp.pred) == 0)[transitions.out] == TRUE) > 0){
stop("Calibraiton curves have been requested for transitions into states which have zero probability of occuring.")
}
}
### If vector of weights and custom function for specifying weights both inputted, give error
if (!is.null(weights) & !is.null(w.function)){
stop("Cannot specify weights manually and specify a custom function for estimating the weights. Choose one or the other.")
}
### If pseudo-values does not have same number of columns as tp.pred give error
### If pseudo-values does not have same number of rows as data.raw give error
### If pseudo-values pre-calculated and bootstrapping requested give error
if (!is.null(pv.precalc)){
if (nrow(pv.precalc) != nrow(data.raw)){
stop("pv.precalc must have same number of rows as data.raw. calib_msm assumes landmarking has already been applied to data.raw as part of estimating the pseudo-values")
} else if (ncol(pv.precalc) != ncol(tp.pred)){
stop("pv.precalc must have same number of columns as tp.pred")
} else if (!isFALSE(CI) & CI.type == "bootstrap"){
stop("Cannot estimate a bootstrapped confidence interval if inputting pre-calculating pseudo-values.")
}
}
### Stop if calib.type = "AJ" and assess.moderate = TRUE, or parametric confidence interval requested
if (calib.type == "AJ" & assess.moderate == TRUE){
stop("Cannot assess moderate calibration for calib.type = 'AJ'")
} else if (calib.type == "AJ" & CI != FALSE & CI.type == "parametric"){
stop("Cannot produce parametric confidence intervals for mean calibration assessd using calib.type = 'AJ'")
}
##########################################################
### Data preparation and further warnings/error checks ###
##########################################################
## If a vector of weights has been provided, add it to the dataset
if (!is.null(weights)){
### First check whether it is the correct length (NA's should be present)
if (length(weights) != nrow(data.raw)){
stop("Weights vector not same length as data.raw")
} else {
data.raw$ipcw <- weights
weights.provided <- TRUE
}
} else if (is.null(weights)){
weights.provided <- FALSE
}
### If custom function for estimating weights has been inputted ("w.function"),
### stop if it does not contain all the arguments from calc_weights
if (!is.null(w.function)){
### stop if w.function doesn't have correct arguments
if(!all(names(formals(calc_weights)) %in% names(formals(w.function)))){
stop("Arguments for w.function does not contain those from calibmsm::calc_weights")
}
# calc_weights <- w.function
# print(calc_weights)
}
### If tp.pred.plot is user specified, ensure it has correct number of columns
if (!is.null(tp.pred.plot)){
if (ncol(tp.pred.plot) != ncol(tp.pred)){
stop("Data pred plot must have same number of columns as tp.pred")
}
}
### Identify valid transitions
valid.transitions <- identify_valid_transitions(data.raw = data.raw, data.ms = data.ms, j = j, s = s, t = t)
?calibmsm
help(package = "calibmsm")
install.packages("changer")
available::available("rcprd")
getwd()
changer("../rAURUM", "rcprd")
changer::changer("../rAURUM", "rcprd")
devtools::install()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
## Create connection to a temporary database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
## Add observation data
add_to_database(filepath = system.file("aurum_data",
"aurum_allpatid_set1_extract_observation_001.txt", package = "rcprd"),
filetype = "observation", db = aurum_extract, overwrite = TRUE)
## Query database
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
devtools::document()
devtools::install()
R.Version()
### Document
devtools::document()
devtools::check_win_devel()
###
### Prior to release
###
usethis::use_release_issue()
gh_token_help()
devtools::gh_token_help()
usethis::gh_token_help()
gitcreds::gitcreds_set()
###
### Prior to release
###
usethis::use_release_issue()
### Follow checklist
usethis::use_cran_comments()
### Document
devtools::document()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check()
### Document
devtools::document()
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check()
test_check("rcprd")
###
### Run R-CMD-CHECK to be checked with CRANs win-builder service. Check email response for this.
###
devtools::check()
R CMD CHECK
checkCRAN()
devtools::check_win_devel()
install.packages("devtools")
devtools::check()
install.packages("dplyr")
install.packages("fastmatch")
install.packages("RSQLite")
install.packages("data.table")
devtools::check()
devtools::check_win_devel()
devtools::check(remote = TRUE, manual = TRUE)
devtools::document()
devtools::check(remote = TRUE, manual = TRUE)
###
### Prior to release
###
# usethis::gh_token_help()
# gitcreds::gitcreds_set()
usethis::use_release_issue()
urlchecker::url_check()
###
### Install
###
devtools::install()
urlchecker::url_check()
usethis::use_github_links()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
### Submit to CRAN!
usethis::use_version('patch')
devtools::submit_cran()
install.packages("httr")
devtools::submit_cran()
### Document
devtools::document()
devtools::check(remote = TRUE, manual = TRUE)
devtools::submit_cran()
tempdir()
tempdir()
tempdir()
tempdir()
tempfile()
### Document
devtools::document()
###
### Install
###
devtools::install()
TMPDIR()
TMPDIR
devtools::load_all()
create_directory_system(tempdir())
file.exists(filepath(tempdir(),"data"))
file.exists(file.path(tempdir(),"data"))
file.exists(file.path(tempdir(),"code"))
file.exists(file.path(tempdir(),"codelists"))
delete_directory_system(tempdir())
file.exists(file.path(tempdir(),"data"))
file.exists(file.path(tempdir(),"code"))
file.exists(file.path(tempdir(),"codelists"))
devtools::load_all()
delete_directory_system(tempdir())
file.exists(file.path(tempdir(),"data"))
file.exists(file.path(tempdir(),"code"))
file.exists(file.path(tempdir(),"codelists"))
### Document
devtools::document()
###
### Install
###
devtools::install()
tempfile("temp.R")
test <- RSQLite::dbConnect(RSQLite::SQLite(), tempfile("temp.sqlite"))
tempfile("temp.sqlite")
tempfile("temp.sqlite")
inherits(test, "DBIConnection")
test
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
devtools::load_all()
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue")
RSQLite::dbDisConnect(test)
RSQLite::dbDisconnect(test)
test <- RSQLite::dbConnect(RSQLite::SQLite(), tempfile("temp.sqlite"))
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue")
RSQLite::dbDisconnect(test)
test <- RSQLite::dbConnect(RSQLite::SQLite(), tempfile("temp"))
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue")
RSQLite::dbDisconnect(test)
test <- RSQLite::dbConnect(RSQLite::SQLite(), tempfile("temp"))
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "observation")
cprd_extract(db = test,
filepath = system.file("aurum_data", package = "rcprd"),
filetype = "drugissue")
pat<-extract_cohort(system.file("aurum_data", package = "rcprd"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
## Extract a history of type variable prior to index date
extract_ho(pat,
codelist_vector = "187341000000114",
indexdt = "fup_start",
db_open = test,
tab = "observation",
return_output = TRUE)
tempfile("temp")
tempfile("temp")
tempfile("temp")
tempdir()
tempdir()
tempdir()
tempdir()
file.path(tempdir(), "eggs.R")
file.path(tempdir(), "eggs.R")
file.path(tempdir(), "eggs.R")
file.path(tempdir(), "eggs.R")
file.path(tempdir(), "eggs.R")
### Lets just try and create a SQLite database and extract some data using the functions
devtools::check()
### Document
devtools::document()
### Document
devtools::document()
###
### Install
###
devtools::install()
### Document
devtools::document()
### Document
devtools::document()
### Check
devtools::check()
devtools::check_win_devel()
devtools::check(remote = TRUE, manual = TRUE)
###
### Install
###
devtools::install()
?rcprd::combine_query_boolean
?rcprd::combine_query_boolean()
devtools::document()
###
### Install
###
devtools::install()
devtools::check_mac_release()
devtools::check_win_devel()
devtools::check_win_devel()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::submit_cran()
shiny::runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/rshiny_test')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
runApp('C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2')
rsconnect::deployApp("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
rsconnect::deployApp("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
rsconnect::deployApp("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
rsconnect::deployApp("C:/Users/mbrxsap3/OneDrive - The University of Manchester/CHARIOT/CHARIOT_prototype_shiny2")
