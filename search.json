[{"path":"https://alexpate30.github.io/rcprd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rcprd authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/Details-on-algorithms-for-extracting-specific-variables.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Details-on-algorithms-for-extracting-specific-variables","text":"rcprd contains number functions extract specific variables, namely: BMI: extract_BMI Cholesterol/high-density lipoprotein (HDL) ratio: extract_cholhdl_ratio Diabetes status: extract_diabetes Smoking status: extract_smoking algorithms underpinning extraction variables given section 2. summary unit measurements recorded variables given section 3.","code":""},{"path":[]},{"path":"https://alexpate30.github.io/rcprd/articles/Details-on-algorithms-for-extracting-specific-variables.html","id":"bmi-extract_bmi","dir":"Articles","previous_headings":"Algorithms for variable extraction","what":"BMI (extract_BMI)","title":"Details-on-algorithms-for-extracting-specific-variables","text":"Extraction BMI requires user specify three codelists. One BMI scores (codelist_bmi), one height measurements (codelist_height) one weight measurements (codelist_weight). BMI, height weight measurements patient cohort interest extracted. algorithm follows: measurements must non-missing BMI measurements must within user-defined valid range. Rescale height scores metres. numunitid ∈{173,432,3202}\\\\{173, 432, 3202\\}, correspond metres, measurement assumed centimetres, height measurement divided 100 (see section 3). Rescale weight scores kg. numunitid ∈{1691,2318,2997,6265}\\\\{1691, 2318, 2997, 6265\\}, correspond stone, measurement converted kg. measurements assumed kg (see section 3). Calculate BMI every pair height weight measurements using weightheight2\\frac{weight}{height^{2}}. Remove BMI scores outside specified range. Assign observation date height weight measurement occurred first. Merge directly recorded BMI scores, BMI scores calculated height weight. Take recent BMI score within specified time period, whether directly recorded BMI score, calculated height weight. recorded date, directly recorded BMI score takes preference.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/Details-on-algorithms-for-extracting-specific-variables.html","id":"cholesterolhdl-ratio-extract_cholhdl_ratio","dir":"Articles","previous_headings":"Algorithms for variable extraction","what":"Cholesterol/HDL ratio (extract_cholhdl_ratio)","title":"Details-on-algorithms-for-extracting-specific-variables","text":"Extraction cholesterol/HDL ratio requires user specify three codelists. One cholesterol/HDL ratio measurements (codelist_ratio), one total cholesterol measurements (codelist_chol) one HDL measurements (codelist_hdl). cholesterol/HDL, total cholesterol cholesterol/HDL measurements patient cohort interest extracted. algorithm follows: measurements must non-missing cholesterol/HDL ratio measurements must within user-defined valid range. measurements assumed correct unit measurement (see section 3). Calculate cholesterol/HDL every pair total cholesterol HDL measurements using totalcholesterolHDL\\frac{total cholesterol}{HDL}. Remove cholesterol/HDL scores outside specified range. Assign observation date total cholesterol HDL measurement occurred first. Merge directly recorded cholesterol/HDL scores, cholesterol/HDL scores calculated total cholesterol HDL. Take recent cholesterol/HDL score within specified time period, whether directly recorded cholesterol/HDL score, calculated total cholesterol HDL. recorded date, directly recorded cholesterol/HDL score takes preference.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/Details-on-algorithms-for-extracting-specific-variables.html","id":"diabetes-status-extract_diabetes","dir":"Articles","previous_headings":"Algorithms for variable extraction","what":"Diabetes status (extract_diabetes)","title":"Details-on-algorithms-for-extracting-specific-variables","text":"Extraction diabetes status requires user specify two codelists. One type 1 diabetes (codelist_type1), another type 2 diabetes (codelist_type2). reason variable treated history type variable extracted using extract_ho often individuals generic code diabetes mellitus, used identify type 2 diabetes, also specific code type 1 diabetes mellitus. algorithm treats two mutually exclusive, assigns individuals code type 1 type 2 diabetes, type 1 diabetes. algorithm follows: Extract type 1 diabetes type 2 diabetes observations occurred prior index date. Observation dates identified using variable obsdate. individual code type 1 type 2 diabetes, assign diabetes type 1.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/Details-on-algorithms-for-extracting-specific-variables.html","id":"smoking-status-extract_smoking","dir":"Articles","previous_headings":"Algorithms for variable extraction","what":"Smoking status (extract_smoking)","title":"Details-on-algorithms-for-extracting-specific-variables","text":"Extraction smoking status requires user specify five codelists. One non-smoker (codelist_non), one ex-smoker (codelist_ex), one light smoker (codelist_light), one moderate smoker (codelist.moderate) one heavy smoker (codelist_heavy). records identified using light, moderate heavy smoker code lists, value variable, represents number cigarettes smoker per day, used modify outputted smoking status variable. maximise number observations defined way (< 10 day light, 10 - 19 day moderate, > 19 heavy). value variable observations recorded ex-smoker often denoting number cigarettes per day individual used smoke, therefore data used alter smoking status. individuals recent record non-smoker, individual previous records indicate history smoking, smoking status altered non-smoker ex-smoker. algorithm follows: Extract 100 recent non, ex, light, moderate heavy smoker observations according user inputted code lists. Observation dates identified using variable obsdate. 1 - 9 per day = light smoker. 10 - 19 per day = moderate smoker. 19 - 100 per day = heavy smoker. 100 per day, remove observation. Define smoking status recent observation. multiple date, use severe smoking status. recent observation non-smoker, codes ex, light, moderate heavy smoker prior , change ex-smoker.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/Details-on-algorithms-for-extracting-specific-variables.html","id":"summary-of-units-of-measurement-for-test-data","dir":"Articles","previous_headings":"","what":"Summary of units of measurement for test data","title":"Details-on-algorithms-for-extracting-specific-variables","text":"section report different units measurement test data variables may recorded . unit measurement denoted numunitid variable observation file, corresponding lookup file CPRD data. queried observation data large cohort individuals aged 18 - 85 2005 - 2020 using code lists provided within inst/codelists directory rcprd. test data searched separately using code list, resulting unit measurements recorded 0.01% query presented. results fed programs deriving variables (see section 2). defining variable, aim convert measurements scame scale/unit measurement. example, height measurements metres converted scale recorded centimeters. However, records, unit measurement might something odd, missing, meaning unclear convert onto desired scale. observations unit measurements, exclude observations, may correct measurements mis-recorded unit measurement. Instead, extracting variables, converting relevant unit measurements, define minimum maximum value, exclude observations fit range. seen , proportion observations unclear unit measurement small (exception cholesterol/hdl ratio, special case). Unit measurements cholesterol/high-density lipoprotein ratio common ‘NA’ (78.95%). second common ‘ratio’ (12.49%) 1/1 (2.33%). confusion unit measurement likely due fact ratio unit measurement, total cholesterol high-density lipoprotein unit measurement. measurements therefore assumed unit measurement (ratio). Unit measurements total cholesterol majority unit measurements mmol/L (96.35%) NA (3.54%). observations therefore assumed recorded mmol/L. Unit measurements high-density lipoprotein majority unit measurements mmol/L (94.21%) NA (5.67%). observations therefore assumed recorded mmol/L. Unit measurements body mass index majority unit measurements kg/m2 (39.58%), kg/mA2 (1.26%) NA (58.08%). observations therefore assumed recorded kg/m2. Unit measurements weight majority unit measurements kg (98.67%) NA (1.24%). observations therefore assumed recorded kg, however also know numunitid ∈1691,2318,2997or6265\\{1691, 2318, 2997 6265}, refers stone. Observations units measurements therefore converted kg. Unit measurements height majority unit measurements cm (96.82%), m (1.7%), metres (0.02%) NA (.37%). observations numunit corresponding metres, assumed centimetres, converted metres enable estimation BMI. Unit measurements systolic blood pressure unique algorithm SBP, still present results database query variable. measurement mm/Hg.","code":"list.files(system.file(\"codelists\", package = \"rcprd\")) #> [1] \"edh_bmi_medcodeid.csv\"           \"edh_chol_medcodeid.csv\"          #> [3] \"edh_cholhdl_ratio_medcodeid.csv\" \"edh_hdl_medcodeid.csv\"           #> [5] \"edh_sbp_medcodeid.csv\"           \"height_medcodeid.csv\"            #> [7] \"weight_medcodeid.csv\""},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"Clinical Practice Research Datalink (CPRD) large resource Electronic Health Records UK, owned UK Medicines Healthcare products Regulatory Agency (MHRA), containing information demography, medical history, test results drug use individuals registered general practice. MHRA maintain two databases, CPRD GOLD, (Herrett et al. 2015) contains data general practices using Vision computer system, CPRD Aurum (Wolf et al. 2019), contains data general practices using Egton Medical Information Systems (EMIS) computer system, EMIS Web. primary care data linked hospital data, death registration data, cancer registry data, deprivation data mental health services data, enabled NHS digital.(Padmanabhan et al. 2019) 2016, EMIS Web computer system used 4199 (56%) general practices England.(Kontopantelis et al. 2018) September 2024, CPRD Aurum contained data 47 million (16 million currently registered) individuals 1,784 (1,596 currently contributing) general practices across United Kingdom,(CPRD 2024a) CPRD GOLD contained data 21 million (2.9 million currently registered) individuals.(CPRD 2024b) CPRD widely used resource: since 2019, PubMed search reveals 540 studies published contain “CPRD” title abstract. Extraction CPRD data transformation format ready statistical analysis computationally demanding requires significant amount work. limited published software available aid researchers extraction processing CPRD data.Yimer et al. (2021) rEHR (Springate et al. 2017) R package manipulating analysing electronic health record data, works creating SQLite database fixed storage device (.e. disk drive), subsequently queried extract relevant information, faster conventional statistical analysis software. rEHR designed database agnostic, contains functionality longitudinal data extraction, cutting data time-varying covariates, matching controls cases, converting units test data, creating clinical code lists. rEHR however longer maintained, works older version R (3.3.2) archived CRAN. aurumpipeline package (Health Foundation Analytics Lab 2021) contains functions clean process CPRD Aurum data, works storing data parquet files disk drive, subsequently queried extract relevant data. However, aurumpipeline available CRAN provided reproducible examples. R package drugprepr (Yimer et al. 2021) implements algorithm Pye et al. (2018) preparing drug exposure data extracted CPRD, however deal initial data extraction storing data. Given many studies using CPRD data, limited availability software data processing, indicates large amount research time spent duplicating work others order extract CPRD data. study introduces rcprd, R package designed assist researchers working CPRD Aurum data creating datasets ‘analysis-ready’. main problem working CPRD Aurum data size raw data. Data 47 million individuals results thousands raw .txt files, Terabytes data, can cumbersome work . particular issue R users, infeasible read data R workspace simultaneously, R operates using physical memory (RAM). suggested Springate et al. (2017), rcprd bypassess problem creating SQLite database can queried data interest order build analysis-ready dataset. rcprd simplifies process querying SQLite database functions extract variables “recent test result”, “time first event”, “history specified condition”. SQLite database must created secure device server aligns data storage requirements CPRD. start discussing structure CPRD Aurum data approach taken rcprd processing data, draws heavily work Springate et al. (2017). run worked example showcase functionality rcprd, two main groups functions. first extract store data consistent manner. second group query data extract patient level variables. focus CPRD Aurum, opposed CPRD GOLD, given considerable drop number practices utilising Vision software last 10 years, limiting research utility CPRD GOLD database. However, rcprd package can also used manage linked secondary care (HES) ONS death data, flexible point used extract store data electronic health record, touched discussion.","code":""},{"path":[]},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"structure-of-cprd-aurum-data","dir":"Articles","previous_headings":"2 Data Structure and Extraction Process","what":"Structure of CPRD Aurum data","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"first define terminology used throughout article: Raw data: raw data provided user CPRD. Cohort: cohort individuals meet inclusion/exclusion criteria given research question. setting, cohort ultimately vector patient id’s. Analysis-ready dataset: data frame statistical models can fitted, one row individual cohort, column variable interest, example, age cohort entry, recent BMI score prior cohort entry. longitudinal analyses, data frames can concatenated, variable indicating time point data extracted. raw CPRD Aurum data split eight different file types: Consultation, DrugIssue, Observation, Patient, Practice, Problem, Referral, Staff. data specification available : (CPRD 2022). research questions, relevant files Patient, Observation DrugIssue. Patient file contains information registration database, date death lost follow , year birth gender. file required define cohort. observation file contains medical diagnoses tests, DrugIssue contains information prescriptions. Medical observations identified medcodeid, whereas prescriptions identified prodcodeid. order facilitate data transfer, data commonly split CPRD numerous smaller files. different patient files denoted string set1, set2, set3 file name. Individuals patient file corresponding string (setX) files containing medical prescription data. However, one Observation DrugIssue file corresponding patient file. example, observation files patients set1, set1 file name, extra suffix 1, 2, 3, etc. true DrugIssue files. naming structure follows: aurum_allpatid_setXX_extract_patient_001.txt aurum_allpatid_setXX_extract_observation_0YY.txt aurum_allpatid_setXX_extract_drugissue_0YY.txt X∈1,2,3,...X\\{1,2,3,...} Y∈01,02,03,...Y\\{01,02,03,...}. Note prefix file names may vary (.e. ‘aurum_allpatid’ part) however expect naming convention regards ‘setXX’, file type, ‘0YY’ remain consistent. changes future, endeavour update rcprd soon possible.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"recommended-process-for-extraction","dir":"Articles","previous_headings":"2 Data Structure and Extraction Process","what":"Recommended process for extraction","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"recommended process developing analysis-ready dataset follows (see Figure 1 visual representation ): Step 1: Extract initial cohort using extract_cohort() apply initial inclusion/exclusion criteria can applied using patient file. yes -> (proceed step 2) -> (proceed Q2) Step 2: patients meet inclusion/exclusion criteria step 1, add relevant primary care data SQLite database using cprd_extract(). Step 3: Query SQLite database order apply inclusion/exclusion criteria. yes -> (proceed step 4) -> (proceed step 5) Step 4: Request type 1 linked data*^* individuals apply remaining inclusion/exclusion criteria. Step 5: patients final cohort, add relevant primary care data SQLite database using cprd_extract(). SQLite database already created step 2, small number individuals excluded steps 3 4, consider skipping step. However, large number individuals excluded, worthwhile create new SQLite database, much smaller future queries extracting variables run much quicker. Step 6: Query SQLite database specific codes tests create variables individual cohort. stored .rds objects, R data analysts familiar . Step 7: Combine extracted variables analysis-ready dataset, also stored .rds object. *^*type 1 linked data defined “linked data required order finalise study population” Figure 1: Flowchart recommended data extraction process. Blue boxes denoate data files. Orange boxes denote application rcprd functions. process aligns process implemented CPRD cohort inclusion/exclusion criteria dependent linked data (see Q2 step 4). process can done entirely within R using rcprd functions, without specialist understanding SQLite databases. recommend process set , querying SQLite database computationally much quicker reading raw files R workspace querying separately. also reduces probability errors induced creating numerous loops raw data files. now move onto worked example, showcase implement process using rcprd functions detailed Table 1. Table 1: Table rcprd functions","code":""},{"path":[]},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"steps-1---4-defining-a-cohort","dir":"Articles","previous_headings":"3 Worked example for data extraction","what":"Steps 1 - 4: Defining a cohort","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"provided simulated patient, observation drugissue files utilisied worked example. names files share naming convention given section 2.1, column names data match real Aurum data. Numeric variables simulated random integers 1 100, date variables date 01/01/1900 01/01/2000, gender integer 1 2, year birth integer 1900 2000. Patient id practice id assigned manually. files contained inst/aurum_data directory rcprd. installing rcprd, directory can accessed using command system.file(\"aurum_data\", package = \"rcprd\"). contains data 12 fake patients, split across two patient files (set1 set2) three observation drugissue files (set1): first step analyses creating defining cohort individuals, involve working patient files. Data patient files can combined using extract_cohort() function. look directory specified filepath argument, file containing “patient” file name. files read concatenated single dataset. circumstances, researchers may provided list patids meet inclusion/exclusion criteria. case, can specified patids argument (requires character vector). Suppose individuals meeting exclusion criteria patid = 1, 3, 4 6. specify: circumstances, user may need apply inclusion exclusion criteria . case, one initially create patient file individuals. Often needs merged practice file, contains information last date data collection practice. practice files can read combined using function extract_practices(), merged patient file based pracid variable: cohort individuals defined applying study specific inclusion/exclusion criteria. example, individuals > 1 day valid follow aged 65+, 1st January 2000. criteria can applied solely using information available patient files. example, define individuals met inclusion criteria patid = 1, 3, 4 6. cohort defined, recommended saving .rds file can easily accessed, required input many subsequent functions. hypothetical example inclusion/exclusion criteria dependent linked data primary care data, therefore jump step 5. However, answer Q1 yes, resulting implementation step 2, process creating SQLite database (step 2) querying apply inclusnio/exclusion criteria (step 3) follow exact processes outlined sections 3.2 3.3. answer Q2 yes, type 1 linked data required apply inclusion/exclusion criteria, can done without use rcprd SQLite database. Type 1 linked data normally provided single text file, can readily loaded R manipulated order apply criteria.","code":"#devtools::install_github(\"alexpate30/rcprd\") #install.packages(\"rcprd\") NOT YET ON CRAN library(rcprd) #> Loading required package: data.table #devtools::load_all() list.files(system.file(\"aurum_data\", package = \"rcprd\"), pattern = \".txt\") #>  [1] \"aurum_allpatid_extract_practice_001.txt\"         #>  [2] \"aurum_allpatid_extract_practice_002.txt\"         #>  [3] \"aurum_allpatid_set1_extract_drugissue_001.txt\"   #>  [4] \"aurum_allpatid_set1_extract_drugissue_002.txt\"   #>  [5] \"aurum_allpatid_set1_extract_drugissue_003.txt\"   #>  [6] \"aurum_allpatid_set1_extract_observation_001.txt\" #>  [7] \"aurum_allpatid_set1_extract_observation_002.txt\" #>  [8] \"aurum_allpatid_set1_extract_observation_003.txt\" #>  [9] \"aurum_allpatid_set1_extract_patient_001.txt\"     #> [10] \"aurum_allpatid_set2_extract_patient_001.txt\" pat <- extract_cohort(filepath = system.file(\"aurum_data\", package = \"rcprd\"), patids = as.character(c(1,3,4,6))) str(pat) #> 'data.frame':    4 obs. of  12 variables: #>  $ patid         : chr  \"1\" \"3\" \"4\" \"6\" #>  $ pracid        : int  49 98 53 54 #>  $ usualgpstaffid: chr  \"6\" \"43\" \"72\" \"11\" #>  $ gender        : int  2 1 2 1 #>  $ yob           : int  1984 1930 1915 1914 #>  $ mob           : int  NA NA NA NA #>  $ emis_ddate    : Date, format: \"1976-11-21\" \"1972-06-01\" ... #>  $ regstartdate  : Date, format: \"1940-07-24\" \"1913-07-02\" ... #>  $ patienttypeid : int  58 81 10 85 #>  $ regenddate    : Date, format: \"1996-08-25\" \"1997-04-24\" ... #>  $ acceptable    : int  1 1 0 1 #>  $ cprd_ddate    : Date, format: \"1935-03-17\" \"1912-04-27\" ... pat <- extract_cohort(filepath = system.file(\"aurum_data\", package = \"rcprd\")) str(pat) #> 'data.frame':    12 obs. of  12 variables: #>  $ patid         : chr  \"1\" \"2\" \"3\" \"4\" ... #>  $ pracid        : int  49 79 98 53 62 54 49 79 98 53 ... #>  $ usualgpstaffid: chr  \"6\" \"11\" \"43\" \"72\" ... #>  $ gender        : int  2 1 1 2 2 1 2 1 1 2 ... #>  $ yob           : int  1984 1932 1930 1915 1916 1914 1984 1932 1930 1915 ... #>  $ mob           : int  NA NA NA NA NA NA NA NA NA NA ... #>  $ emis_ddate    : Date, format: \"1976-11-21\" \"1979-02-14\" ... #>  $ regstartdate  : Date, format: \"1940-07-24\" \"1929-02-23\" ... #>  $ patienttypeid : int  58 21 81 10 45 85 58 21 81 10 ... #>  $ regenddate    : Date, format: \"1996-08-25\" \"1945-03-19\" ... #>  $ acceptable    : int  1 0 1 0 0 1 1 0 1 0 ... #>  $ cprd_ddate    : Date, format: \"1935-03-17\" \"1932-02-05\" ... prac <- extract_practices(filepath = system.file(\"aurum_data\", package = \"rcprd\")) str(prac) #> 'data.frame':    6 obs. of  4 variables: #>  $ pracid: int  49 53 54 62 79 98 #>  $ lcd   : Date, format: \"1941-09-20\" \"1978-01-31\" ... #>  $ uts   : Date, format: NA NA ... #>  $ region: int  48 51 54 9 7 48 pat <- merge(pat, prac, by.x = \"pracid\", by.y = \"pracid\") pat <- subset(pat, patid %in% c(1,3,4,6))"},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"step-5-reading-in-data-and-creating-an-sqlite-database","dir":"Articles","previous_headings":"3 Worked example for data extraction","what":"Step 5: Reading in data and creating an SQLite database","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"Step 5 reads medical/prescription data raw .txt files adds SQLite database. done individuals meeting inclusion/exclusion criteria. SQLite database stored fixed storage device subsequently queried extracting variables create analysis-ready dataset.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"add-individual-files-to-sqlite-database-using-add_to_database","dir":"Articles","previous_headings":"3 Worked example for data extraction > 3.2 Step 5: Reading in data and creating an SQLite database","what":"Add individual files to SQLite database using add_to_database","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"function add_to_database can used add individual files SQLite database. Start defining connecting SQLite database. article create temporary database, practice permanent storage location. Specifically, file.path(tempdir(), \"temp.sqlite\") replaced desired file path SQLite database name. Next, add medical diagnoses data observation files database using add_to_database function. imperative adding raw CPRD data SQLite database, SQLite database stored secure environment aligns data storage requirements CPRD. simulated raw data provided rcprd can accessed using system.file function. vector patient id’s defines cohort defined subset_patids argument. data patid’s matching argument added SQLite database. filetype argument select appropriate function reading .txt files, also defines name table SQLite database files added . Note first file, overwrite = TRUE specified create new table. second third file, append = TRUE specified append existing table. can query database using db_query function return first 3 rows. showcase use function query database specific codes section XXXX. db_query utilises package RSQLite, details query SQLite database within R available RSQLite’s documentation (Müller et al. 2024). Next, prescription data drugissue files added table called drugissue. single SQLite database may contain one table, data added different table within SQLite database. table take name filetype argument, unless table_name argument specified. table can queried way, changing tab argument, specifies name table SQLite database query: Listing tables SQLite database shows now two, named observation drugissue. add_to_database function allows specification filetype = c(\"observation\", \"drugissue\", \"referral\", \"problem\", \"consultation\", \"hes_primary\",\"death\"), corresponding specific function reading corresponding .txt files correct formatting. \"hes_primary\" options correspond primary diagnoses file linked HES APC data. \"death\" file corresponds death file linked ONS data. wanting add files SQLite database, user defined function reading raw .txt file can specified extract_txt_func. allows user add .txt file SQLite database. Finally, manually adding files manner, good practice close connection SQLite database finished.","code":"aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\")) add_to_database(filepath = system.file(\"aurum_data\", \"aurum_allpatid_set1_extract_observation_001.txt\", package = \"rcprd\"),                  filetype = \"observation\", subset_patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE) add_to_database(filepath = system.file(\"aurum_data\", \"aurum_allpatid_set1_extract_observation_002.txt\", package = \"rcprd\"),                  filetype = \"observation\", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE) add_to_database(filepath = system.file(\"aurum_data\", \"aurum_allpatid_set1_extract_observation_003.txt\", package = \"rcprd\"),                  filetype = \"observation\", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE) db_query(db_open = aurum_extract, tab = \"observation\", n = 3) #>     patid consid pracid  obsid    obsdate  enterdate staffid parentobsid #>    <char> <char>  <int> <char>     <Date>     <Date>  <char>      <char> #> 1:      1     33      1    100 1926-05-21 1967-04-13      79          95 #> 2:      1     66      1     46 1932-04-08 1928-04-19      34          17 #> 3:      1     41      1     53 1915-03-29 1994-03-21      35          79 #>            medcodeid value numunitid obstypeid numrangelow numrangehigh #>               <char> <num>     <int>     <int>       <num>        <num> #> 1:   498521000006119    48        16        20          28           86 #> 2:         401539014    22         1         2          27            8 #> 3: 13483031000006114    17        78        13          87           41 #>    probobsid #>       <char> #> 1:        54 #> 2:        35 #> 3:        74 add_to_database(filepath = system.file(\"aurum_data\", \"aurum_allpatid_set1_extract_drugissue_001.txt\", package = \"rcprd\"),                  filetype = \"drugissue\", subset_patids = c(1,3,4,6), db = aurum_extract, overwrite = TRUE) add_to_database(filepath = system.file(\"aurum_data\", \"aurum_allpatid_set1_extract_drugissue_002.txt\", package = \"rcprd\"),                  filetype = \"drugissue\", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE) add_to_database(filepath = system.file(\"aurum_data\", \"aurum_allpatid_set1_extract_drugissue_003.txt\", package = \"rcprd\"),                  filetype = \"drugissue\", subset_patids = c(1,3,4,6), db = aurum_extract, append = TRUE) db_query(db_open = aurum_extract, tab = \"drugissue\", n = 3) #>     patid issueid pracid probobsid drugrecid  issuedate  enterdate staffid #>    <char>  <char>  <int>    <char>    <char>     <Date>     <Date>  <char> #> 1:      1      93      1        88        83 1925-11-15 1967-03-25      98 #> 2:      1      93      1        55        59 1933-07-12 1934-09-07      88 #> 3:      1      16      1        22        82 1946-03-31 1960-04-20      50 #>          prodcodeid dosageid quantity quantunitid duration estnhscost #>              <char>   <char>    <num>       <int>    <int>      <num> #> 1: 3092241000033113       58       18          33       27         12 #> 2:   92041000033111       62       93          83       59         11 #> 3:  971241000033111       87       43          83       88         65 RSQLite::dbListTables(aurum_extract) #> [1] \"drugissue\"   \"observation\" RSQLite::dbDisconnect(aurum_extract)"},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"add-all-relevant-files-to-sqlite-database-using-cprd_extract","dir":"Articles","previous_headings":"3 Worked example for data extraction > 3.2 Step 5: Reading in data and creating an SQLite database","what":"Add all relevant files to SQLite database using cprd_extract","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"practice, high number files add SQLite database adding one using add_to_database cumbersome. now repeat extraction using cprd_extract function, wrapper add_to_database, add files specified directory contain string matching specified file type. Start creating connection database: use cprd_extract add observation files SQLite database. connection (aurum_extract) existing database, case , overwritten running cprd_extract. directory containing files specified using filepath. read add files text string specified filetype file name. filetype argument takes values c(\"observation\", \"drugissue\", \"referral\", \"problem\", \"consultation\"). query first three rows database, note previously. process repeated drugissue files. string file name match , function read raw data, name table SQLite database, can altered using str_match, extract_txt_func table_name arguments respectively. Note use str_match may particular importance naming convention raw data differs described . argument rm_duplicates = TRUE can specified de-duplicate records adding SQLite database. increase computation time, derivation many variables effected duplicate records, consider carefully whether ’s necessary apply step . also opportunity de-duplicate records later querying data. Note cprd_extract may run considerable period time working entire CPRD AURUM database, therefore recommended run interactively. creation SQLite database may time consuming, subsequent queries far efficient, short term pain long term gain.","code":"aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\")) ### Extract data cprd_extract(db = aurum_extract,               filepath = system.file(\"aurum_data\", package = \"rcprd\"),               filetype = \"observation\", subset_patids = c(1,3,4,6), use_set = FALSE) #>   |                                                                              |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:42.03177 #>   |                                                                              |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:42.044981 #>   |                                                                              |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:42.0564 #>   |                                                                              |======================================================================| 100%  ### Query first three rows db_query(db_open = aurum_extract, tab = \"observation\", n = 3) #>     patid consid pracid  obsid    obsdate  enterdate staffid parentobsid #>    <char> <char>  <int> <char>     <Date>     <Date>  <char>      <char> #> 1:      1     33      1    100 1926-05-21 1967-04-13      79          95 #> 2:      1     66      1     46 1932-04-08 1928-04-19      34          17 #> 3:      1     41      1     53 1915-03-29 1994-03-21      35          79 #>            medcodeid value numunitid obstypeid numrangelow numrangehigh #>               <char> <num>     <int>     <int>       <num>        <num> #> 1:   498521000006119    48        16        20          28           86 #> 2:         401539014    22         1         2          27            8 #> 3: 13483031000006114    17        78        13          87           41 #>    probobsid #>       <char> #> 1:        54 #> 2:        35 #> 3:        74 ### Extract data cprd_extract(db = aurum_extract,               filepath = system.file(\"aurum_data\", package = \"rcprd\"),               filetype = \"drugissue\", subset_patids = c(1,3,4,6), use_set = FALSE) #>   |                                                                              |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt 2025-06-27 09:32:42.080752 #>   |                                                                              |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_002.txt 2025-06-27 09:32:42.093355 #>   |                                                                              |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_003.txt 2025-06-27 09:32:42.104274 #>   |                                                                              |======================================================================| 100%  ### List tables RSQLite::dbListTables(aurum_extract) #> [1] \"drugissue\"   \"observation\"  ### Query first three rows db_query(db_open = aurum_extract, tab = \"drugissue\", n = 3) #>     patid issueid pracid probobsid drugrecid  issuedate  enterdate staffid #>    <char>  <char>  <int>    <char>    <char>     <Date>     <Date>  <char> #> 1:      1      93      1        88        83 1925-11-15 1967-03-25      98 #> 2:      1      93      1        55        59 1933-07-12 1934-09-07      88 #> 3:      1      16      1        22        82 1946-03-31 1960-04-20      50 #>          prodcodeid dosageid quantity quantunitid duration estnhscost #>              <char>   <char>    <num>       <int>    <int>      <num> #> 1: 3092241000033113       58       18          33       27         12 #> 2:   92041000033111       62       93          83       59         11 #> 3:  971241000033111       87       43          83       88         65  ### Disconnect RSQLite::dbDisconnect(aurum_extract)"},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"add-all-relevant-files-to-sqlite-database-in-a-computationally-efficient-manner-using-the-set-functionality-","dir":"Articles","previous_headings":"3 Worked example for data extraction > 3.2 Step 5: Reading in data and creating an SQLite database","what":"Add all relevant files to SQLite database in a computationally efficient manner using the set functionality.","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"number patients cohort large (example millions, tens millions), add_to_database function may perform slowly. observation file added SQLite database, add_to_database checks see whether patid contained vector subset_patids (vector length 20,000,000 case). can utilise structure CPRD AURUM data speed process. data set naming convention (see section 2.1), know need search patids subset_patids, corresponding patient file. example, reading file aurum_allpatid_set1_extract_observation_00Y.txt (Y), need search whether patid vector patids subset.patid, also aurum_allpatid_set1_extract_patient_001.txt, much smaller vector. can reduce computation time add_to_database cprd_extract. achieve , subset_patids object data frame two required columns. first column patid, second set, reporting corresponding value set patient belongs . first step therefore create patient file, extra variable set, number following text string set patient file containing data patient. reading patient files create cohort, can done specifying set = TRUE. example, individuals cohort come file string set1, therefore variable individuals cohort, however case practice. patient file read previously, addition set column. file can reduced just patid set columns, used input subset_patids running add_to_database cprd_extract functions. extracting data observation files set1 name, search patient id’s set == 1 data.frame provided subset_patids. Note difference compared previously extracted SQLite databases. computational gains applying subsetting manner realised example. close connection, now move onto querying database extract variables creating analysis-ready dataset.","code":"pat <- extract_cohort(filepath = system.file(\"aurum_data\", package = \"rcprd\"), patids = as.character(c(1,3,4,6)), set = TRUE) pat #>   patid pracid usualgpstaffid gender  yob mob emis_ddate regstartdate #> 1     1     49              6      2 1984  NA 1976-11-21   1940-07-24 #> 3     3     98             43      1 1930  NA 1972-06-01   1913-07-02 #> 4     4     53             72      2 1915  NA 1989-04-24   1969-07-11 #> 6     6     54             11      1 1914  NA 1926-09-09   1970-08-28 #>   patienttypeid regenddate acceptable cprd_ddate set #> 1            58 1996-08-25          1 1935-03-17   1 #> 3            81 1997-04-24          1 1912-04-27   1 #> 4            10 1951-09-05          0 1921-02-13   1 #> 6            85 1983-03-14          1 1963-08-27   1 ### Create connection to SQLite database aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ### Add observation files cprd_extract(db = aurum_extract,               filepath = system.file(\"aurum_data\", package = \"rcprd\"),               filetype = \"observation\",               subset_patids = pat,               use_set = TRUE) #>   |                                                                              |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:42.142236 #>   |                                                                              |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:42.157797 #>   |                                                                              |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:42.169423 #>   |                                                                              |======================================================================| 100%  ### Add drugissue files cprd_extract(db = aurum_extract,               filepath = system.file(\"aurum_data\", package = \"rcprd\"),               filetype = \"drugissue\",               subset_patids = pat,               use_set = TRUE) #>   |                                                                              |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_001.txt 2025-06-27 09:32:42.181938 #>   |                                                                              |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_002.txt 2025-06-27 09:32:42.194775 #>   |                                                                              |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_drugissue_003.txt 2025-06-27 09:32:42.207955 #>   |                                                                              |======================================================================| 100%  ### Query first three rows of each table db_query(db_open = aurum_extract, tab = \"observation\", n = 3) #>     patid consid pracid  obsid    obsdate  enterdate staffid parentobsid #>    <char> <char>  <int> <char>     <Date>     <Date>  <char>      <char> #> 1:      1     33      1    100 1926-05-21 1967-04-13      79          95 #> 2:      1     66      1     46 1932-04-08 1928-04-19      34          17 #> 3:      1     41      1     53 1915-03-29 1994-03-21      35          79 #>            medcodeid value numunitid obstypeid numrangelow numrangehigh #>               <char> <num>     <int>     <int>       <num>        <num> #> 1:   498521000006119    48        16        20          28           86 #> 2:         401539014    22         1         2          27            8 #> 3: 13483031000006114    17        78        13          87           41 #>    probobsid #>       <char> #> 1:        54 #> 2:        35 #> 3:        74 db_query(db_open = aurum_extract, tab = \"drugissue\", n = 3) #>     patid issueid pracid probobsid drugrecid  issuedate  enterdate staffid #>    <char>  <char>  <int>    <char>    <char>     <Date>     <Date>  <char> #> 1:      1      93      1        88        83 1925-11-15 1967-03-25      98 #> 2:      1      93      1        55        59 1933-07-12 1934-09-07      88 #> 3:      1      16      1        22        82 1946-03-31 1960-04-20      50 #>          prodcodeid dosageid quantity quantunitid duration estnhscost #>              <char>   <char>    <num>       <int>    <int>      <num> #> 1: 3092241000033113       58       18          33       27         12 #> 2:   92041000033111       62       93          83       59         11 #> 3:  971241000033111       87       43          83       88         65"},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"step-6-querying-the-sqlite-database-to-extract-variables","dir":"Articles","previous_headings":"3 Worked example for data extraction","what":"Step 6: Querying the SQLite database to extract variables","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"data extracted stored SQLite database, can now queried create variables interest. Please note, answer Q1 yes, resulting implementation steps 2 3, process querying SQLite database order apply exclusion criteria (step 3) follow exact process outlined . normal process extracting variables electronic health records create code lists, group codes denote condition. database queried observations medical codes matching code list. variable defined based query. Whether binary variable, indicating whether individual record given code, recent test result given code, something much complex. CPRD Aurum, medical diagnoses tests identified observation file using medcodeids, prescription data identified drugissue file using prodcodeids. Creation code lists important step data extraction, refer elsewhere details best practice developing code lists, limitations working code lists (Williams et al. 2019, 2017; Watson et al. 2017; Gulliford et al. 2009; Matthewman et al. 2024). functions section split three groups: Functions extracting common variable types. Functions extracting specific variables Functions database queries custom variable extraction functions extract query data relative index date. index date may fixed date (e.g. 1st January 2010), date different individual (e.g. date age 50 reached), combination two (e.g., maximum 1st January 2010 date aged 50 reached).","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"functions-for-extracting-common-variable-types","dir":"Articles","previous_headings":"3 Worked example for data extraction > 3.3 Step 6: Querying the SQLite database to extract variables","what":"Functions for extracting common variable types","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"functions extract three common variable types, history condition/medication prior index date (extract_ho), time index date first occurrence medical code/prescription censoring (extract_time_until), recent test result(s) given time frame valid range relative index date (extract_test_data). Variables calculated relative index date using observation date (obsdate) observation file issue date (issuedate) drug issue file. first, extract_ho, extracts binary variable based whether individual specified code recorded prior index date. can applied search history medical diagnoses prescriptions. index date ust variable cohort dataset, specified indexdt argument. second extract_time_until, defines time--event/survival variable. two components, time first record specified code censoring, indicator whether event observed censored. derive variable type cohort must also contain time censoring variable, can specified censdt. third extract_test, extract recent test result given time frame. number days index date search results specified time_post time_prev respectively. Test results identified observation file, using code lists. Lower upper bounds can also specified extracted data lower_bound upper_bound. one observation can returned specifying numobs. Metadata test result, unit measurement, date recorded, medical code, can returned settings numunitid = TRUE. variation function, extract_test_data_var, returns standard deviation test data within specified time value range. variables interest extracted, can merged analysis-ready dataset (step 7). codelists can also specified R data.frame must contain either medcodeid prodcodeid column. may allow user run sensitivity analyses easily like extract variable different subgroups codelist. example: Codelists can specified way functions section, sections 3.3.2 3.3.3. However, extra variable codelist (.e. condition subgroup variables example) returned output meaningful . example, extract_ho, individual may many matching codes medical history, therefore ’s unclear returned.","code":"### Define codelist my_vector_codelist <- \"187341000000114\"  ### Add an index date to cohort pat$fup_start <- as.Date(\"01/01/2020\", format = \"%d/%m/%Y\")  ### Extract a history of type variable using extract_ho ho <- extract_ho(cohort = pat,                   codelist_vector = my_vector_codelist,                   indexdt = \"fup_start\",                   db_open = aurum_extract,                   tab = \"observation\",                  return_output = TRUE) ho #>   patid ho #> 1     1  0 #> 3     3  0 #> 4     4  0 #> 6     6  1 ### Add an censoring date to cohort pat$fup_end <- as.Date(\"01/01/2024\", format = \"%d/%m/%Y\")  ### Extract a time until variable using extract_time_until time_until <- extract_time_until(cohort = pat,                                   codelist_vector = my_vector_codelist,                                   indexdt = \"fup_start\",                                   censdt = \"fup_end\",                                  db_open = aurum_extract,                                   tab = \"observation\",                                  return_output = TRUE) time_until #>   patid var_time var_indicator #> 1     1     1461             0 #> 2     3     1461             0 #> 3     4     1461             0 #> 4     6     1461             0 ### Extract test data using extract_test_data test_data <- extract_test_data(cohort = pat,                            codelist_vector = my_vector_codelist,                            indexdt = \"fup_start\",                            db_open = aurum_extract,                           time_post = 0,                           time_prev = Inf,                           return_output = TRUE) test_data #>   patid value #> 1     1    NA #> 2     3    NA #> 3     4    NA #> 4     6    28 ### Recursive merge analysis.ready.pat <- Reduce(function(df1, df2) merge(df1, df2, by = \"patid\", all.x = TRUE), list(pat[,c(\"patid\", \"gender\", \"yob\")], ho, time_until, test_data))  analysis.ready.pat #>   patid gender  yob ho var_time var_indicator value #> 1     1      2 1984  0     1461             0    NA #> 2     3      1 1930  0     1461             0    NA #> 3     4      2 1915  0     1461             0    NA #> 4     6      1 1914  1     1461             0    28 my_codelist_df <- data.frame(\"condition\" = \"mycondition\", medcodeid = c(\"221511000000115\", \"187341000000114\"), \"subgroup\" = c(\"subgroup1\", \"subgroup2\"))  extract_test_data(cohort = pat,                   codelist_df = subset(my_codelist_df, subgroup == \"subgroup1\"),                   indexdt = \"fup_start\",                   db_open = aurum_extract,                   time_post = 0,                   time_prev = Inf,                   return_output = TRUE) #>   patid value   condition       medcodeid  subgroup #> 1     1    NA        <NA>            <NA>      <NA> #> 2     3    68 mycondition 221511000000115 subgroup1 #> 3     4    NA        <NA>            <NA>      <NA> #> 4     6    NA        <NA>            <NA>      <NA>  extract_test_data(cohort = pat,                   codelist_df = subset(my_codelist_df, subgroup == \"subgroup2\"),                   indexdt = \"fup_start\",                   db_open = aurum_extract,                   time_post = 0,                   time_prev = Inf,                   return_output = TRUE) #>   patid value   condition       medcodeid  subgroup #> 1     1    NA        <NA>            <NA>      <NA> #> 2     3    NA        <NA>            <NA>      <NA> #> 3     4    NA        <NA>            <NA>      <NA> #> 4     6    28 mycondition 187341000000114 subgroup2"},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"functions-for-extracting-specific-variables","dir":"Articles","previous_headings":"3 Worked example for data extraction > 3.3 Step 6: Querying the SQLite database to extract variables","what":"Functions for extracting specific variables","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"also number functions can used extract specific variables: extract_bmi: Derives BMI scores. Requires specification codelist BMI, height, weight separately. extract_cholhdl_ratio: Derives total cholesterol/high-density lipoprotein ratio. Requires specification separate codelists total cholesterol/high-density lipoprotein ratio, total cholesterol, high-density lipoproteins separately. extract_diabetes: Derives categorical variable history type 1 diabetes, history type 2 diabetes history diabetes. Requires specification separate codelists type 1 type 2 diabetes. Individuals codes designated type 1. extract_smoking: Derives categorical variable smoking status. Requires specification seperate codelists non-smoker, ex-smoker, light smoker, moderate smoker heavy smoker. recent smoking status non-smoker, historical codes indicate smoking, individual classified ex-smoker. deemed variables required custom functions definitions fit variable types section 3.3.1. case, number steps taken order clean manipulate data order get desired output. example, height measurements recorded centimeters converted metres order calculate BMI scores. done use numunitid variable observation file. BMI cholesterol/high-density lipoprotein ratio, variable can either identified directly, calculated component measures. case, component parts must recorded specified time range relative index date. smoking status, individuals recent medical observation recorded non-smoker, medical record shows previous smoking, recent record changed ex-smoker. diabetes status, diabetes often recorded generic codes “diabetes mellitus”, specify type. dealt assuming generic codes refer type 2 diabetes, unless individual also specific type 1 diabetes code, case determined type 1 diabetes opposed type 2. full details extracting variables provided vignette titled Details--algorithms--extracting-specific-variables. However, important state, correct way define variable may change study study. Therefore using functions extract variables, encourage taking time ensure way variable extracted matches definition ones study, edit functions algorithms accordingly.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"functions-for-database-queries-and-custom-variable-extraction","dir":"Articles","previous_headings":"3 Worked example for data extraction > 3.3 Step 6: Querying the SQLite database to extract variables","what":"Functions for database queries and custom variable extraction","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"functions utilised internally functions sections 3.3.1 3.3.2. provided easily enable package users write functions extracting variables covered previous two sections. db_query function query SQLite database observations medcodeid prodcodeid specified codelist. example, can query observation table codes medcodeid 114311000006111 Setting rm_duplicates = TRUE de-duplicate output. codelist specified R data.frame codelist_df argument, returned query also contain variables codelist data.frame. combine_query_boolean function assess whether individual specified cohort (pat) observation queried data (obtained using db_query) within specified time frame index date, returning 0/1 vector. cohort must contain variable called indexdt containing index date. function useful defining ‘history ’ type variables, want know record given condition prior index date. combine_query function merge cohort queried data return specified number observations (numobs) within specified time frame index date. useful extracting test data requiring access values tests, specifying variables require > 1 observation within certain time frame (.e. two prescriptions within month prior index date). Setting reduce_output = TRUE remove majority variables merged datasets. queries observation table, query type can specified \"med\" \"test\". Inputting query_type = \"med\" just return date observations medcodeid. query_type = \"test\", value relevant information also returned, NA values removed (although can altered argument value_na_rm).close connection database. query drugissue table, query_type = \"drug\" specified, date observations prodcodeid returned. reduce_output = FALSE, variables removed output. functions section can used building blocks extract desired variables (e.g. see functions section 3.3.2).","code":"my_db_query <- db_query(db_open = aurum_extract,                         tab =\"observation\",                         codelist_vector = \"114311000006111\")  my_db_query #>     patid consid pracid  obsid    obsdate  enterdate staffid parentobsid #>    <char> <char>  <int> <char>     <Date>     <Date>  <char>      <char> #> 1:      1     41      1    100 1904-09-27 1966-12-02      33          39 #> 2:      3     34      1     79 1976-07-31 1979-03-13      25          90 #> 3:      3     79      1     18 1947-09-30 1927-10-31      93          55 #> 4:      3      7      1     22 1989-07-24 1914-11-30      26          63 #> 5:      4     42      1     43 1924-09-03 1955-03-13      52          93 #> 6:      4     80      1     80 1945-11-26 1993-03-28      48          25 #> 7:      4     43      1     64 1909-09-25 1931-07-17      84          44 #> 8:      6     49      1     96 1932-05-29 1947-10-06      60          86 #> 9:      6     42      1     68 1931-05-20 1978-09-24      81          59 #>          medcodeid value numunitid obstypeid numrangelow numrangehigh probobsid #>             <char> <num>     <int>     <int>       <num>        <num>    <char> #> 1: 114311000006111    18        29        78           4           89        61 #> 2: 114311000006111    83        69        56          75           71        84 #> 3: 114311000006111    85        43         9          61            8        84 #> 4: 114311000006111    16        99        13          64           65        54 #> 5: 114311000006111    59        73        61          89           53        13 #> 6: 114311000006111    88        91        66          20           42         3 #> 7: 114311000006111   100         9        29          71           93        90 #> 8: 114311000006111    15        47        77          26           82        16 #> 9: 114311000006111    81        61        32          67           20        45 ### Add an index date to pat pat$indexdt <- as.Date(\"01/01/2020\", format = \"%d/%m/%Y\")  ### Combine query with cohort creating a boolean variable denoting 'history of' combine.query.boolean <- combine_query_boolean(cohort = pat,                                                db_query = my_db_query,                                                query_type = \"med\")    combine.query.boolean #> [1] 0 1 1 1 ### Combine query with cohort retaining most recent three records combine.query <- combine_query(cohort = pat,                                db_query = my_db_query,                                query_type = \"med\",                                numobs = 3,                                reduce_output = TRUE)    combine.query #>     patid       medcodeid    obsdate #>    <char>          <char>     <Date> #> 1:      3 114311000006111 1976-07-31 #> 2:      3 114311000006111 1947-09-30 #> 3:      3 114311000006111 1989-07-24 #> 4:      4 114311000006111 1924-09-03 #> 5:      4 114311000006111 1945-11-26 #> 6:      6 114311000006111 1932-05-29 #> 7:      6 114311000006111 1931-05-20 ### Extract a history of type variable using extract_ho combine.query <- combine_query(cohort = pat,                                db_query = my_db_query,                                query_type = \"test\",                                numobs = 3,                                reduce_output = TRUE)    combine.query #>     patid       medcodeid    obsdate value numunitid numrangelow numrangehigh #>    <char>          <char>     <Date> <num>     <int>       <num>        <num> #> 1:      3 114311000006111 1976-07-31    83        69          75           71 #> 2:      3 114311000006111 1947-09-30    85        43          61            8 #> 3:      3 114311000006111 1989-07-24    16        99          64           65 #> 4:      4 114311000006111 1924-09-03    59        73          89           53 #> 5:      4 114311000006111 1945-11-26    88        91          20           42 #> 6:      6 114311000006111 1932-05-29    15        47          26           82 #> 7:      6 114311000006111 1931-05-20    81        61          67           20  ### Disconnect RSQLite::dbDisconnect(aurum_extract)"},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"saving-extracted-variables-directly-to-a-disk-drive-and-utilising-raurums-suggested-directory-system","dir":"Articles","previous_headings":"3 Worked example for data extraction > 3.3 Step 6: Querying the SQLite database to extract variables","what":"Saving extracted variables directly to a disk drive, and utilising rAURUMs suggested directory system","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"far extracted variables (using functions section 3.3.1 3.3.2) read R workspace specifying return_output = TRUE. working large cohorts may preferable save output directly onto disk drive, specifying out_save_disk = TRUE. file path save output can specified manually out_filepath argument. However, argument left NULL, rcprd attempt save extracted variable directory “data/extraction/” relative working directory. name file dependent variable name specified argument varname. can convenient way save output directly disk without repeatedly specify file paths file names. similar functionality specifying codelists. Codelists can specified two ways. first read codelist R character vector specify argument codelist_vector, done previous examples. Alternatively, codelists stored disk drive can referred codelist argument many rcprd functions, requires specific underlying directory structure. codelist disk drive must stored directory called “codelists/analysis/” relative working directory. codelist must .csv file, contain column medcodeid, prodcodeid ICD10 depending table queried. input argument codelist just character string name files (excluding suffix ‘.csv’). codelist_vector argument take precedence codelist argument specified. Finally, similar functionality accessing SQLite database internally, rather 1) open connection, 2) use input functions, 3) remember close connection. Instead, SQLite database stored directory “data/sql/” relative working directory, SQLite database can referred name (character string) argument db. connection SQLite datbase opened internally within function call, SQLite database queried, connection closed. Alternatively, SQLite database stored anywhere disk drive can accessed specifying full filepath (character string) argument db_filepath. workflow advantageous avoids hard file paths beneficial wanting move code onto another computer system. Furthermore, codelists SQLite database created stored appropriate folders, can simply referred name, resulting easier workflow. function create_directory_system() create directory system required use rcprd way. avoid repetition previous section, showcased just using extract_ho function. sake example, start setting working directory directory called inst/example within rcprd. maintain new working directory across multiple R markdown code chunks, use knitr::opts_knit$set. follow section, user simply set working directory usual using setwd(). Next, create_directory_system() function can used generate required directory structure. SQLite database called “mydb.sqlite” created “data/sql” directory, using data previous examples: Finally, code list called mylist.csv created saved codelists/analysis/ directory. mydb.sqlite database can now queried create ‘history ’ type variable using codelist mylist.csv, output saved directly onto disk drive. Note order run extract_ho , connection SQLite database need created, codelist need R workspace, output function. Instead extracted variable saved onto disk drive .rds file, can read using: setup can used conjunction functions step 6 (.e. extract_test_var, extract_time_until db_query).","code":"## Set working directory knitr::opts_knit$set(root.dir = tempdir()) suppressMessages(   create_directory_system() )  file.exists(file.path(tempdir(), \"data\")) #> [1] TRUE file.exists(file.path(tempdir(), \"codelists\")) #> [1] TRUE file.exists(file.path(tempdir(), \"code\")) #> [1] TRUE ## Open connection aurum_extract <- connect_database(\"data/sql/mydb.sqlite\")  ## Add data to SQLite database using cprd_extract cprd_extract(db = aurum_extract,              filepath = system.file(\"aurum_data\", package = \"rcprd\"),              filetype = \"observation\", use_set = FALSE) #>   |                                                                              |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:42.747551 #>   |                                                                              |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:42.760993 #>   |                                                                              |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:42.772268 #>   |                                                                              |======================================================================| 100%  ## Disconnect RSQLite::dbDisconnect(aurum_extract) ### Define codelist my_codelist <- data.frame(medcodeid = \"187341000000114\")  ### Save codelist write.csv(my_codelist, \"codelists/analysis/mylist.csv\") extract_ho(cohort = pat,            codelist = \"mylist\",            indexdt = \"fup_start\",            db = \"mydb\",            tab = \"observation\",            return_output = FALSE,            out_save_disk = TRUE) readRDS(\"data/extraction/var_ho.rds\") #>   patid ho #> 1     1  0 #> 3     3  0 #> 4     4  0 #> 6     6  1"},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"extracting-longitudinal-datatime-varying-covariates","dir":"Articles","previous_headings":"3 Worked example for data extraction > 3.3 Step 6: Querying the SQLite database to extract variables","what":"Extracting longitudinal data/time varying covariates","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"functions section 3.3.1 3.3.2 option extract data given time point post index date (specified t argument). allows users extract data fixed intervals, can utilised longitudinal analyses time-varying covariates required. saving extracted variables directly disk drive (out_save_disk = TRUE), time data extracted , t, added file name default.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"working-with-linked-data","dir":"Articles","previous_headings":"3 Worked example for data extraction > 3.3 Step 6: Querying the SQLite database to extract variables","what":"Working with linked data","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"worked example overlooked work linked data. Linked data can added SQLite database. primary diagnosis file can added using add_to_database() function specifying filetype = “hes_primary”. linked file can added SQLite database writing user-defined function reads text file formats variables appropriately, specifying extract_txt_func argument. However, user define functions querying linked data creating variables analysis. Working linked data made part core functionality often much smaller size, files (e.g. HES Admitted Patient Care primary diagnosis file, Office National Statistics death registration data) broken large number smaller files. means can easily read R dealt R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/articles/rcprd.html","id":"discussion","dir":"Articles","previous_headings":"","what":"Discussion","title":"rcprd: An R package to simplify the extraction and processing of CPRD data, and create analysis-ready datasets","text":"rcprd R package allows users process CPRD Aurum data R consistent computationally efficiency manner. provides functionality read store data, create analysis-ready datasets. process avoids reading thousands raw text files R workspace whenever variable needs derived, minimising risk coding errors. rcprd enables handling storing raw data, achieved creation SQLite database using RSQLite. user can define functions reading raw data, allowing functions applied electronic health records, future versions CPRD Aurum different data structures. functions extraction variables create analysis-ready datasets involve split three groups: 1) Functions extracting common variable types (history specified condition, time event occurs, recent test result); 2) Functions extracting specific variables; 3) Functions database queries custom variable extraction. querying large data files otherwise handled R workspace. functions uses computationally efficient SQL queries query large datasets read R workspace, -user knowledge SQL required. utilising RSQLite storing querying raw data, rcprd follows suggested approach rEHR (Springate et al. 2017). many ways, rEHR comprehensive rcprd, also used case-control matching, cutting survival cohort time-varying covariates, constructing clinical code lists. packages provide functionality query underlying database observations specific medical prescription codes without needing SQL experience, however differ method . rEHR functions return observations specified dates, whether clinical codes, first/last clinical code period. functions can also applied across multiple time periods (.e. year) simultaneously. contrast, rcprd functions query database return observations time period relative index date, may (may ) different date patient. well functions query database, rcprd also provides functions extract specific variable types, relative given index date. example, binary variable based existence clinical code prior index date, test result specified upper lower bound, time--event/survival type variable. functions can also applied number days /specified index date allow extraction data longitudinal analyses. approach rcprd, extracting variables relative index date common building datasets used development validation clinical prediction model,(Riley et al. 2019) whereas functions contained rEHR relevant wider range epidemiological analyses, including case-control studies reporting descriptive properties incidence/prevalence. aurumpipeline takes different approach rEHR rcprd using parquet files store data opposed SQLite. Parquet files efficient data storage optimised query performance, meaning setup high ceiling term computational efficiency. aurumpipeline provides functions query raw data two fixed dates, option define binary variable depending specified medical codes recorded time period. Beyond , arrow (Richardson et al. 2024) package recommended data base queries, meaning derivation variables types require user-developed functions. strength rcprd simplify complex process turning raw CPRD data analysis-ready dataset, following process (Springate et al. 2017). Functions extracting variables designed user friendly, extent needs specified index date code list, number different common variable types can derived. basic functions also provided, simply return queries underlying data, order allow user flexibility defining functions extracting variables summary statistics. main limitation package one inherent R packages, must continuously maintained R updated. main reason rcprd developed, light archiving rEHR. Package rights set-rcprd can maintained taken individuals. Another limitation scope package comprehensive, example comparison rEHR, may cover needs statisticians/epidemiologists. However, scope size package increases, task maintaining . believe ’s current state, maintenance rcprd manageable going forwards. Furthermore, rcprd provides foundations build data set type analysis, tasks just require user-input order define new functions around database queries. summary, main goal package reduce duplication time effort among using CPRD data research, allowing time focused aspects research projects. rcprd actively maintained foreseeable future. Suggestions improvement encouraged can posted GitHub: https://github.com/alexpate30/calibmsm.","code":""},{"path":[]},{"path":"https://alexpate30.github.io/rcprd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Pate. Author, maintainer, copyright holder.","code":""},{"path":"https://alexpate30.github.io/rcprd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pate (2025). rcprd: Extraction Management Clinical Practice Research Datalink Data. R package version 0.0.1, https://alexpate30.github.io/rcprd/.","code":"@Manual{,   title = {rcprd: Extraction and Management of Clinical Practice Research Datalink Data},   author = {Alexander Pate},   year = {2025},   note = {R package version 0.0.1},   url = {https://alexpate30.github.io/rcprd/}, }"},{"path":"https://alexpate30.github.io/rcprd/index.html","id":"rcprd","dir":"","previous_headings":"","what":"Extraction and Management of Clinical Practice Research Datalink Data","title":"Extraction and Management of Clinical Practice Research Datalink Data","text":"goal rcprd simplify process extracting processing CPRD Aurum data ‘analysis-ready’ dataset can used statistical analyses. process somewhat difficult R, raw data large, provided large number .txt files, read R workspace. rcprd utilises RSQLite create SQLite databases stored hard disk. queried extract required information cohort interest. processes follow closely rEHR package. detailed guide use rcprd please see user-guide vignette.","code":""},{"path":"https://alexpate30.github.io/rcprd/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extraction and Management of Clinical Practice Research Datalink Data","text":"package can installed CRAN follows: can install development version rcprd GitHub :","code":"# install.packages(\"rcprd\") # install.packages(\"devtools\") # devtools::install_github(\"alexpate30/rcprd\")"},{"path":"https://alexpate30.github.io/rcprd/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Extraction and Management of Clinical Practice Research Datalink Data","text":"basic example shows create dataset containing age. data provided package utilised example simulated. Load rcprd: Create cohort based patient files: Connect SQLite database (example, create temporary file): Read medical data (observation files) add SQLite database. Query database specific codes store R object using db_query function: Add index date patient file, extract variables relative : Extract ‘history ’ type variable, equal 1 individual record specified medcodeid prior index date, equal 0 otherwise. Merge patient file ‘history ’ variable create analysis-ready dataset: Currently functionality exists rcprd extract medical data observation file (including specific functions extracting test data) medication data drugissue file. Low level functions exist allow user query RSQLite database write functions define variables interest. mid-level functions allow users extract variables certain types (‘history ’, ‘time event’, ‘recent test result’). high level functions allow users extract specific variables, body mass index, systolic blood pressure, smoking status, diabetes status, etc. functions decisions made define variables. sure check code make sure matches definition. example, extract_diabetes return categorical variable three categories, Absent, type1 type2. individual record type 1 type 2 diabetes (according users code lists), extract_diabetes assign individual group type1.","code":"library(rcprd) #> Loading required package: data.table pat <- extract_cohort(filepath = system.file(\"aurum_data\", package = \"rcprd\")) str(pat) #> 'data.frame':    12 obs. of  12 variables: #>  $ patid         : chr  \"1\" \"2\" \"3\" \"4\" ... #>  $ pracid        : int  49 79 98 53 62 54 49 79 98 53 ... #>  $ usualgpstaffid: chr  \"6\" \"11\" \"43\" \"72\" ... #>  $ gender        : int  2 1 1 2 2 1 2 1 1 2 ... #>  $ yob           : int  1984 1932 1930 1915 1916 1914 1984 1932 1930 1915 ... #>  $ mob           : int  NA NA NA NA NA NA NA NA NA NA ... #>  $ emis_ddate    : Date, format: \"1976-11-21\" \"1979-02-14\" ... #>  $ regstartdate  : Date, format: \"1940-07-24\" \"1929-02-23\" ... #>  $ patienttypeid : int  58 21 81 10 45 85 58 21 81 10 ... #>  $ regenddate    : Date, format: \"1996-08-25\" \"1945-03-19\" ... #>  $ acceptable    : int  1 0 1 0 0 1 1 0 1 0 ... #>  $ cprd_ddate    : Date, format: \"1935-03-17\" \"1932-02-05\" ... aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\")) cprd_extract(db = aurum_extract,               filepath = system.file(\"aurum_data\", package = \"rcprd\"),               filetype = \"observation\") #>   |                                                                              |                                                                      |   0% #> Adding C:/Program Files/R/R-4.4.2/library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2024-11-14 15:20:22.632475 #>   |                                                                              |=======================                                               |  33% #> Adding C:/Program Files/R/R-4.4.2/library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2024-11-14 15:20:22.746196 #>   |                                                                              |===============================================                       |  67% #> Adding C:/Program Files/R/R-4.4.2/library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2024-11-14 15:20:22.83656 #>   |                                                                              |======================================================================| 100% ### Create codelist codelist <- \"187341000000114\"  ### Query for observations with this code db_query(db_open = aurum_extract,          tab =\"observation\",          codelist_vector = codelist) #>     patid consid pracid  obsid obsdate enterdate staffid parentobsid #>    <char> <char>  <int> <char>   <num>     <num>  <char>      <char> #> 1:      1     42      1     81   -5373      4302      85          35 #> 2:      2     56      1     77   -5769    -13828      24           4 #> 3:      6     40      1     41  -14727     -6929      98          80 #>          medcodeid value numunitid obstypeid numrangelow numrangehigh probobsid #>             <char> <num>     <int>     <int>       <num>        <num>    <char> #> 1: 187341000000114    84        79        67          24           22         5 #> 2: 187341000000114    46        92        81          56           30        18 #> 3: 187341000000114    28        20         5          41           97        92 pat$fup_start <- as.Date(\"01/01/2020\", format = \"%d/%m/%Y\") ho <- extract_ho(pat,                   codelist_vector = codelist,                   indexdt = \"fup_start\",                   db_open = aurum_extract,                   tab = \"observation\",                  return_output = TRUE) str(ho) #> 'data.frame':    12 obs. of  2 variables: #>  $ patid: chr  \"1\" \"2\" \"3\" \"4\" ... #>  $ ho   : int  1 1 0 0 0 1 0 0 0 0 ... ### Recursive merge analysis.ready.pat <- merge(pat[,c(\"patid\", \"fup_start\", \"gender\")], ho, by.x = \"patid\", by.y = \"patid\", all.x = TRUE)  analysis.ready.pat #>    patid  fup_start gender ho #> 1      1 2020-01-01      2  1 #> 2     10 2020-01-01      2  0 #> 3     11 2020-01-01      2  0 #> 4     12 2020-01-01      1  0 #> 5      2 2020-01-01      1  1 #> 6      3 2020-01-01      1  0 #> 7      4 2020-01-01      2  0 #> 8      5 2020-01-01      2  0 #> 9      6 2020-01-01      1  1 #> 10     7 2020-01-01      2  0 #> 11     8 2020-01-01      1  0 #> 12     9 2020-01-01      1  0"},{"path":"https://alexpate30.github.io/rcprd/index.html","id":"package-maintainence","dir":"","previous_headings":"","what":"Package maintainence","title":"Extraction and Management of Clinical Practice Research Datalink Data","text":"parts package create SQLite database somewhat dependent structure raw CPRD Aurum data. example, functions read raw text files (e.g. extract_txt_obs) hard coded format variables specific names certain way (e.g. convert obsdate character variable date variable). time, structure CPRD Aurum data may change, impact utility package. endeavor keep rcprd updated new releases CPRD Aurum. However, possible, tried protect giving user flexible options well defaults. example, add_to_database defaults using extract_txt_obs read raw text data filetype = \"observation\" specified. However, also option extract_txt_func, allows users specify function read text data, override use extract_txt_obs. Despite , may breaking points haven’t thought , case please let us know.","code":""},{"path":"https://alexpate30.github.io/rcprd/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Extraction and Management of Clinical Practice Research Datalink Data","text":"encounter bug, please file issue minimal reproducible example GitHub.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/add_to_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a single .txt file to an SQLite database on the hard disk. — add_to_database","title":"Adds a single .txt file to an SQLite database on the hard disk. — add_to_database","text":"Add raw data one CPRD flatfiles SQLite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/add_to_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a single .txt file to an SQLite database on the hard disk. — add_to_database","text":"","code":"add_to_database(   filepath,   filetype = c(\"observation\", \"drugissue\", \"referral\", \"problem\", \"consultation\",     \"hes_primary\", \"death\"),   nrows = -1,   select = NULL,   subset_patids = NULL,   use_set = FALSE,   db,   extract_txt_func = NULL,   table_name = NULL,   rm_duplicates = FALSE,   ... )"},{"path":"https://alexpate30.github.io/rcprd/reference/add_to_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a single .txt file to an SQLite database on the hard disk. — add_to_database","text":"filepath Path .txt file system. filetype Type CPRD Aurum file (observation, drugissue, referral, problem, consultation, hes_primary, death) nrows Number rows read .txt file. select Character vector column names select adding SQLite database. subset_patids Patient id's subset .txt file adding SQLite database. use_set Reduce subset_patids just corresponding set value .txt file read . Can greatly improve computational efficiency subset_patids large. See vignette XXXX details. db open SQLite database connection created using RSQLite::dbConnect. extract_txt_func User-defined function read .txt file R. table_name Name table SQLite database data added . rm_duplicates TRUE/FALSE whether remove duplicate values (default FALSE). ... Extract arguments passed read.table (extract_txt_func) reading .txt files.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/add_to_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a single .txt file to an SQLite database on the hard disk. — add_to_database","text":"Adds .txt file SQLite database hard disk.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/add_to_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a single .txt file to an SQLite database on the hard disk. — add_to_database","text":"add file table named filetype SQLite database, unless table_name specified. use_set = FALSE, subset_patids vector patid's .txt files subsetted adding SQLite database. use_set = TRUE, subset_patids dataframe two columns, patid set, set corresponds number file name following word 'set'. functionality provided increase computational efficiency subsetting cohort patients large (millions). can computationally expensive process flatfile read , must cross matched large vector . CPRD flatfiles split groups can identified naming convention. Patients set 1, data DrugIssue, Observation, etc, \"set\" suffix flatfile name. can utilise speed process subsetting data flatfiles patids subset.patid. Instead subset patids subset_patids, corresponding value \"set\", matches suffix \"set\" CPRD flatfile filename. example, patients Patient file suffix \"set1\", medical data Observation file suffix \"set1\". subsetting Observation file subset_patids (cohort), need patients also patient file suffix \"set1\". cohort patients want subset data small, computational gains argument minor can ignored. function reading .txt file chosen set functions provided rcprd, based  fletype (filetype). extract_txt_func need specified unless wanting manually define function . may beneficial wanting change variable formats, variables .txt files change future releases CPRD AURUM.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/add_to_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a single .txt file to an SQLite database on the hard disk. — add_to_database","text":"","code":"## Create connection to a temporary database aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Add observation data add_to_database(filepath = system.file(\"aurum_data\", \"aurum_allpatid_set1_extract_observation_001.txt\", package = \"rcprd\"), filetype = \"observation\", db = aurum_extract, overwrite = TRUE)  ## Query database RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3) #>   patid consid pracid obsid obsdate enterdate staffid parentobsid #> 1     1     33      1   100  -15931      -994      79          95 #> 2     1     66      1    46  -13782    -15232      34          17 #> 3     1     41      1    53  -20002      8845      35          79 #>           medcodeid value numunitid obstypeid numrangelow numrangehigh #> 1   498521000006119    48        16        20          28           86 #> 2         401539014    22         1         2          27            8 #> 3 13483031000006114    17        78        13          87           41 #>   probobsid #> 1        54 #> 2        35 #> 3        74  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.aurum.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine a CPRD aurum database query with a cohort. — combine_query.aurum","title":"Combine a CPRD aurum database query with a cohort. — combine_query.aurum","text":"S3 method can used database queries Aurum extracts. Combine database query cohort, retaining observations time_prev days prior indexdt, time_post days indexdt, test data values lower_bound upper_bound. recent numobs observations returned. cohort must contain variables patid indexdt. type query must specified appropriate data manipulation. Input type = med interested medical diagnoses observation file, type = test interseted test data observation file.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.aurum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine a CPRD aurum database query with a cohort. — combine_query.aurum","text":"","code":"# S3 method for class 'aurum' combine_query(   db_query,   cohort,   query_type,   time_prev = Inf,   time_post = Inf,   lower_bound = -Inf,   upper_bound = Inf,   numobs = 1,   value_na_rm = TRUE,   earliest_values = FALSE,   reduce_output = FALSE )"},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.aurum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine a CPRD aurum database query with a cohort. — combine_query.aurum","text":"db_query Output database query (ideally obtained db_query). cohort Cohort combine database query. query_type Type query time_prev Number days prior index date look codes. time_post Number days index date look codes. lower_bound Lower bound returned values query_type = \"test\". upper_bound Upper bound returned values query_type = \"test\". numobs Number observations returned. value_na_rm TRUE remove data NA value column queried data remove values outside lower_bound upper_bound query_type = \"test\". earliest_values TRUE return earliest values opposed recent. reduce_output TRUE reduce output just patid, event date, medical/product code, test value.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.aurum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine a CPRD aurum database query with a cohort. — combine_query.aurum","text":"data.table observations meet specified criteria.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.aurum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine a CPRD aurum database query with a cohort. — combine_query.aurum","text":"value_na_rm = FALSE may use extracting variables like smoking status, want test data number cigarettes per day, want remove observations NA value column, medcodeid may indicate smoking status.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.aurum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine a CPRD aurum database query with a cohort. — combine_query.aurum","text":"","code":"## Create connection to a temporary database aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Add observation data from all observation files in specified directory cprd_extract(db = aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\") #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:31.587643 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:31.601099 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:31.612398 #>    |                                                                               |======================================================================| 100%  ## Query database for a specific medcode db_query <- db_query(db_open = aurum_extract, tab =\"observation\", codelist_vector = \"187341000000114\")  ## Define cohort pat<-extract_cohort(filepath = system.file(\"aurum_data\", package = \"rcprd\"))  ### Add an index date to pat pat$indexdt <- as.Date(\"01/01/2020\", format = \"%d/%m/%Y\")  ## Combine query with cohort retaining most recent three records combine_query(cohort = pat, db_query = db_query, query_type = \"med\", numobs = 3) #>     patid pracid.x usualgpstaffid gender   yob   mob emis_ddate regstartdate #>    <char>    <int>         <char>  <int> <int> <int>     <Date>       <Date> #> 1:      2       79             11      1  1932    NA 1979-02-14   1929-02-23 #> 2:      6       54             11      1  1914    NA 1926-09-09   1970-08-28 #>    patienttypeid regenddate acceptable cprd_ddate    indexdt consid pracid.y #>            <int>     <Date>      <int>     <Date>     <Date> <char>    <int> #> 1:            21 1945-03-19          0 1932-02-05 2020-01-01     56        1 #> 2:            85 1983-03-14          1 1963-08-27 2020-01-01     40        1 #>     obsid    obsdate  enterdate staffid parentobsid       medcodeid value #>    <char>     <Date>     <Date>  <char>      <char>          <char> <num> #> 1:     77 1954-03-17 1932-02-22      24           4 187341000000114    46 #> 2:     41 1929-09-06 1951-01-12      98          80 187341000000114    28 #>    numunitid obstypeid numrangelow numrangehigh probobsid #>        <int>     <int>       <num>        <num>    <char> #> 1:        92        81          56           30        18 #> 2:        20         5          41           97        92  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine a database query with a cohort. — combine_query","title":"Combine a database query with a cohort. — combine_query","text":"S3 generic function can used database queries Aurum GOLD extracts. Combine database query cohort, retaining observations time_prev days prior indexdt, time_post days indexdt, test data values lower_bound upper_bound. recent numobs observations returned. cohort must contain variables patid indexdt. type query must specified appropriate data manipulation. Input type = med interested medical diagnoses observation file, type = test interseted test data observation file.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine a database query with a cohort. — combine_query","text":"","code":"combine_query(   db_query,   cohort,   query_type = c(\"med\", \"drug\", \"test\", \"hes_primary\", \"death\"),   time_prev = Inf,   time_post = Inf,   lower_bound = -Inf,   upper_bound = Inf,   numobs = 1,   value_na_rm = TRUE,   earliest_values = FALSE,   reduce_output = TRUE )"},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine a database query with a cohort. — combine_query","text":"db_query Output database query (ideally obtained db_query). cohort Cohort combine database query. query_type Type query time_prev Number days prior index date look codes. time_post Number days index date look codes. lower_bound Lower bound returned values query_type = \"test\". upper_bound Upper bound returned values query_type = \"test\". numobs Number observations returned. value_na_rm TRUE remove data NA value column queried data remove values outside lower_bound upper_bound query_type = \"test\". earliest_values TRUE return earliest values opposed recent. reduce_output TRUE reduce output just patid, event date, medical/product code, test value.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine a database query with a cohort. — combine_query","text":"data.table observations meet specified criteria.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine a database query with a cohort. — combine_query","text":"value_na_rm = FALSE may use extracting variables like smoking status, want test data number cigarettes per day, want remove observations NA value column, medcodeid may indicate smoking status.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine a database query with a cohort. — combine_query","text":"","code":"## Create connection to a temporary database aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Add observation data from all observation files in specified directory cprd_extract(db = aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\") #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:31.135485 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:31.176921 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:31.188644 #>    |                                                                               |======================================================================| 100%  ## Query database for a specific medcode db_query <- db_query(db_open = aurum_extract, tab =\"observation\", codelist_vector = \"187341000000114\")  ## Define cohort pat<-extract_cohort(filepath = system.file(\"aurum_data\", package = \"rcprd\"))  ### Add an index date to pat pat$indexdt <- as.Date(\"01/01/2020\", format = \"%d/%m/%Y\")  ## Combine query with cohort retaining most recent three records combine_query(cohort = pat, db_query = db_query, query_type = \"med\", numobs = 3) #>     patid pracid.x usualgpstaffid gender   yob   mob emis_ddate regstartdate #>    <char>    <int>         <char>  <int> <int> <int>     <Date>       <Date> #> 1:      2       79             11      1  1932    NA 1979-02-14   1929-02-23 #> 2:      6       54             11      1  1914    NA 1926-09-09   1970-08-28 #>    patienttypeid regenddate acceptable cprd_ddate    indexdt consid pracid.y #>            <int>     <Date>      <int>     <Date>     <Date> <char>    <int> #> 1:            21 1945-03-19          0 1932-02-05 2020-01-01     56        1 #> 2:            85 1983-03-14          1 1963-08-27 2020-01-01     40        1 #>     obsid    obsdate  enterdate staffid parentobsid       medcodeid value #>    <char>     <Date>     <Date>  <char>      <char>          <char> <num> #> 1:     77 1954-03-17 1932-02-22      24           4 187341000000114    46 #> 2:     41 1929-09-06 1951-01-12      98          80 187341000000114    28 #>    numunitid obstypeid numrangelow numrangehigh probobsid #>        <int>     <int>       <num>        <num>    <char> #> 1:        92        81          56           30        18 #> 2:        20         5          41           97        92  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query_boolean.aurum.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine a CPRD aurum database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean.aurum","title":"Combine a CPRD aurum database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean.aurum","text":"S3 method can used database queries Aurum extracts. Combine database query cohort returning 0/1 vector depending whether individual recorded code interest. cohort must contain variables patid indexdt. database query merged cohort variable patid. individual least numobs observations time_prev days prior indexdt, time_post days indexdt, 1 returned, 0 otherwise. type query must specified appropriate data manipulation.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query_boolean.aurum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine a CPRD aurum database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean.aurum","text":"","code":"# S3 method for class 'aurum' combine_query_boolean(   db_query,   cohort,   query_type,   time_prev = Inf,   time_post = 0,   numobs = 1 )"},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query_boolean.aurum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine a CPRD aurum database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean.aurum","text":"db_query Output database query (ideally obtained db_query). cohort Cohort combine database query. query_type Type query time_prev Number days prior index date look codes. time_post Number days index date look codes. numobs Number observations required observed specified time window return 1.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query_boolean.aurum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine a CPRD aurum database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean.aurum","text":"0/1 vector.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query_boolean.aurum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine a CPRD aurum database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean.aurum","text":"","code":"## Create connection to a temporary database aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Add observation data from all observation files in specified directory cprd_extract(db = aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\") #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:31.979325 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:31.991996 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:32.003091 #>    |                                                                               |======================================================================| 100%  ## Query database for a specific medcode db_query <- db_query(db_open = aurum_extract, tab =\"observation\", codelist_vector = \"187341000000114\")  ## Define cohort pat<-extract_cohort(filepath = system.file(\"aurum_data\", package = \"rcprd\"))  ### Add an index date to pat pat$indexdt <- as.Date(\"01/01/2020\", format = \"%d/%m/%Y\")  ## Combine query with cohort retaining most recent three records combine_query_boolean(cohort = pat, db_query = db_query, query_type = \"med\", numobs = 3) #>  [1] 0 0 0 0 0 0 0 0 0 0 0 0  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query_boolean.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine a database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean","title":"Combine a database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean","text":"S3 generic function can used database queries Aurum GOLD extracts. Combine database query cohort returning 0/1 vector depending whether individual recorded code interest. cohort must contain variables patid indexdt. database query merged cohort variable patid. individual least numobs observations time_prev days prior indexdt, time_post days indexdt, 1 returned, 0 otherwise. type query must specified appropriate data manipulation.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query_boolean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine a database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean","text":"","code":"combine_query_boolean(   db_query,   cohort,   query_type = c(\"med\", \"drug\"),   time_prev = Inf,   time_post = 0,   numobs = 1 )"},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query_boolean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine a database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean","text":"db_query Output database query (ideally obtained db_query). cohort Cohort combine database query. query_type Type query time_prev Number days prior index date look codes. time_post Number days index date look codes. numobs Number observations required observed specified time window return 1.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/combine_query_boolean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine a database query with a cohort returning a 0/1 vector depending on whether each individual has a recorded code of interest. — combine_query_boolean","text":"0/1 vector.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/connect_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Open connection to SQLite database — connect_database","title":"Open connection to SQLite database — connect_database","text":"Open connection SQLite database","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/connect_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open connection to SQLite database — connect_database","text":"","code":"connect_database(dbname)"},{"path":"https://alexpate30.github.io/rcprd/reference/connect_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open connection to SQLite database — connect_database","text":"dbname Name SQLite database hard disk (including full file path relative working directory)","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/connect_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open connection to SQLite database — connect_database","text":"return value, called open database connection.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/connect_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open connection to SQLite database — connect_database","text":"","code":"## Connect to a database aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Check connection is open inherits(aurum_extract, \"DBIConnection\") #> [1] TRUE  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/cprd_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds all the .txt files in a directory, with certain file names, to an SQLite database on the hard disk. — cprd_extract","title":"Adds all the .txt files in a directory, with certain file names, to an SQLite database on the hard disk. — cprd_extract","text":"Add raw data one CPRD flatfiles SQLite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/cprd_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds all the .txt files in a directory, with certain file names, to an SQLite database on the hard disk. — cprd_extract","text":"","code":"cprd_extract(   db,   filepath,   filetype = c(\"observation\", \"drugissue\", \"referral\", \"problem\", \"consultation\",     \"hes_primary\", \"death\"),   nrows = -1,   select = NULL,   subset_patids = NULL,   use_set = FALSE,   extract_txt_func = NULL,   str_match = NULL,   table_name = NULL,   rm_duplicates = FALSE )"},{"path":"https://alexpate30.github.io/rcprd/reference/cprd_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds all the .txt files in a directory, with certain file names, to an SQLite database on the hard disk. — cprd_extract","text":"db open SQLite database connection created using RSQLite::dbConnect. filepath Path directory containing .txt files. filetype Type CPRD Aurum file (observation, drugissue, referral, problem, consultation, hes_primary, death) nrows Number rows read .txt file. select Vector column names select adding SQLite database. subset_patids Patient id's subset .txt file adding SQLite database. use_set Reduce subset_patids just corresponding set value .txt file read . Can greatly improve computational efficiency subset_patids large. See vignette XXXX details. extract_txt_func User-defined function read .txt file R. str_match Character vector match searching file names add database. table_name Name table SQLite database data added . rm_duplicates TRUE/FALSE whether remove duplicate values (default FALSE).","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/cprd_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds all the .txt files in a directory, with certain file names, to an SQLite database on the hard disk. — cprd_extract","text":"Adds .txt file SQLite database hard disk.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/cprd_extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds all the .txt files in a directory, with certain file names, to an SQLite database on the hard disk. — cprd_extract","text":"default, add files contain filetype file name table named filetype SQLite database. str_match specified, add files contain str_match file name table named str_match SQLite database. case, filetype still used choose function reads formats raw data, although can overwritten extract_txt_func. argument table_name specified, data added table called table_name SQLite database. Currently, rcprd deals filetype = c(\"observation\", \"drugissue\", \"referral\", \"problem\", \"consultation\", \"hes_primary\", \"death\") default. However, using str_match extract_txt_func, user can manually search files string file name, read format using user-defined function. means user restricted adding pre-defined file types SQLite database. use_set = FALSE, subset_patids vector patid's .txt files subsetted adding SQLite database. use_set = TRUE, subset_patids dataframe two columns, patid set, set corresponds number file name following word 'set'. functionality provided increase computational efficiency subsetting cohort patients large (millions). can computationally expensive process flatfile read , must cross matched large vector . CPRD flatfiles split groups can identified naming convention. Patients set 1, data DrugIssue, Observation, etc, \"set\" suffix flatfile name. can utilise speed process subsetting data flatfiles patids subset.patid. Instead subset patids subset_patids, corresponding value \"set\", matches suffix \"set\" CPRD flatfile file name. example, patients Patient file suffix \"set1\", medical data Observation file suffix \"set1\". subsetting Observation file subset_patids (cohort), need patients also patient file suffix \"set1\". cohort patients want subset data small, computational gains argument minor can ignored. function reading .txt file chosen set functions provided rcprd, based  filetype (filetype). extract_txt_func need specified unless wanting manually define function . may beneficial wanting change variable formats, variables .txt files change future releases CPRD AURUM rcprd updated.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/cprd_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds all the .txt files in a directory, with certain file names, to an SQLite database on the hard disk. — cprd_extract","text":"","code":"## Create connection to a temporary database aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Add observation data from all observation files in specified directory cprd_extract(db = aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\") #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:32.393049 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:32.40638 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:32.417995 #>    |                                                                               |======================================================================| 100%  ## Query database RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3) #>   patid consid pracid obsid obsdate enterdate staffid parentobsid #> 1     1     33      1   100  -15931      -994      79          95 #> 2     1     66      1    46  -13782    -15232      34          17 #> 3     1     41      1    53  -20002      8845      35          79 #>           medcodeid value numunitid obstypeid numrangelow numrangehigh #> 1   498521000006119    48        16        20          28           86 #> 2         401539014    22         1         2          27            8 #> 3 13483031000006114    17        78        13          87           41 #>   probobsid #> 1        54 #> 2        35 #> 3        74  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/create_directory_system.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the appropriate directory system to be able to run functions without specifying hard filepaths — create_directory_system","title":"Create the appropriate directory system to be able to run functions without specifying hard filepaths — create_directory_system","text":"Create appropriate directory system able run functions without specifying hard filepaths","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/create_directory_system.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the appropriate directory system to be able to run functions without specifying hard filepaths — create_directory_system","text":"","code":"create_directory_system(rootdir = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/create_directory_system.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the appropriate directory system to be able to run functions without specifying hard filepaths — create_directory_system","text":"rootdir Directory within create directory system","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/create_directory_system.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the appropriate directory system to be able to run functions without specifying hard filepaths — create_directory_system","text":"return value, creates directory system specified directory.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/create_directory_system.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the appropriate directory system to be able to run functions without specifying hard filepaths — create_directory_system","text":"","code":"## Create directory system compatible with rcprd's automatic saving of output create_directory_system(tempdir()) #> Directory system being created in /tmp/RtmpEAMYJP file.exists(file.path(tempdir(),\"data\")) #> [1] TRUE file.exists(file.path(tempdir(),\"code\")) #> [1] TRUE file.exists(file.path(tempdir(),\"codelists\")) #> [1] TRUE  ## Return filespace to how it was prior to example delete_directory_system(tempdir()) #> Directory system being deleted from /tmp/RtmpEAMYJP"},{"path":"https://alexpate30.github.io/rcprd/reference/db_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query an RSQLite database. — db_query","title":"Query an RSQLite database. — db_query","text":"Query RSQLite database stored hard disk observations specific codes.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/db_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query an RSQLite database. — db_query","text":"","code":"db_query(   codelist = NULL,   db_open = NULL,   db = NULL,   db_filepath = NULL,   db_cprd = c(\"aurum\", \"gold\"),   tab = c(\"observation\", \"drugissue\", \"clinical\", \"immunisation\", \"test\", \"therapy\",     \"hes_primary\", \"death\"),   table_name = NULL,   codelist_vector = NULL,   codelist_df = NULL,   n = NULL,   rm_duplicates = FALSE )"},{"path":"https://alexpate30.github.io/rcprd/reference/db_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query an RSQLite database. — db_query","text":"codelist Name codelist query database . db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk, queried. db_filepath Full filepath SQLITE database hard disk, queried. db_cprd CPRD Aurum ('aurum') gold ('gold'). tab CPRD filetype table_name Specify name table SQLite database queried, different tab. codelist_vector Vector codes query database . codelist_df data.frame used specify codelist. n number observations output rm_duplicates TRUE/FALSE whether remove duplicate values (default FALSE)","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/db_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query an RSQLite database. — db_query","text":"data.table observations contained specified codelist.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/db_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query an RSQLite database. — db_query","text":"Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. Specifying codelist requires specific underlying directory structure. codelist hard disk must stored \"codelists/analysis/\" relative working directory, must .csv file, contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. codelist can also read manually, supplied character vector codelist_vector. codelist specified R data.frame, codelist_df, must contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. Specifying codelist way retain columns codelist_df queried output. argument table_name necessary name table queried match CPRD filetype specified tab. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/db_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query an RSQLite database. — db_query","text":"","code":"## Create connection to a temporary database aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Add observation data from all observation files in specified directory cprd_extract(db = aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\") #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:32.800724 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:32.813755 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:32.835297 #>    |                                                                               |======================================================================| 100%  ## Query database for a specific medcode db_query(db_open = aurum_extract, tab =\"observation\", codelist_vector = \"187341000000114\") #>     patid consid pracid  obsid    obsdate  enterdate staffid parentobsid #>    <char> <char>  <int> <char>     <Date>     <Date>  <char>      <char> #> 1:      1     42      1     81 1955-04-17 1981-10-12      85          35 #> 2:      2     56      1     77 1954-03-17 1932-02-22      24           4 #> 3:      6     40      1     41 1929-09-06 1951-01-12      98          80 #>          medcodeid value numunitid obstypeid numrangelow numrangehigh probobsid #>             <char> <num>     <int>     <int>       <num>        <num>    <char> #> 1: 187341000000114    84        79        67          24           22         5 #> 2: 187341000000114    46        92        81          56           30        18 #> 3: 187341000000114    28        20         5          41           97        92  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/delete_directory_system.html","id":null,"dir":"Reference","previous_headings":"","what":"Deletes directory system created by delete_directory_system — delete_directory_system","title":"Deletes directory system created by delete_directory_system — delete_directory_system","text":"Deletes directory system created delete_directory_system. Primarily used restore filespaces original examples/tests/vignettes.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/delete_directory_system.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deletes directory system created by delete_directory_system — delete_directory_system","text":"","code":"delete_directory_system(rootdir = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/delete_directory_system.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deletes directory system created by delete_directory_system — delete_directory_system","text":"rootdir Directory within delete directory system","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/delete_directory_system.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deletes directory system created by delete_directory_system — delete_directory_system","text":"return value, deletes directory system specified directory.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/delete_directory_system.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deletes directory system created by delete_directory_system — delete_directory_system","text":"","code":"## Print current working directory getwd() #> [1] \"/home/runner/work/rcprd/rcprd/docs/reference\"  ## Create directory system create_directory_system(tempdir()) #> Directory system being created in /tmp/RtmpEAMYJP file.exists(file.path(tempdir(),\"data\")) #> [1] TRUE file.exists(file.path(tempdir(),\"code\")) #> [1] TRUE file.exists(file.path(tempdir(),\"codelists\")) #> [1] TRUE  ## Return filespace to how it was prior to example delete_directory_system(tempdir()) #> Directory system being deleted from /tmp/RtmpEAMYJP file.exists(file.path(tempdir(),\"data\")) #> [1] FALSE file.exists(file.path(tempdir(),\"code\")) #> [1] FALSE file.exists(file.path(tempdir(),\"codelists\")) #> [1] FALSE"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_bmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract most recent BMI score relative to an index date. — extract_bmi","title":"Extract most recent BMI score relative to an index date. — extract_bmi","text":"Extract recent BMI score relative index date.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_bmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract most recent BMI score relative to an index date. — extract_bmi","text":"","code":"extract_bmi(   cohort,   varname = NULL,   codelist_bmi = NULL,   codelist_weight = NULL,   codelist_height = NULL,   codelist_bmi_vector = NULL,   codelist_weight_vector = NULL,   codelist_height_vector = NULL,   codelist_bmi_df = NULL,   codelist_weight_df = NULL,   codelist_height_df = NULL,   indexdt,   t = NULL,   t_varname = TRUE,   time_prev = 365.25 * 5,   time_post = 0,   lower_bound = -Inf,   upper_bound = Inf,   db_open = NULL,   db = NULL,   db_filepath = NULL,   table_name = NULL,   out_save_disk = FALSE,   out_subdir = NULL,   out_filepath = NULL,   return_output = TRUE )"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_bmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract most recent BMI score relative to an index date. — extract_bmi","text":"cohort Cohort extract age . varname Optional name variable output dataset. codelist_bmi Name codelist (stored hard disk \"codelists/analysis/\") BMI query database . codelist_weight Name codelist (stored hard disk \"codelists/analysis/\") weight query database . codelist_height Name codelist (stored hard disk \"codelists/analysis/\") height query database . codelist_bmi_vector Vector codes BMI query database . codelist_weight_vector Vector codes weight query database . codelist_height_vector Vector codes height query database . codelist_bmi_df data.frame codes BMI query database . codelist_weight_df data.frame codes weight query database . codelist_height_df data.frame codes height query database . indexdt Name variable defines index date cohort. t Number days index date calculate variable. t_varname Whether add t varname. time_prev Number days prior index date look codes. time_post Number days index date look codes. lower_bound Lower bound returned values. upper_bound Upper bound returned values. db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk (stored \"data/sql/\"), queried. db_filepath Full filepath SQLITE database hard disk, queried. table_name Specify name table SQLite database queried, different 'observation'. out_save_disk TRUE attempt save outputted data frame directory \"data/extraction/\". out_subdir Sub-directory \"data/extraction/\" save outputted data frame . out_filepath Full filepath filename save outputted data frame . return_output TRUE return outputted data frame R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_bmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract most recent BMI score relative to an index date. — extract_bmi","text":"data frame variable BMI.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_bmi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract most recent BMI score relative to an index date. — extract_bmi","text":"BMI can either identified directly recorded BMI score, calculated via height weight scores. Full details algorithm extracting BMI given vignette: Details--algorithms--extracting-specific-variables. vignette can viewed running vignette(\"help\", package = \"rcprd\"). Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. out_save_disk = TRUE, data frame automatically written .rds file subdirectory \"data/extraction/\" working directory. directory structure must created advance. out_subdir can used specify subdirectories within \"data/extraction/\". options use default naming convetion. can overwritten using out_filepath manually specify location hard disk save. Alternatively, return data frame R workspace using return_output = TRUE save onto hard disk manually. Specifying non-vector type codelists requires specific underlying directory structure. codelist hard disk must stored \"codelists/analysis/\" relative working directory, must .csv file, contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. input variables just name files (excluding suffix .csv). codelists can also read manually, supplied character vector. option take precedence codelists stored hard disk specified. argument table_name necessary name table queried match 'observation'. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_bmi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract most recent BMI score relative to an index date. — extract_bmi","text":"","code":"## Connect aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Create SQLite database using cprd_extract cprd_extract(aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\", use_set = FALSE) #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:33.28597 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:33.299014 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:33.310448 #>    |                                                                               |======================================================================| 100%  ## Define cohort and add index date pat<-extract_cohort(system.file(\"aurum_data\", package = \"rcprd\")) pat$indexdt <- as.Date(\"01/01/1955\", format = \"%d/%m/%Y\")  ## Extract most recent BMI prior to index date extract_bmi(cohort = pat, codelist_bmi_vector = \"498521000006119\", codelist_weight_vector = \"401539014\", codelist_height_vector = \"13483031000006114\", indexdt = \"indexdt\", time_prev = Inf, db_open = aurum_extract, return_output = TRUE) #>    patid bmi #> 1      1  NA #> 2     10  NA #> 3     11  NA #> 4     12  NA #> 5      2  NA #> 6      3  NA #> 7      4  NA #> 8      5  18 #> 9      6  NA #> 10     7  NA #> 11     8  NA #> 12     9  NA  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cholhdl_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract most recent total cholesterol/high-density lipoprotein ratio score relative to an index date. — extract_cholhdl_ratio","title":"Extract most recent total cholesterol/high-density lipoprotein ratio score relative to an index date. — extract_cholhdl_ratio","text":"Extract recent total cholesterol/high-density lipoprotein ratio score relative index date.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cholhdl_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract most recent total cholesterol/high-density lipoprotein ratio score relative to an index date. — extract_cholhdl_ratio","text":"","code":"extract_cholhdl_ratio(   cohort,   varname = NULL,   codelist_ratio = NULL,   codelist_chol = NULL,   codelist_hdl = NULL,   codelist_ratio_vector = NULL,   codelist_chol_vector = NULL,   codelist_hdl_vector = NULL,   codelist_ratio_df = NULL,   codelist_chol_df = NULL,   codelist_hdl_df = NULL,   indexdt,   t = NULL,   t_varname = TRUE,   time_prev = 365.25 * 5,   time_post = 0,   lower_bound = -Inf,   upper_bound = Inf,   db_open = NULL,   db = NULL,   db_filepath = NULL,   table_name = NULL,   out_save_disk = FALSE,   out_subdir = NULL,   out_filepath = NULL,   return_output = TRUE )"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cholhdl_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract most recent total cholesterol/high-density lipoprotein ratio score relative to an index date. — extract_cholhdl_ratio","text":"cohort Cohort extract age . varname Optional name variable output dataset. codelist_ratio Name codelist (stored hard disk \"codelists/analysis/\") ratio query database . codelist_chol Name codelist (stored hard disk \"codelists/analysis/\") total cholesterol query database . codelist_hdl Name codelist (stored hard disk \"codelists/analysis/\") high-density lipoprotein query database . codelist_ratio_vector Vector codes ratio query database . codelist_chol_vector Vector codes total cholesterol query database . codelist_hdl_vector Vector codes high-density lipoprotein query database . codelist_ratio_df data.frame codes ratio query database . codelist_chol_df data.frame codes total cholesterol query database . codelist_hdl_df data.frame codes high-density lipoprotein query database . indexdt Name variable defines index date cohort. t Number days index date calculate variable. t_varname Whether add t varname. time_prev Number days prior index date look codes. time_post Number days index date look codes. lower_bound Lower bound returned values. upper_bound Upper bound returned values. db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk (stored \"data/sql/\"), queried. db_filepath Full filepath SQLITE database hard disk, queried. table_name Specify name table SQLite database queried, different 'observation'. out_save_disk TRUE attempt save outputted data frame directory \"data/extraction/\". out_subdir Sub-directory \"data/extraction/\" save outputted data frame . out_filepath Full filepath filename save outputted data frame . return_output TRUE return outputted data frame R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cholhdl_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract most recent total cholesterol/high-density lipoprotein ratio score relative to an index date. — extract_cholhdl_ratio","text":"data frame variable total cholesterol/high-density lipoprotein ratio.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cholhdl_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract most recent total cholesterol/high-density lipoprotein ratio score relative to an index date. — extract_cholhdl_ratio","text":"Cholesterol/HDL ratio can either identified directly recorded cholesterol/hdl ratio score, calculated via total cholesterol HDL scores. Full details algorithm extracting cholesterol/hdl ratio given vignette: Details--algorithms--extracting-specific-variables. vignette can viewed running vignette(\"help\", package = \"rcprd\"). Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. out_save_disk = TRUE, data frame automatically written .rds file subdirectory \"data/extraction/\" working directory. directory structure must created advance. out_subdir can used specify subdirectories within \"data/extraction/\". options use default naming convetion. can overwritten using out_filepath manually specify location hard disk save. Alternatively, return data frame R workspace using return_output = TRUE save onto hard disk manually. Specifying non-vector type codelists requires specific underlying directory structure. codelist hard disk must stored \"codelists/analysis/\" relative working directory, must .csv file, contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. input variables just name files (excluding suffix .csv). codelists can also read manually, supplied character vector. option take precedence codelists stored hard disk specified. argument table_name necessary name table queried match 'observation'. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cholhdl_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract most recent total cholesterol/high-density lipoprotein ratio score relative to an index date. — extract_cholhdl_ratio","text":"","code":"## Connect aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Create SQLite database using cprd_extract cprd_extract(aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\", use_set = FALSE) #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:33.81997 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:33.833178 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:33.844782 #>    |                                                                               |======================================================================| 100%  ## Define cohort and add index date pat<-extract_cohort(system.file(\"aurum_data\", package = \"rcprd\")) pat$indexdt <- as.Date(\"01/01/1955\", format = \"%d/%m/%Y\")  ## Extract most recent cholhdl_ratio prior to index date extract_cholhdl_ratio(cohort = pat, codelist_ratio_vector = \"498521000006119\", codelist_chol_vector = \"401539014\", codelist_hdl_vector = \"13483031000006114\", indexdt = \"indexdt\", time_prev = Inf, db_open = aurum_extract, return_output = TRUE) #>    patid cholhdl_ratio #> 1      1            NA #> 2     10            NA #> 3     11            NA #> 4     12            NA #> 5      2            NA #> 6      3            NA #> 7      4            NA #> 8      5            18 #> 9      6            NA #> 10     7            NA #> 11     8            NA #> 12     9            NA  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cohort from patient files — extract_cohort","title":"Create cohort from patient files — extract_cohort","text":"Create cohort patient files","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cohort from patient files — extract_cohort","text":"","code":"extract_cohort(filepath, patids = NULL, select = NULL, set = FALSE)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cohort from patient files — extract_cohort","text":"filepath Path directory containing patient .txt files. patids Patids patients retain cohort. Character vector. Numeric values used. select Character vector column names select. set TRUE create variable called set contain number comes word 'set' file name.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create cohort from patient files — extract_cohort","text":"Data frame patient information","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_cohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create cohort from patient files — extract_cohort","text":"","code":"## Extract cohort data pat<-extract_cohort(filepath = system.file(\"aurum_data\", package = \"rcprd\")) pat #>    patid pracid usualgpstaffid gender  yob mob emis_ddate regstartdate #> 1      1     49              6      2 1984  NA 1976-11-21   1940-07-24 #> 2      2     79             11      1 1932  NA 1979-02-14   1929-02-23 #> 3      3     98             43      1 1930  NA 1972-06-01   1913-07-02 #> 4      4     53             72      2 1915  NA 1989-04-24   1969-07-11 #> 5      5     62             16      2 1916  NA 1951-09-23   1919-11-07 #> 6      6     54             11      1 1914  NA 1926-09-09   1970-08-28 #> 7      7     49              6      2 1984  NA 1976-11-21   1940-07-24 #> 8      8     79             11      1 1932  NA 1979-02-14   1929-02-23 #> 9      9     98             43      1 1930  NA 1972-06-01   1913-07-02 #> 10    10     53             72      2 1915  NA 1989-04-24   1969-07-11 #> 11    11     62             16      2 1916  NA 1951-09-23   1919-11-07 #> 12    12     54             11      1 1914  NA 1926-09-09   1970-08-28 #>    patienttypeid regenddate acceptable cprd_ddate #> 1             58 1996-08-25          1 1935-03-17 #> 2             21 1945-03-19          0 1932-02-05 #> 3             81 1997-04-24          1 1912-04-27 #> 4             10 1951-09-05          0 1921-02-13 #> 5             45 1998-11-25          0 1903-08-26 #> 6             85 1983-03-14          1 1963-08-27 #> 7             58 1996-08-25          1 1935-03-17 #> 8             21 1945-03-19          0 1932-02-05 #> 9             81 1997-04-24          1 1912-04-27 #> 10            10 1951-09-05          0 1921-02-13 #> 11            45 1998-11-25          0 1903-08-26 #> 12            85 1983-03-14          1 1963-08-27"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_diabetes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract diabetes status prior to an index date. — extract_diabetes","title":"Extract diabetes status prior to an index date. — extract_diabetes","text":"Extract diabetes status prior index date.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_diabetes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract diabetes status prior to an index date. — extract_diabetes","text":"","code":"extract_diabetes(   cohort,   varname = NULL,   codelist_type1 = NULL,   codelist_type2 = NULL,   codelist_type1_vector = NULL,   codelist_type2_vector = NULL,   codelist_type1_df = NULL,   codelist_type2_df = NULL,   indexdt,   t = NULL,   t_varname = TRUE,   db_open = NULL,   db = NULL,   db_filepath = NULL,   table_name = NULL,   out_save_disk = FALSE,   out_subdir = NULL,   out_filepath = NULL,   return_output = TRUE )"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_diabetes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract diabetes status prior to an index date. — extract_diabetes","text":"cohort Cohort extract age . varname Optional name variable output dataset. codelist_type1 Name codelist (stored hard disk \"codelists/analysis/\") type 1 diabetes query database . codelist_type2 Name codelist (stored hard disk \"codelists/analysis/\") type 2 diabetes query database . codelist_type1_vector Vector codes type 1 diabetes query database . codelist_type2_vector Vector codes type 2 diabetes query database . codelist_type1_df data.frame codes type 1 diabetes query database . codelist_type2_df data.frame codes type 2 diabetes query database . indexdt Name variable defines index date cohort. t Number days index date calculate variable. t_varname Whether add t varname. db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk (stored \"data/sql/\"), queried. db_filepath Full filepath SQLITE database hard disk, queried. table_name Specify name table SQLite database queried, different 'observation'. out_save_disk TRUE attempt save outputted data frame directory \"data/extraction/\". out_subdir Sub-directory \"data/extraction/\" save outputted data frame . out_filepath Full filepath filename save outputted data frame . return_output TRUE return outputted data frame R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_diabetes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract diabetes status prior to an index date. — extract_diabetes","text":"data frame variable diabetes status.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_diabetes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract diabetes status prior to an index date. — extract_diabetes","text":"individual found medical codes type 1 type 2 diabetes, returned value diabetes status type 1 diabetes. Full details algorithm extracting diabetes status given vignette: Details--algorithms--extracting-specific-variables. vignette can viewed running vignette(\"help\", package = \"rcprd\"). Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. out_save_disk = TRUE, data frame automatically written .rds file subdirectory \"data/extraction/\" working directory. directory structure must created advance. out_subdir can used specify subdirectories within \"data/extraction/\". options use default naming convetion. can overwritten using out_filepath manually specify location hard disk save. Alternatively, return data frame R workspace using return_output = TRUE save onto hard disk manually. Specifying non-vector type codelists requires specific underlying directory structure. codelist hard disk must stored \"codelists/analysis/\" relative working directory, must .csv file, contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. input variables just name files (excluding suffix .csv). codelists can also read manually, supplied character vector. option take precedence codelists stored hard disk specified. argument table_name necessary name table queried match 'observation'. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_diabetes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract diabetes status prior to an index date. — extract_diabetes","text":"","code":"## Connect aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Create SQLite database using cprd_extract cprd_extract(aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\", use_set = FALSE) #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:34.235703 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:34.248695 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:34.260072 #>    |                                                                               |======================================================================| 100%  ## Define cohort and add index date pat<-extract_cohort(system.file(\"aurum_data\", package = \"rcprd\")) pat$indexdt <- as.Date(\"01/01/1955\", format = \"%d/%m/%Y\")  ## Extract diabetes prior to index date extract_diabetes(cohort = pat, codelist_type1_vector = \"498521000006119\", codelist_type2_vector = \"401539014\", indexdt = \"indexdt\", db_open = aurum_extract) #>    patid diabetes #> 1      1   Absent #> 2      2   Absent #> 3      3   Absent #> 4      4   Absent #> 5      5    Type1 #> 6      6   Absent #> 7      7   Absent #> 8      8   Absent #> 9      9   Absent #> 10    10   Absent #> 11    11   Absent #> 12    12   Absent  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_ho.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a 'history of' type variable — extract_ho","title":"Extract a 'history of' type variable — extract_ho","text":"Query RSQLite database return data frame 0/1 vector depending whether individual least one observation relevant code specified time period.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_ho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a 'history of' type variable — extract_ho","text":"","code":"extract_ho(   cohort,   varname = NULL,   codelist = NULL,   codelist_vector = NULL,   codelist_df = NULL,   indexdt,   t = NULL,   t_varname = TRUE,   time_prev = Inf,   time_post = 0,   numobs = 1,   db_open = NULL,   db = NULL,   db_filepath = NULL,   tab = c(\"observation\", \"drugissue\", \"hes_primary\", \"death\"),   table_name = NULL,   out_save_disk = FALSE,   out_subdir = NULL,   out_filepath = NULL,   return_output = TRUE )"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_ho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a 'history of' type variable — extract_ho","text":"cohort Cohort individuals extract 'history ' variable . varname Name variable outputted data frame. codelist Name codelist (stored hard disk) query database . codelist_vector Vector codes query database . takes precedent codelist specified. codelist_df data.frame used specify codelist. indexdt Name variable cohort specifies index date. extracted variable calculated relative . t Number days indexdt extract variable. t_varname Whether alter variable name outputted data frame reflect t. time_prev Number days prior index date look codes. time_post Number days index date look codes. numobs Number obesrvations required return value 1. db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk (stored \"data/sql/\"), queried. db_filepath Full filepath SQLITE database hard disk, queried. tab Table name query SQLite database. table_name Specify name table SQLite database queried, different tab. out_save_disk TRUE attempt save outputted data frame directory \"data/extraction/\". out_subdir Sub-directory \"data/extraction/\" save outputted data frame . out_filepath Full filepath filename save outputted data frame . return_output TRUE return outputted data frame R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_ho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a 'history of' type variable — extract_ho","text":"data frame 0/1 vector patid. 1 = presence code within specified time period.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_ho.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a 'history of' type variable — extract_ho","text":"Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. out_save_disk = TRUE, data frame automatically written .rds file subdirectory \"data/extraction/\" working directory. directory structure must created advance. out_subdir can used specify subdirectories within \"data/extraction/\". options use default naming convention. can overwritten using out_filepath manually specify location hard disk save. Alternatively, return data frame R workspace using return_output = TRUE save onto hard disk manually. Codelists can specified three ways. first read codelist R character vector specify argument codelist_vector. second codelists stored hard disk, can = referred codelist argument, require specific underlying directory structure. codelist hard disk must stored directory called \"codelists/analysis/\" relative working directory. codelist must .csv file, contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending input argument tab. input argument codelist must character string name files (excluding suffix '.csv').  third specify codelist R data.frame, codelist_df, must contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. Specifying codelist way retain columns codelist_df queried output. argument table_name necessary name table queried match CPRD filetype specified tab. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_ho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a 'history of' type variable — extract_ho","text":"","code":"## Connect aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Create SQLite database using cprd_extract cprd_extract(aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\", use_set = FALSE) #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:34.507518 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:34.520587 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:34.532123 #>    |                                                                               |======================================================================| 100%  ## Define cohort and add index date pat<-extract_cohort(system.file(\"aurum_data\", package = \"rcprd\")) pat$indexdt <- as.Date(\"01/01/1955\", format = \"%d/%m/%Y\")  ## Extract a history of type variable prior to index date extract_ho(pat, codelist_vector = \"187341000000114\", indexdt = \"fup_start\", db_open = aurum_extract, tab = \"observation\", return_output = TRUE) #>    patid ho #> 1      1  0 #> 2      2  1 #> 3      3  0 #> 4      4  0 #> 5      5  0 #> 6      6  1 #> 7      7  0 #> 8      8  0 #> 9      9  0 #> 10    10  0 #> 11    11  0 #> 12    12  0  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_practices.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine practice files — extract_practices","title":"Combine practice files — extract_practices","text":"Combine practice files","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_practices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine practice files — extract_practices","text":"","code":"extract_practices(filepath, select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_practices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine practice files — extract_practices","text":"filepath Path directory containing practice .txt files. select Character vector column names select.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_practices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine practice files — extract_practices","text":"Data frame patient information","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_practices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine practice files — extract_practices","text":"","code":"## Extract cohort data prac<-extract_practices(filepath = system.file(\"aurum_data\", package = \"rcprd\")) prac #>   pracid        lcd  uts region #> 1     49 1941-09-20 <NA>     48 #> 2     53 1978-01-31 <NA>     51 #> 3     54 1948-10-01 <NA>     54 #> 4     62 1905-03-11 <NA>      9 #> 5     79 1969-06-25 <NA>      7 #> 6     98 1992-05-10 <NA>     48"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_smoking.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract smoking status prior to index date. — extract_smoking","title":"Extract smoking status prior to index date. — extract_smoking","text":"Extract smoking status prior index date.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_smoking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract smoking status prior to index date. — extract_smoking","text":"","code":"extract_smoking(   cohort,   varname = NULL,   codelist_non = NULL,   codelist_ex = NULL,   codelist_light = NULL,   codelist_mod = NULL,   codelist_heavy = NULL,   codelist_non_vector = NULL,   codelist_ex_vector = NULL,   codelist_light_vector = NULL,   codelist_mod_vector = NULL,   codelist_heavy_vector = NULL,   codelist_non_df = NULL,   codelist_ex_df = NULL,   codelist_light_df = NULL,   codelist_mod_df = NULL,   codelist_heavy_df = NULL,   indexdt,   t = NULL,   t_varname = TRUE,   db_open = NULL,   db = NULL,   db_filepath = NULL,   table_name = NULL,   out_save_disk = FALSE,   out_subdir = NULL,   out_filepath = NULL,   return_output = TRUE )"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_smoking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract smoking status prior to index date. — extract_smoking","text":"cohort Cohort extract age . varname Optional name variable output dataset. codelist_non Name codelist (stored hard disk \"codelists/analysis/\") non-smoker query database . codelist_ex Name codelist (stored hard disk \"codelists/analysis/\") ex-smoker query database . codelist_light Name codelist (stored hard disk \"codelists/analysis/\") light smoker query database . codelist_mod Name codelist (stored hard disk \"codelists/analysis/\") moderate smoker query database . codelist_heavy Name codelist (stored hard disk \"codelists/analysis/\") heavy smoker query database . codelist_non_vector Vector codes non-smoker query database . codelist_ex_vector Vector codes ex-smoker query database . codelist_light_vector Vector codes light smoker query database . codelist_mod_vector Vector codes moderate smoker query database . codelist_heavy_vector Vector codes heavy smoker query database . codelist_non_df data.frame codes non-smoker query database . codelist_ex_df data.frame codes ex-smoker query database . codelist_light_df data.frame codes light smoker query database . codelist_mod_df data.frame codes moderate smoker query database . codelist_heavy_df data.frame codes heavy smoker query database . indexdt Name variable defines index date cohort. t Number days index date calculate variable. t_varname Whether add t varname. db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk (stored \"data/sql/\"), queried. db_filepath Full filepath SQLITE database hard disk, queried. table_name Specify name table SQLite database queried, different 'observation'. out_save_disk TRUE attempt save outputted data frame directory \"data/extraction/\". out_subdir Sub-directory \"data/extraction/\" save outputted data frame . out_filepath Full filepath filename save outputted data frame . return_output TRUE return outputted data frame R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_smoking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract smoking status prior to index date. — extract_smoking","text":"data frame variable smoking status.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_smoking.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract smoking status prior to index date. — extract_smoking","text":"Returns recent value smoking status. recently recorded observation smoking status non-smoker, individual history smoking identified medical record, outputted value smoking status ex-smoker. Full details algorithm extracting smoking status given vignette: Details--algorithms--extracting-specific-variables. vignette can viewed running vignette(\"help\", package = \"rcprd\"). Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. out_save_disk = TRUE, data frame automatically written .rds file subdirectory \"data/extraction/\" working directory. directory structure must created advance. out_subdir can used specify subdirectories within \"data/extraction/\". options use default naming convetion. can overwritten using out_filepath manually specify location hard disk save. Alternatively, return data frame R workspace using return_output = TRUE save onto hard disk manually. Specifying non-vector type codelists requires specific underlying directory structure. codelist hard disk must stored \"codelists/analysis/\" relative working directory, must .csv file, contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. input variables just name files (excluding suffix .csv). codelists can also read manually, supplied character vector. option take precedence codelists stored hard disk specified. take recent smoking status record. individuals recent smoking status non-smoker, history smoking prior , individuals classed ex-smokers. argument table_name necessary name table queried match 'observation'. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_smoking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract smoking status prior to index date. — extract_smoking","text":"","code":"## Connect aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Create SQLite database using cprd_extract cprd_extract(aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\", use_set = FALSE) #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:34.902757 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:34.915866 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:34.927292 #>    |                                                                               |======================================================================| 100%  ## Define cohort and add index date pat<-extract_cohort(system.file(\"aurum_data\", package = \"rcprd\")) pat$indexdt <- as.Date(\"01/01/1955\", format = \"%d/%m/%Y\")  ## Extract smoking status prior to index date extract_smoking(cohort = pat, codelist_non_vector = \"498521000006119\", codelist_ex_vector = \"401539014\", codelist_light_vector = \"128011000000115\", codelist_mod_vector = \"380389013\", codelist_heavy_vector = \"13483031000006114\", indexdt = \"indexdt\", db_open = aurum_extract) #>    patid   smoking #> 1      1      <NA> #> 2     10      <NA> #> 3     11      <NA> #> 4     12      <NA> #> 5      2      <NA> #> 6      3      <NA> #> 7      4     Heavy #> 8      5 Ex-smoker #> 9      6  Moderate #> 10     7      <NA> #> 11     8      <NA> #> 12     9      <NA>  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract test data. — extract_test_data","title":"Extract test data. — extract_test_data","text":"Query RSQLite database return data frame containing recent test result meets specified criteria.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract test data. — extract_test_data","text":"","code":"extract_test_data(   cohort,   varname = NULL,   codelist = NULL,   codelist_vector = NULL,   codelist_df = NULL,   indexdt,   t = NULL,   t_varname = TRUE,   time_prev = Inf,   time_post = 0,   lower_bound = -Inf,   upper_bound = Inf,   numobs = 1,   keep_numunit = FALSE,   db_open = NULL,   db = NULL,   db_filepath = NULL,   table_name = NULL,   out_save_disk = FALSE,   out_subdir = NULL,   out_filepath = NULL,   return_output = FALSE )"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract test data. — extract_test_data","text":"cohort Cohort individuals extract 'history ' variable . varname Name variable outputted data frame. codelist Name codelist (stored hard disk) query database . codelist_vector Vector codes query database . codelist_df data.frame used specify codelist. indexdt Name variable cohort specifies index date. extracted variable calculated relative . t Number days indexdt extract variable. t_varname Whether alter variable name outputted data frame reflect t. time_prev Number days prior index date look codes. time_post Number days index date look codes. lower_bound Lower bound returned values. upper_bound Upper bound returned values. numobs Number test results return. return recent values valid time bound ranges. keep_numunit TRUE/FALSE whether keep numunitid, medcodeid obsdate outputted dataset. db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk (stored \"data/sql/\"), queried. db_filepath Full filepath SQLITE database hard disk, queried. table_name Specify name table SQLite database queried, different 'observation'. out_save_disk TRUE attempt save outputted data frame directory \"data/extraction/\". out_subdir Sub-directory \"data/extraction/\" save outputted data frame . out_filepath Full filepath filename save outputted data frame . return_output TRUE return outputted data frame R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract test data. — extract_test_data","text":"data frame containing test results meets required criteria.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract test data. — extract_test_data","text":"Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. out_save_disk = TRUE, data frame automatically written .rds file subdirectory \"data/extraction/\" working directory. directory structure must created advance. out_subdir can used specify subdirectories within \"data/extraction/\". options use default naming convetion. can overwritten using out_filepath manually specify location hard disk save. Alternatively, return data frame R workspace using return_output = TRUE save onto hard disk manually. Codelists can specified three ways. first read codelist R character vector specify argument codelist_vector. second codelists stored hard disk, can = referred codelist argument, require specific underlying directory structure. codelist hard disk must stored directory called \"codelists/analysis/\" relative working directory. codelist must .csv file, contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending input argument tab. input argument codelist must character string name files (excluding suffix '.csv').  third specify codelist R data.frame, codelist_df, must contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. Specifying codelist way retain columns codelist_df queried output. Currently returns recent test result. updated return one recent test result specified. argument table_name necessary name table queried match 'observation'. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract test data. — extract_test_data","text":"","code":"## Connect aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Create SQLite database using cprd_extract cprd_extract(aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\", use_set = FALSE) #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:35.275458 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:35.289491 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:35.301244 #>    |                                                                               |======================================================================| 100%  ## Define cohort and add index date pat<-extract_cohort(system.file(\"aurum_data\", package = \"rcprd\")) pat$indexdt <- as.Date(\"01/01/1955\", format = \"%d/%m/%Y\")  ## Extract most recent test value prior to index date extract_test_data(pat, codelist_vector = \"187341000000114\", indexdt = \"fup_start\", db_open = aurum_extract, time_prev = Inf, return_output = TRUE) #>    patid value #> 1      1    NA #> 2     10    NA #> 3     11    NA #> 4     12    NA #> 5      2    46 #> 6      3    NA #> 7      4    NA #> 8      5    NA #> 9      6    28 #> 10     7    NA #> 11     8    NA #> 12     9    NA  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract standard deviation of all test data values over a specified time period relative to an index date. — extract_test_data_var","title":"Extract standard deviation of all test data values over a specified time period relative to an index date. — extract_test_data_var","text":"Extract standard deviation test data values specified time period relative index date.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract standard deviation of all test data values over a specified time period relative to an index date. — extract_test_data_var","text":"","code":"extract_test_data_var(   cohort,   varname = NULL,   codelist = NULL,   codelist_vector = NULL,   codelist_df = NULL,   indexdt,   t = NULL,   t_varname = TRUE,   time_prev = 365.25 * 5,   time_post = 0,   lower_bound = -Inf,   upper_bound = Inf,   db_open = NULL,   db = NULL,   db_filepath = NULL,   table_name = NULL,   out_save_disk = FALSE,   out_subdir = NULL,   out_filepath = NULL,   return_output = FALSE )"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract standard deviation of all test data values over a specified time period relative to an index date. — extract_test_data_var","text":"cohort Cohort individuals extract 'history ' variable . varname Name variable outputted data frame. codelist Name codelist (stored hard disk) query database . codelist_vector Vector codes query database . takes precedent codelist specified. codelist_df data.frame used specify codelist. indexdt Name variable cohort specifies index date. extracted variable calculated relative . t Number days indexdt extract variable. t_varname Whether alter variable name outputted data frame reflect t. time_prev Number days prior index date look codes. time_post Number days index date look codes. lower_bound Lower bound returned values. upper_bound Upper bound returned values. db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk (stored \"data/sql/\"), queried. db_filepath Full filepath SQLITE database hard disk, queried. table_name Specify name table SQLite database queried, different 'observation'. out_save_disk TRUE attempt save outputted data frame directory \"data/extraction/\". out_subdir Sub-directory \"data/extraction/\" save outputted data frame . out_filepath Full filepath filename save outputted data frame . return_output TRUE return outputted data frame R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract standard deviation of all test data values over a specified time period relative to an index date. — extract_test_data_var","text":"data frame containing standard deviation test results.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data_var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract standard deviation of all test data values over a specified time period relative to an index date. — extract_test_data_var","text":"Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. out_save_disk = TRUE, data frame automatically written .rds file subdirectory \"data/extraction/\" working directory. directory structure must created advance. out_subdir can used specify subdirectories within \"data/extraction/\". options use default naming convetion. can overwritten using out_filepath manually specify location hard disk save. Alternatively, return data frame R workspace using return_output = TRUE save onto hard disk manually. Currently returns recent test result. updated return one recent test result specified. argument table_name necessary name table queried match 'observation'. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_data_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract standard deviation of all test data values over a specified time period relative to an index date. — extract_test_data_var","text":"","code":"## Connect aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Create SQLite database using cprd_extract cprd_extract(aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\", use_set = FALSE) #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:35.547368 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:35.560544 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:35.571924 #>    |                                                                               |======================================================================| 100%  ## Define cohort and add index date pat<-extract_cohort(system.file(\"aurum_data\", package = \"rcprd\")) pat$indexdt <- as.Date(\"01/01/1955\", format = \"%d/%m/%Y\")  ## Extract standard deviation of previous test scores prior to index date extract_test_data_var(pat, codelist_vector = \"187341000000114\", indexdt = \"fup_start\", db_open = aurum_extract, time_prev = Inf, return_output = TRUE) #>    patid value_var #> 1      1        NA #> 2     10        NA #> 3     11        NA #> 4     12        NA #> 5      2        NA #> 6      3        NA #> 7      4        NA #> 8      5        NA #> 9      6        NA #> 10     7        NA #> 11     8        NA #> 12     9        NA  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_recent.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract test data. — extract_test_recent","title":"Extract test data. — extract_test_recent","text":"Query RSQLite database return data frame containing recent test result meets specified criteria.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_recent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract test data. — extract_test_recent","text":"","code":"extract_test_recent(   cohort,   varname = NULL,   codelist = NULL,   codelist_vector = NULL,   codelist_df = NULL,   indexdt,   t = NULL,   t_varname = TRUE,   time_prev = 365.25 * 5,   time_post = 0,   lower_bound = -Inf,   upper_bound = Inf,   keep_numunit = FALSE,   db_open = NULL,   db = NULL,   db_filepath = NULL,   table_name = NULL,   out_save_disk = FALSE,   out_subdir = NULL,   out_filepath = NULL,   return_output = FALSE )"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_recent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract test data. — extract_test_recent","text":"cohort Cohort individuals extract 'history ' variable . varname Name variable outputted data frame. codelist Name codelist (stored hard disk) query database . codelist_vector Vector codes query database . takes precedent codelist specified. codelist_df data.frame used specify codelist. indexdt Name variable cohort specifies index date. extracted variable calculated relative . t Number days indexdt extract variable. t_varname Whether alter variable name outputted data frame reflect t. time_prev Number days prior index date look codes. time_post Number days index date look codes. lower_bound Lower bound returned values. upper_bound Upper bound returned values. keep_numunit TRUE/FALSE whether keep numunitid, medcodeid obsdate outputted dataset. db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk (stored \"data/sql/\"), queried. db_filepath Full filepath SQLITE database hard disk, queried. table_name Specify name table SQLite database queried, different 'observation'. out_save_disk TRUE attempt save outputted data frame directory \"data/extraction/\". out_subdir Sub-directory \"data/extraction/\" save outputted data frame . out_filepath Full filepath filename save outputted data frame . return_output TRUE return outputted data frame R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_recent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract test data. — extract_test_recent","text":"data frame containing recent test result meets required criteria.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_recent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract test data. — extract_test_recent","text":"Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. out_save_disk = TRUE, data frame automatically written .rds file subdirectory \"data/extraction/\" working directory. directory structure must created advance. out_subdir can used specify subdirectories within \"data/extraction/\". options use default naming convetion. can overwritten using out_filepath manually specify location hard disk save. Alternatively, return data frame R workspace using return_output = TRUE save onto hard disk manually. Codelists can specified three ways. first read codelist R character vector specify argument codelist_vector. second codelists stored hard disk, can = referred codelist argument, require specific underlying directory structure. codelist hard disk must stored directory called \"codelists/analysis/\" relative working directory. codelist must .csv file, contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending input argument tab. input argument codelist must character string name files (excluding suffix '.csv').  third specify codelist R data.frame, codelist_df, must contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. Specifying codelist way retain columns codelist_df queried output. Currently returns recent test result. updated return one recent test result specified. argument table_name necessary name table queried match 'observation'. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_test_recent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract test data. — extract_test_recent","text":"","code":"## Connect aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Create SQLite database using cprd_extract cprd_extract(aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\", use_set = FALSE) #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:35.818597 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:35.831769 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:35.8434 #>    |                                                                               |======================================================================| 100%  ## Define cohort and add index date pat<-extract_cohort(system.file(\"aurum_data\", package = \"rcprd\")) pat$indexdt <- as.Date(\"01/01/1955\", format = \"%d/%m/%Y\")  ## Extract most recent test value prior to index date extract_test_data(pat, codelist_vector = \"187341000000114\", indexdt = \"fup_start\", db_open = aurum_extract, time_prev = Inf, return_output = TRUE) #>    patid value #> 1      1    NA #> 2     10    NA #> 3     11    NA #> 4     12    NA #> 5      2    46 #> 6      3    NA #> 7      4    NA #> 8      5    NA #> 9      6    28 #> 10     7    NA #> 11     8    NA #> 12     9    NA  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_time_until.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a 'time until' type variable — extract_time_until","title":"Extract a 'time until' type variable — extract_time_until","text":"Query RSQLite database data frame time first code interest censoring, event/censoring indicator.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_time_until.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a 'time until' type variable — extract_time_until","text":"","code":"extract_time_until(   cohort,   varname_time = NULL,   varname_indicator = NULL,   codelist = NULL,   codelist_vector = NULL,   codelist_df = NULL,   indexdt,   censdt,   censdt_lag = 0,   t = NULL,   t_varname = TRUE,   db_open = NULL,   db = NULL,   db_filepath = NULL,   tab = c(\"observation\", \"drugissue\", \"hes_primary\", \"death\"),   table_name = NULL,   out_save_disk = FALSE,   out_subdir = NULL,   out_filepath = NULL,   return_output = FALSE )"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_time_until.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a 'time until' type variable — extract_time_until","text":"cohort Cohort individuals extract variable . varname_time Name time variable outputted data frame. varname_indicator Name event/censoring indicator outputted data frame. codelist Name codelist (stored hard disk) query database . codelist_vector Vector codes query database . takes precedent codelist specified. codelist_df data.frame used specify codelist. indexdt Name variable cohort specifies index date. extracted variable calculated relative . censdt Name variable cohort specifies censoring date. censdt_lag Number days censoring events still considered, account delays recording. t Number days indexdt extract variable. t_varname Whether alter variable name outputted data frame reflect t. db_open open SQLite database connection created using RSQLite::dbConnect, queried. db Name SQLITE database hard disk (stored \"data/sql/\"), queried. db_filepath Full filepath SQLITE database hard disk, queried. tab Table name query SQLite database. table_name Specify name table SQLite database queried, different tab. out_save_disk TRUE attempt save outputted data frame directory \"data/extraction/\". out_subdir Sub-directory \"data/extraction/\" save outputted data frame . out_filepath Full filepath filename save outputted data frame . return_output TRUE return outputted data frame R workspace.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_time_until.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a 'time until' type variable — extract_time_until","text":"data frame variable patid, variable containing time event/censoring, variable containing event/censoring indicator.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_time_until.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a 'time until' type variable — extract_time_until","text":"Specifying db requires specific underlying directory structure. SQLite database must stored \"data/sql/\" relative working directory. SQLite database accessed db, connection opened closed query complete. true database accessed db_filepath. connection SQLite database can also opened manually using RSQLite::dbConnect, using object input parameter db_open. wards, connection must closed manually using RSQLite::dbDisconnect. db_open specified, take precedence db db_filepath. out_save_disk = TRUE, data frame automatically written .rds file subdirectory \"data/extraction/\" working directory. directory structure must created advance. out_subdir can used specify subdirectories within \"data/extraction/\". options use default naming convetion. can overwritten using out_filepath manually specify location hard disk save. Alternatively, return data frame R workspace using return_output = TRUE save onto hard disk manually. Codelists can specified three ways. first read codelist R character vector specify argument codelist_vector. second codelists stored hard disk, can = referred codelist argument, require specific underlying directory structure. codelist hard disk must stored directory called \"codelists/analysis/\" relative working directory. codelist must .csv file, contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending input argument tab. input argument codelist must character string name files (excluding suffix '.csv').  third specify codelist R data.frame, codelist_df, must contain column \"medcodeid\", \"prodcodeid\" \"ICD10\" depending chosen tab. Specifying codelist way retain columns codelist_df queried output. time event time censored, considered event (var_indicator = 1) dtcens.lag > 0, time event interest time minimum event interest, date censoring. argument table_name necessary name table queried match CPRD filetype specified tab. occur str_match used cprd_extract add_to_database create .sqlite database.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_time_until.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a 'time until' type variable — extract_time_until","text":"","code":"## Connect aurum_extract <- connect_database(file.path(tempdir(), \"temp.sqlite\"))  ## Create SQLite database using cprd_extract cprd_extract(aurum_extract, filepath = system.file(\"aurum_data\", package = \"rcprd\"), filetype = \"observation\", use_set = FALSE) #>    |                                                                               |                                                                      |   0% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_001.txt 2025-06-27 09:32:36.08629 #>    |                                                                               |=======================                                               |  33% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_002.txt 2025-06-27 09:32:36.104515 #>    |                                                                               |===============================================                       |  67% #> Adding /home/runner/work/_temp/Library/rcprd/aurum_data/aurum_allpatid_set1_extract_observation_003.txt 2025-06-27 09:32:36.116617 #>    |                                                                               |======================================================================| 100%  ## Define cohort and add index date and censoring date pat<-extract_cohort(system.file(\"aurum_data\", package = \"rcprd\")) pat$indexdt <- as.Date(\"01/01/1955\", format = \"%d/%m/%Y\") pat$fup_end <- as.Date(\"01/01/2000\", format = \"%d/%m/%Y\")  ## Extract time until event/censoring extract_time_until(pat, codelist_vector = \"187341000000114\", indexdt = \"fup_start\", censdt = \"fup_end\", db_open = aurum_extract, tab = \"observation\", return_output = TRUE) #>    patid var_time var_indicator #> 1      1    16436             0 #> 2     10    16436             0 #> 3     11    16436             0 #> 4     12    16436             0 #> 5      2    16436             0 #> 6      3    16436             0 #> 7      4    16436             0 #> 8      5    16436             0 #> 9      6    16436             0 #> 10     7    16436             0 #> 11     8    16436             0 #> 12     9    16436             0  ## clean up RSQLite::dbDisconnect(aurum_extract) unlink(file.path(tempdir(), \"temp.sqlite\"))"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in txt file with all colClasses = ","title":"Read in txt file with all colClasses = ","text":"Read txt file colClasses = \"character\"","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in txt file with all colClasses = ","text":"","code":"extract_txt_char(filepath, ..., select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in txt file with all colClasses = ","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread select Character vector variable names select","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_cons.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in raw .txt consultation file — extract_txt_cons","title":"Read in raw .txt consultation file — extract_txt_cons","text":"Read raw .txt consultation file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_cons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in raw .txt consultation file — extract_txt_cons","text":"","code":"extract_txt_cons(filepath, ..., select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_cons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in raw .txt consultation file — extract_txt_cons","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread select Character vector variable names select","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_death.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in raw ONS death data file — extract_txt_death","title":"Read in raw ONS death data file — extract_txt_death","text":"Read raw ONS death data file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_death.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in raw ONS death data file — extract_txt_death","text":"","code":"extract_txt_death(filepath, ..., select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_death.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in raw ONS death data file — extract_txt_death","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread select Character vector variable names select","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_drug.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in raw .txt drugissue file — extract_txt_drug","title":"Read in raw .txt drugissue file — extract_txt_drug","text":"Read raw .txt drugissue file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_drug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in raw .txt drugissue file — extract_txt_drug","text":"","code":"extract_txt_drug(filepath, ..., select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_drug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in raw .txt drugissue file — extract_txt_drug","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread select Character vector variable names select","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_hes_primary.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in raw HES primary diagnoses file — extract_txt_hes_primary","title":"Read in raw HES primary diagnoses file — extract_txt_hes_primary","text":"Read raw HES primary diagnoses file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_hes_primary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in raw HES primary diagnoses file — extract_txt_hes_primary","text":"","code":"extract_txt_hes_primary(filepath, ..., select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_hes_primary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in raw HES primary diagnoses file — extract_txt_hes_primary","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread select Character vector variable names select","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_linkage.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in linkage eligibility file — extract_txt_linkage","title":"Read in linkage eligibility file — extract_txt_linkage","text":"Read linkage eligibility file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_linkage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in linkage eligibility file — extract_txt_linkage","text":"","code":"extract_txt_linkage(filepath, ...)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_linkage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in linkage eligibility file — extract_txt_linkage","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in raw .txt observation file — extract_txt_obs","title":"Read in raw .txt observation file — extract_txt_obs","text":"Read raw .txt observation file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in raw .txt observation file — extract_txt_obs","text":"","code":"extract_txt_obs(filepath, ..., select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in raw .txt observation file — extract_txt_obs","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread select Character vector variable names select","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_pat.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in raw .txt patient file — extract_txt_pat","title":"Read in raw .txt patient file — extract_txt_pat","text":"Read raw .txt patient file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_pat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in raw .txt patient file — extract_txt_pat","text":"","code":"extract_txt_pat(filepath, ..., set = FALSE)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_pat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in raw .txt patient file — extract_txt_pat","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread set TRUE create variable called set contain number comes word 'set' file name.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_prac.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in raw .txt practice file — extract_txt_prac","title":"Read in raw .txt practice file — extract_txt_prac","text":"Read raw .txt practice file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_prac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in raw .txt practice file — extract_txt_prac","text":"","code":"extract_txt_prac(filepath, ..., select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_prac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in raw .txt practice file — extract_txt_prac","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread select Character vector variable names select","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in raw .txt problem file — extract_txt_prob","title":"Read in raw .txt problem file — extract_txt_prob","text":"Read raw .txt problem file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in raw .txt problem file — extract_txt_prob","text":"","code":"extract_txt_prob(filepath, ..., select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in raw .txt problem file — extract_txt_prob","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread select Character vector variable names select","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in raw .txt referral file — extract_txt_ref","title":"Read in raw .txt referral file — extract_txt_ref","text":"Read raw .txt referral file","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in raw .txt referral file — extract_txt_ref","text":"","code":"extract_txt_ref(filepath, ..., select = NULL)"},{"path":"https://alexpate30.github.io/rcprd/reference/extract_txt_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in raw .txt referral file — extract_txt_ref","text":"filepath File path raw .txt file ... Arguments pass onto data.table::fread select Character vector variable names select","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/implement_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to implement saving extracted variable to disk or returning into R workspace. — implement_output","title":"Internal function to implement saving extracted variable to disk or returning into R workspace. — implement_output","text":"save extracted variable disk out_save_disk = TRUE. Note relies correct underlying structure directories. output extracted variable R workspace return_output = TRUE.","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/implement_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to implement saving extracted variable to disk or returning into R workspace. — implement_output","text":"","code":"implement_output(   variable_dat,   varname,   out_save_disk,   out_subdir,   out_filepath,   return_output )"},{"path":"https://alexpate30.github.io/rcprd/reference/implement_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to implement saving extracted variable to disk or returning into R workspace. — implement_output","text":"variable_dat Dataset containing variable varname Name variable use filename out_save_disk TRUE save output disk out_subdir Sub-directory data/ save output out_filepath Full fiilepath save dat onto return_output TRUE returns output R workspace","code":""},{"path":"https://alexpate30.github.io/rcprd/reference/rcprd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rcprd: Extraction and Management of Clinical Practice Research Datalink Data — rcprd-package","title":"rcprd: Extraction and Management of Clinical Practice Research Datalink Data — rcprd-package","text":"Simplify process extracting processing Clinical Practice Research Datalink (CPRD) data order build datasets ready statistical analysis. process difficult 'R', raw data large read R workspace. 'rcprd' utilises 'RSQLite' create 'SQLite' databases stored hard disk. queried extract required information cohort interest, create datasets ready statistical analysis. processes follow closely 'rEHR' package, see Springate et al., (2017) doi:10.1371/journal.pone.0171784 .","code":""},{"path":[]},{"path":"https://alexpate30.github.io/rcprd/reference/rcprd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rcprd: Extraction and Management of Clinical Practice Research Datalink Data — rcprd-package","text":"Maintainer: Alexander Pate alexander.pate@manchester.ac.uk (ORCID) [copyright holder]","code":""},{"path":"https://alexpate30.github.io/rcprd/news/index.html","id":"rcprd-001","dir":"Changelog","previous_headings":"","what":"rcprd 0.0.1","title":"rcprd 0.0.1","text":"CRAN release: 2024-11-13 Created NEWS.md file.","code":""},{"path":"https://alexpate30.github.io/rcprd/news/index.html","id":"rcprd-0009000","dir":"Changelog","previous_headings":"","what":"rcprd 0.0.0.9000","title":"rcprd 0.0.0.9000","text":"Preparing CRAN submission.","code":""}]
